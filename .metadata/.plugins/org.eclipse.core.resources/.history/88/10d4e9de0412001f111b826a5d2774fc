/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* Definitions for testing */
osThreadId_t testingHandle;
const osThreadAttr_t testing_attributes = {
  .name = "testing",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for UARTcom */
osThreadId_t UARTcomHandle;
const osThreadAttr_t UARTcom_attributes = {
  .name = "UARTcom",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityBelowNormal,
};
/* USER CODE BEGIN PV */
uint8_t znakrx1=1;
uint8_t state=0;
struct VoltageLevels{
	uint8_t test;
	uint32_t level15;
	uint32_t level25;
	uint32_t level30;
	uint32_t level28;
	uint32_t level11;
	uint32_t level178;
	uint32_t level18;
	uint32_t level42;
};
typedef struct VoltageLevels VoltageLevels;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART3_UART_Init(void);
void Test(void *argument);
void Uartcom(void *argument);

/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel){
	ADC_ChannelConfTypeDef sConfig={0};
	sConfig.Channel=AdcChannel;
	sConfig.Rank=1;
	//sConfig.SamplingTime=ADC_SAMPLETIME_3CYCLES;
	if(HAL_ADC_ConfigChannel(hadc, &sConfig)!=HAL_OK){
		Error_Handler();
	}
}
uint32_t ADC_measure(uint32_t ADC_CHANNEL){
	ADC_SetActiveChannel(&hadc1, ADC_CHANNEL);
	HAL_ADC_Start(&hadc1);
	if(HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK){
		return HAL_ADC_GetValue(&hadc1);
	}else return 0;
}
void performTest(VoltageLevels *LevelsStruct){

	LevelsStruct->level11=ADC_measure(ADC_CHANNEL_7);
	LevelsStruct->level15=ADC_measure(ADC_CHANNEL_7);
	LevelsStruct->level178=ADC_measure(ADC_CHANNEL_8);
	LevelsStruct->level18=ADC_measure(ADC_CHANNEL_4);
	LevelsStruct->level25=ADC_measure(ADC_CHANNEL_7);
	LevelsStruct->level28=ADC_measure(ADC_CHANNEL_1);
	LevelsStruct->level30=ADC_measure(ADC_CHANNEL_6);
	LevelsStruct->level42=ADC_measure(ADC_CHANNEL_7);

}
void compare(VoltageLevels *comp, VoltageLevels *levels){
	printf("Test:");
	printf(levels->test);
	if((levels->level11<=1,03*comp->level11)&&(levels->level11>=0,97*comp->level11)){
		printf("1,1V ok");
	}
	else printf("1,1V error");
	if((levels->level15<=1,03*comp->level15)&&(levels->level15>=0,97*comp->level15)){
			printf("1,5V ok");
		}
		else printf("1,5V error");
	if((levels->level25<=1,03*comp->level25)&&(levels->level25>=0,97*comp->level25)){
			printf("2,5V ok");
		}
		else printf("2,5V error");
	if((levels->level30<=1,03*comp->level30)&&(levels->level30>=0,97*comp->level30)){
			printf("3V ok");
		}
		else printf("3V error");
	if((levels->level28<=1,03*comp->level28)&&(levels->level28>=0,97*comp->level28)){
			printf("2,8V ok");
		}
		else printf("2,8V error");
	if((levels->level178<=1,03*comp->level178)&&(levels->level178>=0,97*comp->level178)){
			printf("1,78V ok");
		}
		else printf("1,78V error");
	if((levels->level18<=1,03*comp->level18)&&(levels->level18>=0,97*comp->level18)){
			printf("1,8V ok");
		}
		else printf("1,8V error");
	if((levels->level42<=1,03*comp->level42)&&(levels->level42>=0,97*comp->level42)){
			printf("4,2V ok");
		}
		else printf("4,2V error");
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_USART1_UART_Init();
  MX_ADC1_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of testing */
  testingHandle = osThreadNew(Test, NULL, &testing_attributes);

  /* creation of UARTcom */
  UARTcomHandle = osThreadNew(Uartcom, NULL, &UARTcom_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if(huart->Instance == USART1){
		HAL_UART_Transmit_IT(&huart2, &znakrx1, 1);
	}
}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_Test */
/**
  * @brief  Function implementing the testing thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Test */
void Test(void *argument)
{
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
	VoltageLevels toComp;
	toComp.test=0;
	toComp.level11=11;
	toComp.level15=15;
	toComp.level25=25;
	toComp.level30=30;
	toComp.level28=28;
	toComp.level178=178;
	toComp.level18-18;
	toComp.level42=42;
	VoltageLevels levels45;
	levels45.test=45;
	VoltageLevels levels5;
	levels5.test=5;
	VoltageLevels levels6;
	levels6.test=6;
	VoltageLevels levels7;
	levels7.test=7;
	VoltageLevels levels8;
	levels8.test=8;
	VoltageLevels levels9;
	levels9.test=9;
	VoltageLevels levels10;
	levels10.test=10;
	VoltageLevels levels11;
	levels11.test=11;
	VoltageLevels levels12;
	levels12.test =12;
	VoltageLevels levels13;
	levels13.test=13;
	VoltageLevels levels14;
	levels14.test=14;
	VoltageLevels levels15;
	levels15.test=15;
	VoltageLevels levels16;
	levels16.test=16;
	VoltageLevels levels17;
	levels17.test=17;
	VoltageLevels levels175;
	levels175.test=175;
	VoltageLevels levels18;
	levels18.test=18;

  HAL_ADC_Start(&hadc1);
  /* Infinite loop */

  while(1){

 printf("CHUJ");

	  if(state==0){
		  HAL_UART_Transmit(&huart3, "<09100000000>", 13, HAL_MAX_DELAY);
		  CDC_Transmit_FS("<09100000000>",13);
		  osDelay(50);

		  HAL_UART_Transmit(&huart3, "<01004580000>", 13, HAL_MAX_DELAY);
		  CDC_Transmit_FS("<01004580000>", 13);
		  osDelay(50);

		  HAL_UART_Transmit(&huart3, "<03006920000>", 13, HAL_MAX_DELAY);
		  CDC_Transmit_FS("<03006920001>",13);
		  osDelay(50);

		  state++;

	  }
  else{


	  CDC_Transmit_FS("<01004500001>",13);
	  HAL_UART_Transmit(&huart3, "<01004500001>", 13, HAL_MAX_DELAY);
	  osDelay(100);
	  performTest(&levels45);

	  CDC_Transmit_FS("<01005000001>",13);
	  HAL_UART_Transmit(&huart3, "<01005000001>", 13, HAL_MAX_DELAY);
	  	  osDelay(100);
	  performTest(&levels5);

	  CDC_Transmit_FS("<01006000001>",13);
	  HAL_UART_Transmit(&huart3, "<01006000001>", 13, HAL_MAX_DELAY);
	  	  osDelay(100);
	  performTest(&levels6);

	  CDC_Transmit_FS("<01007000001>",13);
	  HAL_UART_Transmit(&huart3, "<01007000001>", 13, HAL_MAX_DELAY);
	  	  osDelay(100);
	  performTest(&levels7);

	  CDC_Transmit_FS("<01008000001>",13);
	  HAL_UART_Transmit(&huart3, "<01008000001>", 13, HAL_MAX_DELAY);
	  	  osDelay(100);
	  performTest(&levels8);

	  CDC_Transmit_FS("<01009000001>",13);
	  HAL_UART_Transmit(&huart3, "<01009000001>", 13, HAL_MAX_DELAY);
	  	  osDelay(100);
	  performTest(&levels9);

	  CDC_Transmit_FS("<01010000001>",13);
	  HAL_UART_Transmit(&huart3, "<01010000001>", 13, HAL_MAX_DELAY);
	  	  osDelay(100);
	  performTest(&levels10);

	  CDC_Transmit_FS("<01011000001>",13);
	  HAL_UART_Transmit(&huart3, "<01011000001>", 13, HAL_MAX_DELAY);
	  	  	  osDelay(100);
	  performTest(&levels11);

	  CDC_Transmit_FS("<01012000001>",13);
	  HAL_UART_Transmit(&huart3, "<01012000001>", 13, HAL_MAX_DELAY);
	  	  	  osDelay(100);
	  performTest(&levels12);

	  CDC_Transmit_FS("<01013000001>",13);
	  HAL_UART_Transmit(&huart3, "<01013000001>", 13, HAL_MAX_DELAY);
	  	  	  osDelay(100);
	  performTest(&levels13);

	  CDC_Transmit_FS("<01014000001>",13);
	  HAL_UART_Transmit(&huart3, "<01014000001>", 13, HAL_MAX_DELAY);
	  	  	  osDelay(100);
	  performTest(&levels14);

	  CDC_Transmit_FS("<01015000001>",13);
	  HAL_UART_Transmit(&huart3, "<01015000001>", 13, HAL_MAX_DELAY);
	  	  	  osDelay(100);
	  performTest(&levels15);

	  CDC_Transmit_FS("<01016000001>",13);
	  HAL_UART_Transmit(&huart3, "<01016000001>", 13, HAL_MAX_DELAY);
	  	  	  osDelay(100);
	  performTest(&levels16);

	  CDC_Transmit_FS("<01017000001>",13);
	  HAL_UART_Transmit(&huart3, "<01017000001>", 13, HAL_MAX_DELAY);
	  	  	  osDelay(100);
	  performTest(&levels17);

	  CDC_Transmit_FS("<01017500001>",13);
	  HAL_UART_Transmit(&huart3, "<01017500001>", 13, HAL_MAX_DELAY);
	  	  	  osDelay(100);
	  performTest(&levels175);

	  CDC_Transmit_FS("<01018000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01018000001>", 13, HAL_MAX_DELAY);
	  	  	  osDelay(100);
	  performTest(&levels18);

	  	  osDelay(20000);
	  compare(&toComp,&levels45);
	  compare(&toComp,&levels5);
	  compare(&toComp,&levels6);
	  compare(&toComp,&levels7);
	  compare(&toComp,&levels8);
	  compare(&toComp,&levels9);
	  compare(&toComp,&levels10);
	  compare(&toComp,&levels11);
	  compare(&toComp,&levels12);
	  compare(&toComp,&levels13);
	  compare(&toComp,&levels14);
	  compare(&toComp,&levels15);
	  compare(&toComp,&levels16);
	  compare(&toComp,&levels17);
	  compare(&toComp,&levels175);
	  HAL_UART_Transmit(&huart2, "END", 3, HAL_MAX_DELAY);

 }
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_Uartcom */
/**
* @brief Function implementing the UARTcom thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uartcom */
void Uartcom(void *argument)
{
  /* USER CODE BEGIN Uartcom */
  /* Infinite loop */
  for(;;)
  {
	//printf("Message:");
    HAL_UART_Receive(&huart3, &znakrx1,1,0xFFFF);
    printf((uint8_t *)znakrx1);
    HAL_UART_Transmit(&huart2, &znakrx1, sizeof(znakrx1), HAL_MAX_DELAY);
  }
  /* USER CODE END Uartcom */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
