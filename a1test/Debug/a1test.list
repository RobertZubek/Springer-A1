
a1test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08004db8  08004db8  00005db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005150  08005150  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005150  08005150  00006150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005158  08005158  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005158  08005158  00006158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800515c  0800515c  0000615c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005160  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001d4  08005334  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08005334  0000741c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f49  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001586  00000000  00000000  0000e146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000f6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052d  00000000  00000000  0000fda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017803  00000000  00000000  000102d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fda  00000000  00000000  00027ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083bfa  00000000  00000000  0002fab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b36ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a34  00000000  00000000  000b36f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b6124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08004da0 	.word	0x08004da0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08004da0 	.word	0x08004da0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8e:	f000 fb5d 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a92:	f000 f821 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a96:	f000 f8dd 	bl	8000c54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a9a:	f000 f887 	bl	8000bac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a9e:	f000 f8af 	bl	8000c00 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000aa2:	f000 f859 	bl	8000b58 <MX_USART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t hex_data[13];
	  //uint8_t znak=1;
	  uint8_t znak=0x30;
 8000aa6:	2330      	movs	r3, #48	@ 0x30
 8000aa8:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Receive(&huart1, &znak, 1, HAL_MAX_DELAY);
 8000aaa:	1cf9      	adds	r1, r7, #3
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <main+0x48>)
 8000ab4:	f001 fb5b 	bl	800216e <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart2, &znak, 1, HAL_MAX_DELAY);
 8000ab8:	1cf9      	adds	r1, r7, #3
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <main+0x4c>)
 8000ac2:	f001 fad1 	bl	8002068 <HAL_UART_Transmit>
	  int i=0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  {
 8000aca:	bf00      	nop
 8000acc:	e7eb      	b.n	8000aa6 <main+0x1e>
 8000ace:	bf00      	nop
 8000ad0:	200001f0 	.word	0x200001f0
 8000ad4:	20000238 	.word	0x20000238

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b090      	sub	sp, #64	@ 0x40
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	2228      	movs	r2, #40	@ 0x28
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 f9ee 	bl	8002ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afe:	2301      	movs	r3, #1
 8000b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b02:	2310      	movs	r3, #16
 8000b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b06:	2302      	movs	r3, #2
 8000b08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fe46 	bl	80017a8 <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000b22:	f000 f905 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b26:	230f      	movs	r3, #15
 8000b28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 f8b3 	bl	8001cac <HAL_RCC_ClockConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b4c:	f000 f8f0 	bl	8000d30 <Error_Handler>
  }
}
 8000b50:	bf00      	nop
 8000b52:	3740      	adds	r7, #64	@ 0x40
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ba8 <MX_USART1_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b90:	f001 fa1a 	bl	8001fc8 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 f8c9 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200001f0 	.word	0x200001f0
 8000ba8:	40013800 	.word	0x40013800

08000bac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	@ (8000bfc <MX_USART2_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000be4:	f001 f9f0 	bl	8001fc8 <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f000 f89f 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000238 	.word	0x20000238
 8000bfc:	40004400 	.word	0x40004400

08000c00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <MX_USART3_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c0c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000c10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c38:	f001 f9c6 	bl	8001fc8 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f000 f875 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000280 	.word	0x20000280
 8000c50:	40004800 	.word	0x40004800

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	4b2d      	ldr	r3, [pc, #180]	@ (8000d20 <MX_GPIO_Init+0xcc>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8000d20 <MX_GPIO_Init+0xcc>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <MX_GPIO_Init+0xcc>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c80:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <MX_GPIO_Init+0xcc>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a26      	ldr	r2, [pc, #152]	@ (8000d20 <MX_GPIO_Init+0xcc>)
 8000c86:	f043 0320 	orr.w	r3, r3, #32
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <MX_GPIO_Init+0xcc>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0320 	and.w	r3, r3, #32
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <MX_GPIO_Init+0xcc>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a20      	ldr	r2, [pc, #128]	@ (8000d20 <MX_GPIO_Init+0xcc>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <MX_GPIO_Init+0xcc>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_GPIO_Init+0xcc>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d20 <MX_GPIO_Init+0xcc>)
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <MX_GPIO_Init+0xcc>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2120      	movs	r1, #32
 8000ccc:	4815      	ldr	r0, [pc, #84]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000cce:	f000 fd31 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <MX_GPIO_Init+0xd4>)
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4811      	ldr	r0, [pc, #68]	@ (8000d2c <MX_GPIO_Init+0xd8>)
 8000ce8:	f000 fba0 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cec:	2320      	movs	r3, #32
 8000cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000d04:	f000 fb92 	bl	800142c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2028      	movs	r0, #40	@ 0x28
 8000d0e:	f000 fb56 	bl	80013be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d12:	2028      	movs	r0, #40	@ 0x28
 8000d14:	f000 fb6f 	bl	80013f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d18:	bf00      	nop
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010800 	.word	0x40010800
 8000d28:	10110000 	.word	0x10110000
 8000d2c:	40011000 	.word	0x40011000

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <Error_Handler+0x8>

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_MspInit+0x5c>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	4a14      	ldr	r2, [pc, #80]	@ (8000d98 <HAL_MspInit+0x5c>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6193      	str	r3, [r2, #24]
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_MspInit+0x5c>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <HAL_MspInit+0x5c>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d98 <HAL_MspInit+0x5c>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <HAL_MspInit+0x5c>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_MspInit+0x60>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <HAL_MspInit+0x60>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010000 	.word	0x40010000

08000da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	@ 0x30
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0320 	add.w	r3, r7, #32
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a4d      	ldr	r2, [pc, #308]	@ (8000ef0 <HAL_UART_MspInit+0x150>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d132      	bne.n	8000e26 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b49      	ldr	r3, [pc, #292]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b46      	ldr	r3, [pc, #280]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a45      	ldr	r2, [pc, #276]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b43      	ldr	r3, [pc, #268]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000df0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	4619      	mov	r1, r3
 8000e04:	483c      	ldr	r0, [pc, #240]	@ (8000ef8 <HAL_UART_MspInit+0x158>)
 8000e06:	f000 fb11 	bl	800142c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4836      	ldr	r0, [pc, #216]	@ (8000ef8 <HAL_UART_MspInit+0x158>)
 8000e20:	f000 fb04 	bl	800142c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e24:	e060      	b.n	8000ee8 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART2)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a34      	ldr	r2, [pc, #208]	@ (8000efc <HAL_UART_MspInit+0x15c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d124      	bne.n	8000e7a <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e30:	4b30      	ldr	r3, [pc, #192]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e3a:	61d3      	str	r3, [r2, #28]
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a29      	ldr	r2, [pc, #164]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e60:	230c      	movs	r3, #12
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0320 	add.w	r3, r7, #32
 8000e70:	4619      	mov	r1, r3
 8000e72:	4821      	ldr	r0, [pc, #132]	@ (8000ef8 <HAL_UART_MspInit+0x158>)
 8000e74:	f000 fada 	bl	800142c <HAL_GPIO_Init>
}
 8000e78:	e036      	b.n	8000ee8 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a20      	ldr	r2, [pc, #128]	@ (8000f00 <HAL_UART_MspInit+0x160>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d131      	bne.n	8000ee8 <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000e8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e8e:	61d3      	str	r3, [r2, #28]
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000e92:	69db      	ldr	r3, [r3, #28]
 8000e94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_UART_MspInit+0x154>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 0320 	add.w	r3, r7, #32
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480e      	ldr	r0, [pc, #56]	@ (8000f04 <HAL_UART_MspInit+0x164>)
 8000eca:	f000 faaf 	bl	800142c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ece:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 0320 	add.w	r3, r7, #32
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4808      	ldr	r0, [pc, #32]	@ (8000f04 <HAL_UART_MspInit+0x164>)
 8000ee4:	f000 faa2 	bl	800142c <HAL_GPIO_Init>
}
 8000ee8:	bf00      	nop
 8000eea:	3730      	adds	r7, #48	@ 0x30
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40004400 	.word	0x40004400
 8000f00:	40004800 	.word	0x40004800
 8000f04:	40010c00 	.word	0x40010c00

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <NMI_Handler+0x4>

08000f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <MemManage_Handler+0x4>

08000f20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f000 f93e 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f64:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f68:	f000 fbfc 	bl	8001764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return 1;
 8000f74:	2301      	movs	r3, #1
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <_kill>:

int _kill(int pid, int sig)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f88:	f001 ffaa 	bl	8002ee0 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2216      	movs	r2, #22
 8000f90:	601a      	str	r2, [r3, #0]
  return -1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_exit>:

void _exit (int status)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fa6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffe7 	bl	8000f7e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <_exit+0x12>

08000fb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e00a      	b.n	8000fdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fc6:	f3af 8000 	nop.w
 8000fca:	4601      	mov	r1, r0
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	60ba      	str	r2, [r7, #8]
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbf0      	blt.n	8000fc6 <_read+0x12>
  }

  return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	e009      	b.n	8001014 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf1      	blt.n	8001000 <_write+0x12>
  }
  return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_close>:

int _close(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800104c:	605a      	str	r2, [r3, #4]
  return 0;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <_isatty>:

int _isatty(int file)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
	...

08001088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001090:	4a14      	ldr	r2, [pc, #80]	@ (80010e4 <_sbrk+0x5c>)
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <_sbrk+0x60>)
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800109c:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a4:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <_sbrk+0x64>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <_sbrk+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010aa:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d207      	bcs.n	80010c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b8:	f001 ff12 	bl	8002ee0 <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	220c      	movs	r2, #12
 80010c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010c6:	e009      	b.n	80010dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ce:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <_sbrk+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20005000 	.word	0x20005000
 80010e8:	00000400 	.word	0x00000400
 80010ec:	200002c8 	.word	0x200002c8
 80010f0:	20000420 	.word	0x20000420

080010f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001100:	f7ff fff8 	bl	80010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001104:	480b      	ldr	r0, [pc, #44]	@ (8001134 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001106:	490c      	ldr	r1, [pc, #48]	@ (8001138 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001108:	4a0c      	ldr	r2, [pc, #48]	@ (800113c <LoopFillZerobss+0x16>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800111c:	4c09      	ldr	r4, [pc, #36]	@ (8001144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112a:	f001 fedf 	bl	8002eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800112e:	f7ff fcab 	bl	8000a88 <main>
  bx lr
 8001132:	4770      	bx	lr
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800113c:	08005160 	.word	0x08005160
  ldr r2, =_sbss
 8001140:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001144:	2000041c 	.word	0x2000041c

08001148 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC1_2_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_Init+0x28>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <HAL_Init+0x28>)
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f923 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fde8 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40022000 	.word	0x40022000

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f93b 	bl	8001412 <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011b4:	f000 f903 	bl	80013be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_IncTick+0x1c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <HAL_IncTick+0x20>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a03      	ldr	r2, [pc, #12]	@ (80011f8 <HAL_IncTick+0x20>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000008 	.word	0x20000008
 80011f8:	200002cc 	.word	0x200002cc

080011fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b02      	ldr	r3, [pc, #8]	@ (800120c <HAL_GetTick+0x10>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	200002cc 	.word	0x200002cc

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4906      	ldr	r1, [pc, #24]	@ (80012a8 <__NVIC_EnableIRQ+0x34>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	@ (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	@ (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	@ 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
         );
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	@ 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001374:	d301      	bcc.n	800137a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001376:	2301      	movs	r3, #1
 8001378:	e00f      	b.n	800139a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <SysTick_Config+0x40>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001382:	210f      	movs	r1, #15
 8001384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001388:	f7ff ff90 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <SysTick_Config+0x40>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <SysTick_Config+0x40>)
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	e000e010 	.word	0xe000e010

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff2d 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff42 	bl	8001258 <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff90 	bl	8001300 <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff5f 	bl	80012ac <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff35 	bl	8001274 <__NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffa2 	bl	8001364 <SysTick_Config>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b480      	push	{r7}
 800142e:	b08b      	sub	sp, #44	@ 0x2c
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e169      	b.n	8001714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001440:	2201      	movs	r2, #1
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	429a      	cmp	r2, r3
 800145a:	f040 8158 	bne.w	800170e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a9a      	ldr	r2, [pc, #616]	@ (80016cc <HAL_GPIO_Init+0x2a0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d05e      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001468:	4a98      	ldr	r2, [pc, #608]	@ (80016cc <HAL_GPIO_Init+0x2a0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d875      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 800146e:	4a98      	ldr	r2, [pc, #608]	@ (80016d0 <HAL_GPIO_Init+0x2a4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d058      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001474:	4a96      	ldr	r2, [pc, #600]	@ (80016d0 <HAL_GPIO_Init+0x2a4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d86f      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 800147a:	4a96      	ldr	r2, [pc, #600]	@ (80016d4 <HAL_GPIO_Init+0x2a8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d052      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001480:	4a94      	ldr	r2, [pc, #592]	@ (80016d4 <HAL_GPIO_Init+0x2a8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d869      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 8001486:	4a94      	ldr	r2, [pc, #592]	@ (80016d8 <HAL_GPIO_Init+0x2ac>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d04c      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 800148c:	4a92      	ldr	r2, [pc, #584]	@ (80016d8 <HAL_GPIO_Init+0x2ac>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d863      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 8001492:	4a92      	ldr	r2, [pc, #584]	@ (80016dc <HAL_GPIO_Init+0x2b0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d046      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001498:	4a90      	ldr	r2, [pc, #576]	@ (80016dc <HAL_GPIO_Init+0x2b0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d85d      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 800149e:	2b12      	cmp	r3, #18
 80014a0:	d82a      	bhi.n	80014f8 <HAL_GPIO_Init+0xcc>
 80014a2:	2b12      	cmp	r3, #18
 80014a4:	d859      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 80014a6:	a201      	add	r2, pc, #4	@ (adr r2, 80014ac <HAL_GPIO_Init+0x80>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	08001527 	.word	0x08001527
 80014b0:	08001501 	.word	0x08001501
 80014b4:	08001513 	.word	0x08001513
 80014b8:	08001555 	.word	0x08001555
 80014bc:	0800155b 	.word	0x0800155b
 80014c0:	0800155b 	.word	0x0800155b
 80014c4:	0800155b 	.word	0x0800155b
 80014c8:	0800155b 	.word	0x0800155b
 80014cc:	0800155b 	.word	0x0800155b
 80014d0:	0800155b 	.word	0x0800155b
 80014d4:	0800155b 	.word	0x0800155b
 80014d8:	0800155b 	.word	0x0800155b
 80014dc:	0800155b 	.word	0x0800155b
 80014e0:	0800155b 	.word	0x0800155b
 80014e4:	0800155b 	.word	0x0800155b
 80014e8:	0800155b 	.word	0x0800155b
 80014ec:	0800155b 	.word	0x0800155b
 80014f0:	08001509 	.word	0x08001509
 80014f4:	0800151d 	.word	0x0800151d
 80014f8:	4a79      	ldr	r2, [pc, #484]	@ (80016e0 <HAL_GPIO_Init+0x2b4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014fe:	e02c      	b.n	800155a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e029      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	3304      	adds	r3, #4
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e024      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	3308      	adds	r3, #8
 8001518:	623b      	str	r3, [r7, #32]
          break;
 800151a:	e01f      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	330c      	adds	r3, #12
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e01a      	b.n	800155c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800152e:	2304      	movs	r3, #4
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e013      	b.n	800155c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d105      	bne.n	8001548 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800153c:	2308      	movs	r3, #8
 800153e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	611a      	str	r2, [r3, #16]
          break;
 8001546:	e009      	b.n	800155c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001548:	2308      	movs	r3, #8
 800154a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	615a      	str	r2, [r3, #20]
          break;
 8001552:	e003      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
          break;
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x130>
          break;
 800155a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2bff      	cmp	r3, #255	@ 0xff
 8001560:	d801      	bhi.n	8001566 <HAL_GPIO_Init+0x13a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	e001      	b.n	800156a <HAL_GPIO_Init+0x13e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3304      	adds	r3, #4
 800156a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2bff      	cmp	r3, #255	@ 0xff
 8001570:	d802      	bhi.n	8001578 <HAL_GPIO_Init+0x14c>
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x152>
 8001578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157a:	3b08      	subs	r3, #8
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	210f      	movs	r1, #15
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	401a      	ands	r2, r3
 8001590:	6a39      	ldr	r1, [r7, #32]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	431a      	orrs	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80b1 	beq.w	800170e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ac:	4b4d      	ldr	r3, [pc, #308]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a4c      	ldr	r2, [pc, #304]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b4a      	ldr	r3, [pc, #296]	@ (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015c4:	4a48      	ldr	r2, [pc, #288]	@ (80016e8 <HAL_GPIO_Init+0x2bc>)
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a40      	ldr	r2, [pc, #256]	@ (80016ec <HAL_GPIO_Init+0x2c0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d013      	beq.n	8001618 <HAL_GPIO_Init+0x1ec>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a3f      	ldr	r2, [pc, #252]	@ (80016f0 <HAL_GPIO_Init+0x2c4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d00d      	beq.n	8001614 <HAL_GPIO_Init+0x1e8>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a3e      	ldr	r2, [pc, #248]	@ (80016f4 <HAL_GPIO_Init+0x2c8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d007      	beq.n	8001610 <HAL_GPIO_Init+0x1e4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3d      	ldr	r2, [pc, #244]	@ (80016f8 <HAL_GPIO_Init+0x2cc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d101      	bne.n	800160c <HAL_GPIO_Init+0x1e0>
 8001608:	2303      	movs	r3, #3
 800160a:	e006      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 800160c:	2304      	movs	r3, #4
 800160e:	e004      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 8001610:	2302      	movs	r3, #2
 8001612:	e002      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 8001618:	2300      	movs	r3, #0
 800161a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800161c:	f002 0203 	and.w	r2, r2, #3
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	4093      	lsls	r3, r2
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800162a:	492f      	ldr	r1, [pc, #188]	@ (80016e8 <HAL_GPIO_Init+0x2bc>)
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3302      	adds	r3, #2
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001644:	4b2d      	ldr	r3, [pc, #180]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	492c      	ldr	r1, [pc, #176]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	608b      	str	r3, [r1, #8]
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001652:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	43db      	mvns	r3, r3
 800165a:	4928      	ldr	r1, [pc, #160]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 800165c:	4013      	ands	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800166c:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	4922      	ldr	r1, [pc, #136]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	60cb      	str	r3, [r1, #12]
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	491e      	ldr	r1, [pc, #120]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 8001684:	4013      	ands	r3, r2
 8001686:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4918      	ldr	r1, [pc, #96]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a2:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4914      	ldr	r1, [pc, #80]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d021      	beq.n	8001700 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016bc:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	490e      	ldr	r1, [pc, #56]	@ (80016fc <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e021      	b.n	800170e <HAL_GPIO_Init+0x2e2>
 80016ca:	bf00      	nop
 80016cc:	10320000 	.word	0x10320000
 80016d0:	10310000 	.word	0x10310000
 80016d4:	10220000 	.word	0x10220000
 80016d8:	10210000 	.word	0x10210000
 80016dc:	10120000 	.word	0x10120000
 80016e0:	10110000 	.word	0x10110000
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000
 80016ec:	40010800 	.word	0x40010800
 80016f0:	40010c00 	.word	0x40010c00
 80016f4:	40011000 	.word	0x40011000
 80016f8:	40011400 	.word	0x40011400
 80016fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_GPIO_Init+0x304>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	43db      	mvns	r3, r3
 8001708:	4909      	ldr	r1, [pc, #36]	@ (8001730 <HAL_GPIO_Init+0x304>)
 800170a:	4013      	ands	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	3301      	adds	r3, #1
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	f47f ae8e 	bne.w	8001440 <HAL_GPIO_Init+0x14>
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	372c      	adds	r7, #44	@ 0x2c
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001750:	e003      	b.n	800175a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	041a      	lsls	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	611a      	str	r2, [r3, #16]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	4013      	ands	r3, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f806 	bl	8001794 <HAL_GPIO_EXTI_Callback>
  }
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e272      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8087 	beq.w	80018d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c8:	4b92      	ldr	r3, [pc, #584]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d00c      	beq.n	80017ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d112      	bne.n	8001806 <HAL_RCC_OscConfig+0x5e>
 80017e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ec:	d10b      	bne.n	8001806 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ee:	4b89      	ldr	r3, [pc, #548]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d06c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x12c>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d168      	bne.n	80018d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e24c      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x76>
 8001810:	4b80      	ldr	r3, [pc, #512]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a7f      	ldr	r2, [pc, #508]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e02e      	b.n	800187c <HAL_RCC_OscConfig+0xd4>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x98>
 8001826:	4b7b      	ldr	r3, [pc, #492]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a7a      	ldr	r2, [pc, #488]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800182c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b78      	ldr	r3, [pc, #480]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a77      	ldr	r2, [pc, #476]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001838:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e01d      	b.n	800187c <HAL_RCC_OscConfig+0xd4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0xbc>
 800184a:	4b72      	ldr	r3, [pc, #456]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a71      	ldr	r2, [pc, #452]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b6f      	ldr	r3, [pc, #444]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a6e      	ldr	r2, [pc, #440]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0xd4>
 8001864:	4b6b      	ldr	r3, [pc, #428]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6a      	ldr	r2, [pc, #424]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b68      	ldr	r3, [pc, #416]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a67      	ldr	r2, [pc, #412]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800187a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fcba 	bl	80011fc <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fcb6 	bl	80011fc <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	@ 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e200      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b5d      	ldr	r3, [pc, #372]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0xe4>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fca6 	bl	80011fc <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff fca2 	bl	80011fc <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	@ 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e1ec      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	4b53      	ldr	r3, [pc, #332]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x10c>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d063      	beq.n	80019aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ee:	4b49      	ldr	r3, [pc, #292]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d11c      	bne.n	8001934 <HAL_RCC_OscConfig+0x18c>
 80018fa:	4b46      	ldr	r3, [pc, #280]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d116      	bne.n	8001934 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	4b43      	ldr	r3, [pc, #268]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_RCC_OscConfig+0x176>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e1c0      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4939      	ldr	r1, [pc, #228]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	e03a      	b.n	80019aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4b36      	ldr	r3, [pc, #216]	@ (8001a18 <HAL_RCC_OscConfig+0x270>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff fc5b 	bl	80011fc <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff fc57 	bl	80011fc <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e1a1      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b2a      	ldr	r3, [pc, #168]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4927      	ldr	r1, [pc, #156]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e015      	b.n	80019aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197e:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <HAL_RCC_OscConfig+0x270>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fc3a 	bl	80011fc <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198c:	f7ff fc36 	bl	80011fc <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e180      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d03a      	beq.n	8001a2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d019      	beq.n	80019f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019be:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <HAL_RCC_OscConfig+0x274>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c4:	f7ff fc1a 	bl	80011fc <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff fc16 	bl	80011fc <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e160      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f000 face 	bl	8001f8c <RCC_Delay>
 80019f0:	e01c      	b.n	8001a2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_RCC_OscConfig+0x274>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7ff fc00 	bl	80011fc <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fe:	e00f      	b.n	8001a20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a00:	f7ff fbfc 	bl	80011fc <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d908      	bls.n	8001a20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e146      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	42420000 	.word	0x42420000
 8001a1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a20:	4b92      	ldr	r3, [pc, #584]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1e9      	bne.n	8001a00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80a6 	beq.w	8001b86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10d      	bne.n	8001a66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b88      	ldr	r3, [pc, #544]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4a87      	ldr	r2, [pc, #540]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	61d3      	str	r3, [r2, #28]
 8001a56:	4b85      	ldr	r3, [pc, #532]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a62:	2301      	movs	r3, #1
 8001a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a66:	4b82      	ldr	r3, [pc, #520]	@ (8001c70 <HAL_RCC_OscConfig+0x4c8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d118      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a72:	4b7f      	ldr	r3, [pc, #508]	@ (8001c70 <HAL_RCC_OscConfig+0x4c8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a7e      	ldr	r2, [pc, #504]	@ (8001c70 <HAL_RCC_OscConfig+0x4c8>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fbbd 	bl	80011fc <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a86:	f7ff fbb9 	bl	80011fc <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b64      	cmp	r3, #100	@ 0x64
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e103      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	4b75      	ldr	r3, [pc, #468]	@ (8001c70 <HAL_RCC_OscConfig+0x4c8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x312>
 8001aac:	4b6f      	ldr	r3, [pc, #444]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a6e      	ldr	r2, [pc, #440]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6213      	str	r3, [r2, #32]
 8001ab8:	e02d      	b.n	8001b16 <HAL_RCC_OscConfig+0x36e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x334>
 8001ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a69      	ldr	r2, [pc, #420]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	4b67      	ldr	r3, [pc, #412]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a66      	ldr	r2, [pc, #408]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	6213      	str	r3, [r2, #32]
 8001ada:	e01c      	b.n	8001b16 <HAL_RCC_OscConfig+0x36e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d10c      	bne.n	8001afe <HAL_RCC_OscConfig+0x356>
 8001ae4:	4b61      	ldr	r3, [pc, #388]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4a60      	ldr	r2, [pc, #384]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6213      	str	r3, [r2, #32]
 8001af0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	4a5d      	ldr	r2, [pc, #372]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6213      	str	r3, [r2, #32]
 8001afc:	e00b      	b.n	8001b16 <HAL_RCC_OscConfig+0x36e>
 8001afe:	4b5b      	ldr	r3, [pc, #364]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4a5a      	ldr	r2, [pc, #360]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6213      	str	r3, [r2, #32]
 8001b0a:	4b58      	ldr	r3, [pc, #352]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a57      	ldr	r2, [pc, #348]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d015      	beq.n	8001b4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fb6d 	bl	80011fc <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff fb69 	bl	80011fc <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e0b1      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ee      	beq.n	8001b26 <HAL_RCC_OscConfig+0x37e>
 8001b48:	e014      	b.n	8001b74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fb57 	bl	80011fc <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff fb53 	bl	80011fc <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e09b      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	4b40      	ldr	r3, [pc, #256]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ee      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b74:	7dfb      	ldrb	r3, [r7, #23]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d105      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8087 	beq.w	8001c9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b90:	4b36      	ldr	r3, [pc, #216]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d061      	beq.n	8001c60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d146      	bne.n	8001c32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba4:	4b33      	ldr	r3, [pc, #204]	@ (8001c74 <HAL_RCC_OscConfig+0x4cc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7ff fb27 	bl	80011fc <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7ff fb23 	bl	80011fc <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e06d      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc4:	4b29      	ldr	r3, [pc, #164]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd8:	d108      	bne.n	8001bec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bda:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	4921      	ldr	r1, [pc, #132]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bec:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a19      	ldr	r1, [r3, #32]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	491b      	ldr	r1, [pc, #108]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c04:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <HAL_RCC_OscConfig+0x4cc>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff faf7 	bl	80011fc <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff faf3 	bl	80011fc <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e03d      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x46a>
 8001c30:	e035      	b.n	8001c9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <HAL_RCC_OscConfig+0x4cc>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fae0 	bl	80011fc <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff fadc 	bl	80011fc <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e026      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x498>
 8001c5e:	e01e      	b.n	8001c9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e019      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40007000 	.word	0x40007000
 8001c74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_RCC_OscConfig+0x500>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000

08001cac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0d0      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d910      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b67      	ldr	r3, [pc, #412]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 0207 	bic.w	r2, r3, #7
 8001cd6:	4965      	ldr	r1, [pc, #404]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b63      	ldr	r3, [pc, #396]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0b8      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d020      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d08:	4b59      	ldr	r3, [pc, #356]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4a58      	ldr	r2, [pc, #352]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d20:	4b53      	ldr	r3, [pc, #332]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4a52      	ldr	r2, [pc, #328]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2c:	4b50      	ldr	r3, [pc, #320]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	494d      	ldr	r1, [pc, #308]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d040      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	4b47      	ldr	r3, [pc, #284]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d115      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e07f      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6a:	4b41      	ldr	r3, [pc, #260]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e073      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e06b      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8a:	4b39      	ldr	r3, [pc, #228]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f023 0203 	bic.w	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4936      	ldr	r1, [pc, #216]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d9c:	f7ff fa2e 	bl	80011fc <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da4:	f7ff fa2a 	bl	80011fc <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e053      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 020c 	and.w	r2, r3, #12
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d1eb      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b27      	ldr	r3, [pc, #156]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d210      	bcs.n	8001dfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 0207 	bic.w	r2, r3, #7
 8001de2:	4922      	ldr	r1, [pc, #136]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e032      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4916      	ldr	r1, [pc, #88]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e26:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	490e      	ldr	r1, [pc, #56]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e3a:	f000 f821 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	490a      	ldr	r1, [pc, #40]	@ (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4c:	5ccb      	ldrb	r3, [r1, r3]
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	4a09      	ldr	r2, [pc, #36]	@ (8001e78 <HAL_RCC_ClockConfig+0x1cc>)
 8001e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e56:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <HAL_RCC_ClockConfig+0x1d0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f98c 	bl	8001178 <HAL_InitTick>

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40022000 	.word	0x40022000
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08004db8 	.word	0x08004db8
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d002      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x30>
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d003      	beq.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x36>
 8001eae:	e027      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eb0:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eb2:	613b      	str	r3, [r7, #16]
      break;
 8001eb4:	e027      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	0c9b      	lsrs	r3, r3, #18
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	4a17      	ldr	r2, [pc, #92]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ec0:	5cd3      	ldrb	r3, [r2, r3]
 8001ec2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d010      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ece:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	0c5b      	lsrs	r3, r3, #17
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	4a11      	ldr	r2, [pc, #68]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ee2:	fb03 f202 	mul.w	r2, r3, r2
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	e004      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	613b      	str	r3, [r7, #16]
      break;
 8001efe:	e002      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f02:	613b      	str	r3, [r7, #16]
      break;
 8001f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f06:	693b      	ldr	r3, [r7, #16]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	007a1200 	.word	0x007a1200
 8001f1c:	08004dd0 	.word	0x08004dd0
 8001f20:	08004de0 	.word	0x08004de0
 8001f24:	003d0900 	.word	0x003d0900

08001f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f2c:	4b02      	ldr	r3, [pc, #8]	@ (8001f38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	20000000 	.word	0x20000000

08001f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f40:	f7ff fff2 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4903      	ldr	r1, [pc, #12]	@ (8001f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	08004dc8 	.word	0x08004dc8

08001f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f68:	f7ff ffde 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	0adb      	lsrs	r3, r3, #11
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	4903      	ldr	r1, [pc, #12]	@ (8001f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08004dc8 	.word	0x08004dc8

08001f8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f94:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <RCC_Delay+0x34>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <RCC_Delay+0x38>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	0a5b      	lsrs	r3, r3, #9
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa8:	bf00      	nop
  }
  while (Delay --);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1e5a      	subs	r2, r3, #1
 8001fae:	60fa      	str	r2, [r7, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f9      	bne.n	8001fa8 <RCC_Delay+0x1c>
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	10624dd3 	.word	0x10624dd3

08001fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e042      	b.n	8002060 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fed6 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2224      	movs	r2, #36	@ 0x24
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800200a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f9af 	bl	8002370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	@ 0x28
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b20      	cmp	r3, #32
 8002086:	d16d      	bne.n	8002164 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_UART_Transmit+0x2c>
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e066      	b.n	8002166 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2221      	movs	r2, #33	@ 0x21
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020a6:	f7ff f8a9 	bl	80011fc <HAL_GetTick>
 80020aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	88fa      	ldrh	r2, [r7, #6]
 80020b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	88fa      	ldrh	r2, [r7, #6]
 80020b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020c0:	d108      	bne.n	80020d4 <HAL_UART_Transmit+0x6c>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d104      	bne.n	80020d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	e003      	b.n	80020dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020dc:	e02a      	b.n	8002134 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2180      	movs	r1, #128	@ 0x80
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f8d2 	bl	8002292 <UART_WaitOnFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e036      	b.n	8002166 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10b      	bne.n	8002116 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800210c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	3302      	adds	r3, #2
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e007      	b.n	8002126 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	3301      	adds	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1cf      	bne.n	80020de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2200      	movs	r2, #0
 8002146:	2140      	movs	r1, #64	@ 0x40
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f8a2 	bl	8002292 <UART_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e006      	b.n	8002166 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e000      	b.n	8002166 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b08a      	sub	sp, #40	@ 0x28
 8002172:	af02      	add	r7, sp, #8
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b20      	cmp	r3, #32
 800218c:	d17c      	bne.n	8002288 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_UART_Receive+0x2c>
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e075      	b.n	800228a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2222      	movs	r2, #34	@ 0x22
 80021a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021b2:	f7ff f823 	bl	80011fc <HAL_GetTick>
 80021b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	88fa      	ldrh	r2, [r7, #6]
 80021bc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	88fa      	ldrh	r2, [r7, #6]
 80021c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021cc:	d108      	bne.n	80021e0 <HAL_UART_Receive+0x72>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d104      	bne.n	80021e0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	e003      	b.n	80021e8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021e8:	e043      	b.n	8002272 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2200      	movs	r2, #0
 80021f2:	2120      	movs	r1, #32
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f84c 	bl	8002292 <UART_WaitOnFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e042      	b.n	800228a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10c      	bne.n	8002224 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	b29b      	uxth	r3, r3
 8002212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002216:	b29a      	uxth	r2, r3
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	3302      	adds	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	e01f      	b.n	8002264 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800222c:	d007      	beq.n	800223e <HAL_UART_Receive+0xd0>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10a      	bne.n	800224c <HAL_UART_Receive+0xde>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	e008      	b.n	800225e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002258:	b2da      	uxtb	r2, r3
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3301      	adds	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1b6      	bne.n	80021ea <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002288:	2302      	movs	r3, #2
  }
}
 800228a:	4618      	mov	r0, r3
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b090      	sub	sp, #64	@ 0x40
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a2:	e050      	b.n	8002346 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022aa:	d04c      	beq.n	8002346 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80022b2:	f7fe ffa3 	bl	80011fc <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022be:	429a      	cmp	r2, r3
 80022c0:	d241      	bcs.n	8002346 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	330c      	adds	r3, #12
 80022c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80022d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	330c      	adds	r3, #12
 80022e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80022e4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022ea:	e841 2300 	strex	r3, r2, [r1]
 80022ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80022f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e5      	bne.n	80022c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3314      	adds	r3, #20
 80022fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	e853 3f00 	ldrex	r3, [r3]
 8002304:	613b      	str	r3, [r7, #16]
   return(result);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3314      	adds	r3, #20
 8002314:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002316:	623a      	str	r2, [r7, #32]
 8002318:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231a:	69f9      	ldr	r1, [r7, #28]
 800231c:	6a3a      	ldr	r2, [r7, #32]
 800231e:	e841 2300 	strex	r3, r2, [r1]
 8002322:	61bb      	str	r3, [r7, #24]
   return(result);
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e5      	bne.n	80022f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e00f      	b.n	8002366 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4013      	ands	r3, r2
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	429a      	cmp	r2, r3
 8002354:	bf0c      	ite	eq
 8002356:	2301      	moveq	r3, #1
 8002358:	2300      	movne	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	429a      	cmp	r2, r3
 8002362:	d09f      	beq.n	80022a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3740      	adds	r7, #64	@ 0x40
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	4313      	orrs	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80023aa:	f023 030c 	bic.w	r3, r3, #12
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002484 <UART_SetConfig+0x114>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d103      	bne.n	80023e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023d8:	f7ff fdc4 	bl	8001f64 <HAL_RCC_GetPCLK2Freq>
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	e002      	b.n	80023e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023e0:	f7ff fdac 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 80023e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	009a      	lsls	r2, r3, #2
 80023f0:	441a      	add	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	4a22      	ldr	r2, [pc, #136]	@ (8002488 <UART_SetConfig+0x118>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	0119      	lsls	r1, r3, #4
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	009a      	lsls	r2, r3, #2
 8002410:	441a      	add	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	fbb2 f2f3 	udiv	r2, r2, r3
 800241c:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <UART_SetConfig+0x118>)
 800241e:	fba3 0302 	umull	r0, r3, r3, r2
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2064      	movs	r0, #100	@ 0x64
 8002426:	fb00 f303 	mul.w	r3, r0, r3
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	3332      	adds	r3, #50	@ 0x32
 8002430:	4a15      	ldr	r2, [pc, #84]	@ (8002488 <UART_SetConfig+0x118>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800243c:	4419      	add	r1, r3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	009a      	lsls	r2, r3, #2
 8002448:	441a      	add	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fbb2 f2f3 	udiv	r2, r2, r3
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <UART_SetConfig+0x118>)
 8002456:	fba3 0302 	umull	r0, r3, r3, r2
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2064      	movs	r0, #100	@ 0x64
 800245e:	fb00 f303 	mul.w	r3, r0, r3
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	3332      	adds	r3, #50	@ 0x32
 8002468:	4a07      	ldr	r2, [pc, #28]	@ (8002488 <UART_SetConfig+0x118>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	f003 020f 	and.w	r2, r3, #15
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	440a      	add	r2, r1
 800247a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40013800 	.word	0x40013800
 8002488:	51eb851f 	.word	0x51eb851f

0800248c <__cvt>:
 800248c:	2b00      	cmp	r3, #0
 800248e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002492:	461d      	mov	r5, r3
 8002494:	bfbb      	ittet	lt
 8002496:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800249a:	461d      	movlt	r5, r3
 800249c:	2300      	movge	r3, #0
 800249e:	232d      	movlt	r3, #45	@ 0x2d
 80024a0:	b088      	sub	sp, #32
 80024a2:	4614      	mov	r4, r2
 80024a4:	bfb8      	it	lt
 80024a6:	4614      	movlt	r4, r2
 80024a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80024aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80024ac:	7013      	strb	r3, [r2, #0]
 80024ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80024b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80024b4:	f023 0820 	bic.w	r8, r3, #32
 80024b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80024bc:	d005      	beq.n	80024ca <__cvt+0x3e>
 80024be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80024c2:	d100      	bne.n	80024c6 <__cvt+0x3a>
 80024c4:	3601      	adds	r6, #1
 80024c6:	2302      	movs	r3, #2
 80024c8:	e000      	b.n	80024cc <__cvt+0x40>
 80024ca:	2303      	movs	r3, #3
 80024cc:	aa07      	add	r2, sp, #28
 80024ce:	9204      	str	r2, [sp, #16]
 80024d0:	aa06      	add	r2, sp, #24
 80024d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80024d6:	e9cd 3600 	strd	r3, r6, [sp]
 80024da:	4622      	mov	r2, r4
 80024dc:	462b      	mov	r3, r5
 80024de:	f000 fdc3 	bl	8003068 <_dtoa_r>
 80024e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80024e6:	4607      	mov	r7, r0
 80024e8:	d119      	bne.n	800251e <__cvt+0x92>
 80024ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80024ec:	07db      	lsls	r3, r3, #31
 80024ee:	d50e      	bpl.n	800250e <__cvt+0x82>
 80024f0:	eb00 0906 	add.w	r9, r0, r6
 80024f4:	2200      	movs	r2, #0
 80024f6:	2300      	movs	r3, #0
 80024f8:	4620      	mov	r0, r4
 80024fa:	4629      	mov	r1, r5
 80024fc:	f7fe fa54 	bl	80009a8 <__aeabi_dcmpeq>
 8002500:	b108      	cbz	r0, 8002506 <__cvt+0x7a>
 8002502:	f8cd 901c 	str.w	r9, [sp, #28]
 8002506:	2230      	movs	r2, #48	@ 0x30
 8002508:	9b07      	ldr	r3, [sp, #28]
 800250a:	454b      	cmp	r3, r9
 800250c:	d31e      	bcc.n	800254c <__cvt+0xc0>
 800250e:	4638      	mov	r0, r7
 8002510:	9b07      	ldr	r3, [sp, #28]
 8002512:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002514:	1bdb      	subs	r3, r3, r7
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	b008      	add	sp, #32
 800251a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800251e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002522:	eb00 0906 	add.w	r9, r0, r6
 8002526:	d1e5      	bne.n	80024f4 <__cvt+0x68>
 8002528:	7803      	ldrb	r3, [r0, #0]
 800252a:	2b30      	cmp	r3, #48	@ 0x30
 800252c:	d10a      	bne.n	8002544 <__cvt+0xb8>
 800252e:	2200      	movs	r2, #0
 8002530:	2300      	movs	r3, #0
 8002532:	4620      	mov	r0, r4
 8002534:	4629      	mov	r1, r5
 8002536:	f7fe fa37 	bl	80009a8 <__aeabi_dcmpeq>
 800253a:	b918      	cbnz	r0, 8002544 <__cvt+0xb8>
 800253c:	f1c6 0601 	rsb	r6, r6, #1
 8002540:	f8ca 6000 	str.w	r6, [sl]
 8002544:	f8da 3000 	ldr.w	r3, [sl]
 8002548:	4499      	add	r9, r3
 800254a:	e7d3      	b.n	80024f4 <__cvt+0x68>
 800254c:	1c59      	adds	r1, r3, #1
 800254e:	9107      	str	r1, [sp, #28]
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e7d9      	b.n	8002508 <__cvt+0x7c>

08002554 <__exponent>:
 8002554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002556:	2900      	cmp	r1, #0
 8002558:	bfb6      	itet	lt
 800255a:	232d      	movlt	r3, #45	@ 0x2d
 800255c:	232b      	movge	r3, #43	@ 0x2b
 800255e:	4249      	neglt	r1, r1
 8002560:	2909      	cmp	r1, #9
 8002562:	7002      	strb	r2, [r0, #0]
 8002564:	7043      	strb	r3, [r0, #1]
 8002566:	dd29      	ble.n	80025bc <__exponent+0x68>
 8002568:	f10d 0307 	add.w	r3, sp, #7
 800256c:	461d      	mov	r5, r3
 800256e:	270a      	movs	r7, #10
 8002570:	fbb1 f6f7 	udiv	r6, r1, r7
 8002574:	461a      	mov	r2, r3
 8002576:	fb07 1416 	mls	r4, r7, r6, r1
 800257a:	3430      	adds	r4, #48	@ 0x30
 800257c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002580:	460c      	mov	r4, r1
 8002582:	2c63      	cmp	r4, #99	@ 0x63
 8002584:	4631      	mov	r1, r6
 8002586:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800258a:	dcf1      	bgt.n	8002570 <__exponent+0x1c>
 800258c:	3130      	adds	r1, #48	@ 0x30
 800258e:	1e94      	subs	r4, r2, #2
 8002590:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002594:	4623      	mov	r3, r4
 8002596:	1c41      	adds	r1, r0, #1
 8002598:	42ab      	cmp	r3, r5
 800259a:	d30a      	bcc.n	80025b2 <__exponent+0x5e>
 800259c:	f10d 0309 	add.w	r3, sp, #9
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	42ac      	cmp	r4, r5
 80025a4:	bf88      	it	hi
 80025a6:	2300      	movhi	r3, #0
 80025a8:	3302      	adds	r3, #2
 80025aa:	4403      	add	r3, r0
 80025ac:	1a18      	subs	r0, r3, r0
 80025ae:	b003      	add	sp, #12
 80025b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80025b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80025ba:	e7ed      	b.n	8002598 <__exponent+0x44>
 80025bc:	2330      	movs	r3, #48	@ 0x30
 80025be:	3130      	adds	r1, #48	@ 0x30
 80025c0:	7083      	strb	r3, [r0, #2]
 80025c2:	70c1      	strb	r1, [r0, #3]
 80025c4:	1d03      	adds	r3, r0, #4
 80025c6:	e7f1      	b.n	80025ac <__exponent+0x58>

080025c8 <_printf_float>:
 80025c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025cc:	b091      	sub	sp, #68	@ 0x44
 80025ce:	460c      	mov	r4, r1
 80025d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80025d4:	4616      	mov	r6, r2
 80025d6:	461f      	mov	r7, r3
 80025d8:	4605      	mov	r5, r0
 80025da:	f000 fc7d 	bl	8002ed8 <_localeconv_r>
 80025de:	6803      	ldr	r3, [r0, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	9308      	str	r3, [sp, #32]
 80025e4:	f7fd fdb4 	bl	8000150 <strlen>
 80025e8:	2300      	movs	r3, #0
 80025ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80025ec:	f8d8 3000 	ldr.w	r3, [r8]
 80025f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80025f2:	3307      	adds	r3, #7
 80025f4:	f023 0307 	bic.w	r3, r3, #7
 80025f8:	f103 0208 	add.w	r2, r3, #8
 80025fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002600:	f8d4 b000 	ldr.w	fp, [r4]
 8002604:	f8c8 2000 	str.w	r2, [r8]
 8002608:	e9d3 8900 	ldrd	r8, r9, [r3]
 800260c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002610:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002612:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002616:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800261a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800261e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002622:	4b9c      	ldr	r3, [pc, #624]	@ (8002894 <_printf_float+0x2cc>)
 8002624:	f7fe f9f2 	bl	8000a0c <__aeabi_dcmpun>
 8002628:	bb70      	cbnz	r0, 8002688 <_printf_float+0xc0>
 800262a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800262e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002632:	4b98      	ldr	r3, [pc, #608]	@ (8002894 <_printf_float+0x2cc>)
 8002634:	f7fe f9cc 	bl	80009d0 <__aeabi_dcmple>
 8002638:	bb30      	cbnz	r0, 8002688 <_printf_float+0xc0>
 800263a:	2200      	movs	r2, #0
 800263c:	2300      	movs	r3, #0
 800263e:	4640      	mov	r0, r8
 8002640:	4649      	mov	r1, r9
 8002642:	f7fe f9bb 	bl	80009bc <__aeabi_dcmplt>
 8002646:	b110      	cbz	r0, 800264e <_printf_float+0x86>
 8002648:	232d      	movs	r3, #45	@ 0x2d
 800264a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800264e:	4a92      	ldr	r2, [pc, #584]	@ (8002898 <_printf_float+0x2d0>)
 8002650:	4b92      	ldr	r3, [pc, #584]	@ (800289c <_printf_float+0x2d4>)
 8002652:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002656:	bf94      	ite	ls
 8002658:	4690      	movls	r8, r2
 800265a:	4698      	movhi	r8, r3
 800265c:	2303      	movs	r3, #3
 800265e:	f04f 0900 	mov.w	r9, #0
 8002662:	6123      	str	r3, [r4, #16]
 8002664:	f02b 0304 	bic.w	r3, fp, #4
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	4633      	mov	r3, r6
 800266c:	4621      	mov	r1, r4
 800266e:	4628      	mov	r0, r5
 8002670:	9700      	str	r7, [sp, #0]
 8002672:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002674:	f000 f9d4 	bl	8002a20 <_printf_common>
 8002678:	3001      	adds	r0, #1
 800267a:	f040 8090 	bne.w	800279e <_printf_float+0x1d6>
 800267e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002682:	b011      	add	sp, #68	@ 0x44
 8002684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002688:	4642      	mov	r2, r8
 800268a:	464b      	mov	r3, r9
 800268c:	4640      	mov	r0, r8
 800268e:	4649      	mov	r1, r9
 8002690:	f7fe f9bc 	bl	8000a0c <__aeabi_dcmpun>
 8002694:	b148      	cbz	r0, 80026aa <_printf_float+0xe2>
 8002696:	464b      	mov	r3, r9
 8002698:	2b00      	cmp	r3, #0
 800269a:	bfb8      	it	lt
 800269c:	232d      	movlt	r3, #45	@ 0x2d
 800269e:	4a80      	ldr	r2, [pc, #512]	@ (80028a0 <_printf_float+0x2d8>)
 80026a0:	bfb8      	it	lt
 80026a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80026a6:	4b7f      	ldr	r3, [pc, #508]	@ (80028a4 <_printf_float+0x2dc>)
 80026a8:	e7d3      	b.n	8002652 <_printf_float+0x8a>
 80026aa:	6863      	ldr	r3, [r4, #4]
 80026ac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	d13f      	bne.n	8002734 <_printf_float+0x16c>
 80026b4:	2306      	movs	r3, #6
 80026b6:	6063      	str	r3, [r4, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80026be:	6023      	str	r3, [r4, #0]
 80026c0:	9206      	str	r2, [sp, #24]
 80026c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80026c4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80026c8:	aa0d      	add	r2, sp, #52	@ 0x34
 80026ca:	9203      	str	r2, [sp, #12]
 80026cc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80026d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80026d4:	6863      	ldr	r3, [r4, #4]
 80026d6:	4642      	mov	r2, r8
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	4628      	mov	r0, r5
 80026dc:	464b      	mov	r3, r9
 80026de:	910a      	str	r1, [sp, #40]	@ 0x28
 80026e0:	f7ff fed4 	bl	800248c <__cvt>
 80026e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80026e6:	4680      	mov	r8, r0
 80026e8:	2947      	cmp	r1, #71	@ 0x47
 80026ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80026ec:	d128      	bne.n	8002740 <_printf_float+0x178>
 80026ee:	1cc8      	adds	r0, r1, #3
 80026f0:	db02      	blt.n	80026f8 <_printf_float+0x130>
 80026f2:	6863      	ldr	r3, [r4, #4]
 80026f4:	4299      	cmp	r1, r3
 80026f6:	dd40      	ble.n	800277a <_printf_float+0x1b2>
 80026f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80026fc:	fa5f fa8a 	uxtb.w	sl, sl
 8002700:	4652      	mov	r2, sl
 8002702:	3901      	subs	r1, #1
 8002704:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002708:	910d      	str	r1, [sp, #52]	@ 0x34
 800270a:	f7ff ff23 	bl	8002554 <__exponent>
 800270e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002710:	4681      	mov	r9, r0
 8002712:	1813      	adds	r3, r2, r0
 8002714:	2a01      	cmp	r2, #1
 8002716:	6123      	str	r3, [r4, #16]
 8002718:	dc02      	bgt.n	8002720 <_printf_float+0x158>
 800271a:	6822      	ldr	r2, [r4, #0]
 800271c:	07d2      	lsls	r2, r2, #31
 800271e:	d501      	bpl.n	8002724 <_printf_float+0x15c>
 8002720:	3301      	adds	r3, #1
 8002722:	6123      	str	r3, [r4, #16]
 8002724:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002728:	2b00      	cmp	r3, #0
 800272a:	d09e      	beq.n	800266a <_printf_float+0xa2>
 800272c:	232d      	movs	r3, #45	@ 0x2d
 800272e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002732:	e79a      	b.n	800266a <_printf_float+0xa2>
 8002734:	2947      	cmp	r1, #71	@ 0x47
 8002736:	d1bf      	bne.n	80026b8 <_printf_float+0xf0>
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1bd      	bne.n	80026b8 <_printf_float+0xf0>
 800273c:	2301      	movs	r3, #1
 800273e:	e7ba      	b.n	80026b6 <_printf_float+0xee>
 8002740:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002744:	d9dc      	bls.n	8002700 <_printf_float+0x138>
 8002746:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800274a:	d118      	bne.n	800277e <_printf_float+0x1b6>
 800274c:	2900      	cmp	r1, #0
 800274e:	6863      	ldr	r3, [r4, #4]
 8002750:	dd0b      	ble.n	800276a <_printf_float+0x1a2>
 8002752:	6121      	str	r1, [r4, #16]
 8002754:	b913      	cbnz	r3, 800275c <_printf_float+0x194>
 8002756:	6822      	ldr	r2, [r4, #0]
 8002758:	07d0      	lsls	r0, r2, #31
 800275a:	d502      	bpl.n	8002762 <_printf_float+0x19a>
 800275c:	3301      	adds	r3, #1
 800275e:	440b      	add	r3, r1
 8002760:	6123      	str	r3, [r4, #16]
 8002762:	f04f 0900 	mov.w	r9, #0
 8002766:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002768:	e7dc      	b.n	8002724 <_printf_float+0x15c>
 800276a:	b913      	cbnz	r3, 8002772 <_printf_float+0x1aa>
 800276c:	6822      	ldr	r2, [r4, #0]
 800276e:	07d2      	lsls	r2, r2, #31
 8002770:	d501      	bpl.n	8002776 <_printf_float+0x1ae>
 8002772:	3302      	adds	r3, #2
 8002774:	e7f4      	b.n	8002760 <_printf_float+0x198>
 8002776:	2301      	movs	r3, #1
 8002778:	e7f2      	b.n	8002760 <_printf_float+0x198>
 800277a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800277e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002780:	4299      	cmp	r1, r3
 8002782:	db05      	blt.n	8002790 <_printf_float+0x1c8>
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	6121      	str	r1, [r4, #16]
 8002788:	07d8      	lsls	r0, r3, #31
 800278a:	d5ea      	bpl.n	8002762 <_printf_float+0x19a>
 800278c:	1c4b      	adds	r3, r1, #1
 800278e:	e7e7      	b.n	8002760 <_printf_float+0x198>
 8002790:	2900      	cmp	r1, #0
 8002792:	bfcc      	ite	gt
 8002794:	2201      	movgt	r2, #1
 8002796:	f1c1 0202 	rsble	r2, r1, #2
 800279a:	4413      	add	r3, r2
 800279c:	e7e0      	b.n	8002760 <_printf_float+0x198>
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	055a      	lsls	r2, r3, #21
 80027a2:	d407      	bmi.n	80027b4 <_printf_float+0x1ec>
 80027a4:	6923      	ldr	r3, [r4, #16]
 80027a6:	4642      	mov	r2, r8
 80027a8:	4631      	mov	r1, r6
 80027aa:	4628      	mov	r0, r5
 80027ac:	47b8      	blx	r7
 80027ae:	3001      	adds	r0, #1
 80027b0:	d12b      	bne.n	800280a <_printf_float+0x242>
 80027b2:	e764      	b.n	800267e <_printf_float+0xb6>
 80027b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80027b8:	f240 80dc 	bls.w	8002974 <_printf_float+0x3ac>
 80027bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80027c0:	2200      	movs	r2, #0
 80027c2:	2300      	movs	r3, #0
 80027c4:	f7fe f8f0 	bl	80009a8 <__aeabi_dcmpeq>
 80027c8:	2800      	cmp	r0, #0
 80027ca:	d033      	beq.n	8002834 <_printf_float+0x26c>
 80027cc:	2301      	movs	r3, #1
 80027ce:	4631      	mov	r1, r6
 80027d0:	4628      	mov	r0, r5
 80027d2:	4a35      	ldr	r2, [pc, #212]	@ (80028a8 <_printf_float+0x2e0>)
 80027d4:	47b8      	blx	r7
 80027d6:	3001      	adds	r0, #1
 80027d8:	f43f af51 	beq.w	800267e <_printf_float+0xb6>
 80027dc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80027e0:	4543      	cmp	r3, r8
 80027e2:	db02      	blt.n	80027ea <_printf_float+0x222>
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	07d8      	lsls	r0, r3, #31
 80027e8:	d50f      	bpl.n	800280a <_printf_float+0x242>
 80027ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80027ee:	4631      	mov	r1, r6
 80027f0:	4628      	mov	r0, r5
 80027f2:	47b8      	blx	r7
 80027f4:	3001      	adds	r0, #1
 80027f6:	f43f af42 	beq.w	800267e <_printf_float+0xb6>
 80027fa:	f04f 0900 	mov.w	r9, #0
 80027fe:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8002802:	f104 0a1a 	add.w	sl, r4, #26
 8002806:	45c8      	cmp	r8, r9
 8002808:	dc09      	bgt.n	800281e <_printf_float+0x256>
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	079b      	lsls	r3, r3, #30
 800280e:	f100 8102 	bmi.w	8002a16 <_printf_float+0x44e>
 8002812:	68e0      	ldr	r0, [r4, #12]
 8002814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002816:	4298      	cmp	r0, r3
 8002818:	bfb8      	it	lt
 800281a:	4618      	movlt	r0, r3
 800281c:	e731      	b.n	8002682 <_printf_float+0xba>
 800281e:	2301      	movs	r3, #1
 8002820:	4652      	mov	r2, sl
 8002822:	4631      	mov	r1, r6
 8002824:	4628      	mov	r0, r5
 8002826:	47b8      	blx	r7
 8002828:	3001      	adds	r0, #1
 800282a:	f43f af28 	beq.w	800267e <_printf_float+0xb6>
 800282e:	f109 0901 	add.w	r9, r9, #1
 8002832:	e7e8      	b.n	8002806 <_printf_float+0x23e>
 8002834:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002836:	2b00      	cmp	r3, #0
 8002838:	dc38      	bgt.n	80028ac <_printf_float+0x2e4>
 800283a:	2301      	movs	r3, #1
 800283c:	4631      	mov	r1, r6
 800283e:	4628      	mov	r0, r5
 8002840:	4a19      	ldr	r2, [pc, #100]	@ (80028a8 <_printf_float+0x2e0>)
 8002842:	47b8      	blx	r7
 8002844:	3001      	adds	r0, #1
 8002846:	f43f af1a 	beq.w	800267e <_printf_float+0xb6>
 800284a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800284e:	ea59 0303 	orrs.w	r3, r9, r3
 8002852:	d102      	bne.n	800285a <_printf_float+0x292>
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	07d9      	lsls	r1, r3, #31
 8002858:	d5d7      	bpl.n	800280a <_printf_float+0x242>
 800285a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800285e:	4631      	mov	r1, r6
 8002860:	4628      	mov	r0, r5
 8002862:	47b8      	blx	r7
 8002864:	3001      	adds	r0, #1
 8002866:	f43f af0a 	beq.w	800267e <_printf_float+0xb6>
 800286a:	f04f 0a00 	mov.w	sl, #0
 800286e:	f104 0b1a 	add.w	fp, r4, #26
 8002872:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002874:	425b      	negs	r3, r3
 8002876:	4553      	cmp	r3, sl
 8002878:	dc01      	bgt.n	800287e <_printf_float+0x2b6>
 800287a:	464b      	mov	r3, r9
 800287c:	e793      	b.n	80027a6 <_printf_float+0x1de>
 800287e:	2301      	movs	r3, #1
 8002880:	465a      	mov	r2, fp
 8002882:	4631      	mov	r1, r6
 8002884:	4628      	mov	r0, r5
 8002886:	47b8      	blx	r7
 8002888:	3001      	adds	r0, #1
 800288a:	f43f aef8 	beq.w	800267e <_printf_float+0xb6>
 800288e:	f10a 0a01 	add.w	sl, sl, #1
 8002892:	e7ee      	b.n	8002872 <_printf_float+0x2aa>
 8002894:	7fefffff 	.word	0x7fefffff
 8002898:	08004de2 	.word	0x08004de2
 800289c:	08004de6 	.word	0x08004de6
 80028a0:	08004dea 	.word	0x08004dea
 80028a4:	08004dee 	.word	0x08004dee
 80028a8:	08004df2 	.word	0x08004df2
 80028ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80028ae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80028b2:	4553      	cmp	r3, sl
 80028b4:	bfa8      	it	ge
 80028b6:	4653      	movge	r3, sl
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	4699      	mov	r9, r3
 80028bc:	dc36      	bgt.n	800292c <_printf_float+0x364>
 80028be:	f04f 0b00 	mov.w	fp, #0
 80028c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80028c6:	f104 021a 	add.w	r2, r4, #26
 80028ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80028cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80028ce:	eba3 0309 	sub.w	r3, r3, r9
 80028d2:	455b      	cmp	r3, fp
 80028d4:	dc31      	bgt.n	800293a <_printf_float+0x372>
 80028d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80028d8:	459a      	cmp	sl, r3
 80028da:	dc3a      	bgt.n	8002952 <_printf_float+0x38a>
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	07da      	lsls	r2, r3, #31
 80028e0:	d437      	bmi.n	8002952 <_printf_float+0x38a>
 80028e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80028e4:	ebaa 0903 	sub.w	r9, sl, r3
 80028e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80028ea:	ebaa 0303 	sub.w	r3, sl, r3
 80028ee:	4599      	cmp	r9, r3
 80028f0:	bfa8      	it	ge
 80028f2:	4699      	movge	r9, r3
 80028f4:	f1b9 0f00 	cmp.w	r9, #0
 80028f8:	dc33      	bgt.n	8002962 <_printf_float+0x39a>
 80028fa:	f04f 0800 	mov.w	r8, #0
 80028fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002902:	f104 0b1a 	add.w	fp, r4, #26
 8002906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002908:	ebaa 0303 	sub.w	r3, sl, r3
 800290c:	eba3 0309 	sub.w	r3, r3, r9
 8002910:	4543      	cmp	r3, r8
 8002912:	f77f af7a 	ble.w	800280a <_printf_float+0x242>
 8002916:	2301      	movs	r3, #1
 8002918:	465a      	mov	r2, fp
 800291a:	4631      	mov	r1, r6
 800291c:	4628      	mov	r0, r5
 800291e:	47b8      	blx	r7
 8002920:	3001      	adds	r0, #1
 8002922:	f43f aeac 	beq.w	800267e <_printf_float+0xb6>
 8002926:	f108 0801 	add.w	r8, r8, #1
 800292a:	e7ec      	b.n	8002906 <_printf_float+0x33e>
 800292c:	4642      	mov	r2, r8
 800292e:	4631      	mov	r1, r6
 8002930:	4628      	mov	r0, r5
 8002932:	47b8      	blx	r7
 8002934:	3001      	adds	r0, #1
 8002936:	d1c2      	bne.n	80028be <_printf_float+0x2f6>
 8002938:	e6a1      	b.n	800267e <_printf_float+0xb6>
 800293a:	2301      	movs	r3, #1
 800293c:	4631      	mov	r1, r6
 800293e:	4628      	mov	r0, r5
 8002940:	920a      	str	r2, [sp, #40]	@ 0x28
 8002942:	47b8      	blx	r7
 8002944:	3001      	adds	r0, #1
 8002946:	f43f ae9a 	beq.w	800267e <_printf_float+0xb6>
 800294a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800294c:	f10b 0b01 	add.w	fp, fp, #1
 8002950:	e7bb      	b.n	80028ca <_printf_float+0x302>
 8002952:	4631      	mov	r1, r6
 8002954:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002958:	4628      	mov	r0, r5
 800295a:	47b8      	blx	r7
 800295c:	3001      	adds	r0, #1
 800295e:	d1c0      	bne.n	80028e2 <_printf_float+0x31a>
 8002960:	e68d      	b.n	800267e <_printf_float+0xb6>
 8002962:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002964:	464b      	mov	r3, r9
 8002966:	4631      	mov	r1, r6
 8002968:	4628      	mov	r0, r5
 800296a:	4442      	add	r2, r8
 800296c:	47b8      	blx	r7
 800296e:	3001      	adds	r0, #1
 8002970:	d1c3      	bne.n	80028fa <_printf_float+0x332>
 8002972:	e684      	b.n	800267e <_printf_float+0xb6>
 8002974:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002978:	f1ba 0f01 	cmp.w	sl, #1
 800297c:	dc01      	bgt.n	8002982 <_printf_float+0x3ba>
 800297e:	07db      	lsls	r3, r3, #31
 8002980:	d536      	bpl.n	80029f0 <_printf_float+0x428>
 8002982:	2301      	movs	r3, #1
 8002984:	4642      	mov	r2, r8
 8002986:	4631      	mov	r1, r6
 8002988:	4628      	mov	r0, r5
 800298a:	47b8      	blx	r7
 800298c:	3001      	adds	r0, #1
 800298e:	f43f ae76 	beq.w	800267e <_printf_float+0xb6>
 8002992:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002996:	4631      	mov	r1, r6
 8002998:	4628      	mov	r0, r5
 800299a:	47b8      	blx	r7
 800299c:	3001      	adds	r0, #1
 800299e:	f43f ae6e 	beq.w	800267e <_printf_float+0xb6>
 80029a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80029a6:	2200      	movs	r2, #0
 80029a8:	2300      	movs	r3, #0
 80029aa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80029ae:	f7fd fffb 	bl	80009a8 <__aeabi_dcmpeq>
 80029b2:	b9c0      	cbnz	r0, 80029e6 <_printf_float+0x41e>
 80029b4:	4653      	mov	r3, sl
 80029b6:	f108 0201 	add.w	r2, r8, #1
 80029ba:	4631      	mov	r1, r6
 80029bc:	4628      	mov	r0, r5
 80029be:	47b8      	blx	r7
 80029c0:	3001      	adds	r0, #1
 80029c2:	d10c      	bne.n	80029de <_printf_float+0x416>
 80029c4:	e65b      	b.n	800267e <_printf_float+0xb6>
 80029c6:	2301      	movs	r3, #1
 80029c8:	465a      	mov	r2, fp
 80029ca:	4631      	mov	r1, r6
 80029cc:	4628      	mov	r0, r5
 80029ce:	47b8      	blx	r7
 80029d0:	3001      	adds	r0, #1
 80029d2:	f43f ae54 	beq.w	800267e <_printf_float+0xb6>
 80029d6:	f108 0801 	add.w	r8, r8, #1
 80029da:	45d0      	cmp	r8, sl
 80029dc:	dbf3      	blt.n	80029c6 <_printf_float+0x3fe>
 80029de:	464b      	mov	r3, r9
 80029e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80029e4:	e6e0      	b.n	80027a8 <_printf_float+0x1e0>
 80029e6:	f04f 0800 	mov.w	r8, #0
 80029ea:	f104 0b1a 	add.w	fp, r4, #26
 80029ee:	e7f4      	b.n	80029da <_printf_float+0x412>
 80029f0:	2301      	movs	r3, #1
 80029f2:	4642      	mov	r2, r8
 80029f4:	e7e1      	b.n	80029ba <_printf_float+0x3f2>
 80029f6:	2301      	movs	r3, #1
 80029f8:	464a      	mov	r2, r9
 80029fa:	4631      	mov	r1, r6
 80029fc:	4628      	mov	r0, r5
 80029fe:	47b8      	blx	r7
 8002a00:	3001      	adds	r0, #1
 8002a02:	f43f ae3c 	beq.w	800267e <_printf_float+0xb6>
 8002a06:	f108 0801 	add.w	r8, r8, #1
 8002a0a:	68e3      	ldr	r3, [r4, #12]
 8002a0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8002a0e:	1a5b      	subs	r3, r3, r1
 8002a10:	4543      	cmp	r3, r8
 8002a12:	dcf0      	bgt.n	80029f6 <_printf_float+0x42e>
 8002a14:	e6fd      	b.n	8002812 <_printf_float+0x24a>
 8002a16:	f04f 0800 	mov.w	r8, #0
 8002a1a:	f104 0919 	add.w	r9, r4, #25
 8002a1e:	e7f4      	b.n	8002a0a <_printf_float+0x442>

08002a20 <_printf_common>:
 8002a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a24:	4616      	mov	r6, r2
 8002a26:	4698      	mov	r8, r3
 8002a28:	688a      	ldr	r2, [r1, #8]
 8002a2a:	690b      	ldr	r3, [r1, #16]
 8002a2c:	4607      	mov	r7, r0
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	bfb8      	it	lt
 8002a32:	4613      	movlt	r3, r2
 8002a34:	6033      	str	r3, [r6, #0]
 8002a36:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a40:	b10a      	cbz	r2, 8002a46 <_printf_common+0x26>
 8002a42:	3301      	adds	r3, #1
 8002a44:	6033      	str	r3, [r6, #0]
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	0699      	lsls	r1, r3, #26
 8002a4a:	bf42      	ittt	mi
 8002a4c:	6833      	ldrmi	r3, [r6, #0]
 8002a4e:	3302      	addmi	r3, #2
 8002a50:	6033      	strmi	r3, [r6, #0]
 8002a52:	6825      	ldr	r5, [r4, #0]
 8002a54:	f015 0506 	ands.w	r5, r5, #6
 8002a58:	d106      	bne.n	8002a68 <_printf_common+0x48>
 8002a5a:	f104 0a19 	add.w	sl, r4, #25
 8002a5e:	68e3      	ldr	r3, [r4, #12]
 8002a60:	6832      	ldr	r2, [r6, #0]
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	42ab      	cmp	r3, r5
 8002a66:	dc2b      	bgt.n	8002ac0 <_printf_common+0xa0>
 8002a68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a6c:	6822      	ldr	r2, [r4, #0]
 8002a6e:	3b00      	subs	r3, #0
 8002a70:	bf18      	it	ne
 8002a72:	2301      	movne	r3, #1
 8002a74:	0692      	lsls	r2, r2, #26
 8002a76:	d430      	bmi.n	8002ada <_printf_common+0xba>
 8002a78:	4641      	mov	r1, r8
 8002a7a:	4638      	mov	r0, r7
 8002a7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a80:	47c8      	blx	r9
 8002a82:	3001      	adds	r0, #1
 8002a84:	d023      	beq.n	8002ace <_printf_common+0xae>
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	6922      	ldr	r2, [r4, #16]
 8002a8a:	f003 0306 	and.w	r3, r3, #6
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf14      	ite	ne
 8002a92:	2500      	movne	r5, #0
 8002a94:	6833      	ldreq	r3, [r6, #0]
 8002a96:	f04f 0600 	mov.w	r6, #0
 8002a9a:	bf08      	it	eq
 8002a9c:	68e5      	ldreq	r5, [r4, #12]
 8002a9e:	f104 041a 	add.w	r4, r4, #26
 8002aa2:	bf08      	it	eq
 8002aa4:	1aed      	subeq	r5, r5, r3
 8002aa6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002aaa:	bf08      	it	eq
 8002aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	bfc4      	itt	gt
 8002ab4:	1a9b      	subgt	r3, r3, r2
 8002ab6:	18ed      	addgt	r5, r5, r3
 8002ab8:	42b5      	cmp	r5, r6
 8002aba:	d11a      	bne.n	8002af2 <_printf_common+0xd2>
 8002abc:	2000      	movs	r0, #0
 8002abe:	e008      	b.n	8002ad2 <_printf_common+0xb2>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	4652      	mov	r2, sl
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	4638      	mov	r0, r7
 8002ac8:	47c8      	blx	r9
 8002aca:	3001      	adds	r0, #1
 8002acc:	d103      	bne.n	8002ad6 <_printf_common+0xb6>
 8002ace:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad6:	3501      	adds	r5, #1
 8002ad8:	e7c1      	b.n	8002a5e <_printf_common+0x3e>
 8002ada:	2030      	movs	r0, #48	@ 0x30
 8002adc:	18e1      	adds	r1, r4, r3
 8002ade:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ae8:	4422      	add	r2, r4
 8002aea:	3302      	adds	r3, #2
 8002aec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002af0:	e7c2      	b.n	8002a78 <_printf_common+0x58>
 8002af2:	2301      	movs	r3, #1
 8002af4:	4622      	mov	r2, r4
 8002af6:	4641      	mov	r1, r8
 8002af8:	4638      	mov	r0, r7
 8002afa:	47c8      	blx	r9
 8002afc:	3001      	adds	r0, #1
 8002afe:	d0e6      	beq.n	8002ace <_printf_common+0xae>
 8002b00:	3601      	adds	r6, #1
 8002b02:	e7d9      	b.n	8002ab8 <_printf_common+0x98>

08002b04 <_printf_i>:
 8002b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b08:	7e0f      	ldrb	r7, [r1, #24]
 8002b0a:	4691      	mov	r9, r2
 8002b0c:	2f78      	cmp	r7, #120	@ 0x78
 8002b0e:	4680      	mov	r8, r0
 8002b10:	460c      	mov	r4, r1
 8002b12:	469a      	mov	sl, r3
 8002b14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b1a:	d807      	bhi.n	8002b2c <_printf_i+0x28>
 8002b1c:	2f62      	cmp	r7, #98	@ 0x62
 8002b1e:	d80a      	bhi.n	8002b36 <_printf_i+0x32>
 8002b20:	2f00      	cmp	r7, #0
 8002b22:	f000 80d3 	beq.w	8002ccc <_printf_i+0x1c8>
 8002b26:	2f58      	cmp	r7, #88	@ 0x58
 8002b28:	f000 80ba 	beq.w	8002ca0 <_printf_i+0x19c>
 8002b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b34:	e03a      	b.n	8002bac <_printf_i+0xa8>
 8002b36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b3a:	2b15      	cmp	r3, #21
 8002b3c:	d8f6      	bhi.n	8002b2c <_printf_i+0x28>
 8002b3e:	a101      	add	r1, pc, #4	@ (adr r1, 8002b44 <_printf_i+0x40>)
 8002b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b44:	08002b9d 	.word	0x08002b9d
 8002b48:	08002bb1 	.word	0x08002bb1
 8002b4c:	08002b2d 	.word	0x08002b2d
 8002b50:	08002b2d 	.word	0x08002b2d
 8002b54:	08002b2d 	.word	0x08002b2d
 8002b58:	08002b2d 	.word	0x08002b2d
 8002b5c:	08002bb1 	.word	0x08002bb1
 8002b60:	08002b2d 	.word	0x08002b2d
 8002b64:	08002b2d 	.word	0x08002b2d
 8002b68:	08002b2d 	.word	0x08002b2d
 8002b6c:	08002b2d 	.word	0x08002b2d
 8002b70:	08002cb3 	.word	0x08002cb3
 8002b74:	08002bdb 	.word	0x08002bdb
 8002b78:	08002c6d 	.word	0x08002c6d
 8002b7c:	08002b2d 	.word	0x08002b2d
 8002b80:	08002b2d 	.word	0x08002b2d
 8002b84:	08002cd5 	.word	0x08002cd5
 8002b88:	08002b2d 	.word	0x08002b2d
 8002b8c:	08002bdb 	.word	0x08002bdb
 8002b90:	08002b2d 	.word	0x08002b2d
 8002b94:	08002b2d 	.word	0x08002b2d
 8002b98:	08002c75 	.word	0x08002c75
 8002b9c:	6833      	ldr	r3, [r6, #0]
 8002b9e:	1d1a      	adds	r2, r3, #4
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6032      	str	r2, [r6, #0]
 8002ba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ba8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002bac:	2301      	movs	r3, #1
 8002bae:	e09e      	b.n	8002cee <_printf_i+0x1ea>
 8002bb0:	6833      	ldr	r3, [r6, #0]
 8002bb2:	6820      	ldr	r0, [r4, #0]
 8002bb4:	1d19      	adds	r1, r3, #4
 8002bb6:	6031      	str	r1, [r6, #0]
 8002bb8:	0606      	lsls	r6, r0, #24
 8002bba:	d501      	bpl.n	8002bc0 <_printf_i+0xbc>
 8002bbc:	681d      	ldr	r5, [r3, #0]
 8002bbe:	e003      	b.n	8002bc8 <_printf_i+0xc4>
 8002bc0:	0645      	lsls	r5, r0, #25
 8002bc2:	d5fb      	bpl.n	8002bbc <_printf_i+0xb8>
 8002bc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002bc8:	2d00      	cmp	r5, #0
 8002bca:	da03      	bge.n	8002bd4 <_printf_i+0xd0>
 8002bcc:	232d      	movs	r3, #45	@ 0x2d
 8002bce:	426d      	negs	r5, r5
 8002bd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bd4:	230a      	movs	r3, #10
 8002bd6:	4859      	ldr	r0, [pc, #356]	@ (8002d3c <_printf_i+0x238>)
 8002bd8:	e011      	b.n	8002bfe <_printf_i+0xfa>
 8002bda:	6821      	ldr	r1, [r4, #0]
 8002bdc:	6833      	ldr	r3, [r6, #0]
 8002bde:	0608      	lsls	r0, r1, #24
 8002be0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002be4:	d402      	bmi.n	8002bec <_printf_i+0xe8>
 8002be6:	0649      	lsls	r1, r1, #25
 8002be8:	bf48      	it	mi
 8002bea:	b2ad      	uxthmi	r5, r5
 8002bec:	2f6f      	cmp	r7, #111	@ 0x6f
 8002bee:	6033      	str	r3, [r6, #0]
 8002bf0:	bf14      	ite	ne
 8002bf2:	230a      	movne	r3, #10
 8002bf4:	2308      	moveq	r3, #8
 8002bf6:	4851      	ldr	r0, [pc, #324]	@ (8002d3c <_printf_i+0x238>)
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002bfe:	6866      	ldr	r6, [r4, #4]
 8002c00:	2e00      	cmp	r6, #0
 8002c02:	bfa8      	it	ge
 8002c04:	6821      	ldrge	r1, [r4, #0]
 8002c06:	60a6      	str	r6, [r4, #8]
 8002c08:	bfa4      	itt	ge
 8002c0a:	f021 0104 	bicge.w	r1, r1, #4
 8002c0e:	6021      	strge	r1, [r4, #0]
 8002c10:	b90d      	cbnz	r5, 8002c16 <_printf_i+0x112>
 8002c12:	2e00      	cmp	r6, #0
 8002c14:	d04b      	beq.n	8002cae <_printf_i+0x1aa>
 8002c16:	4616      	mov	r6, r2
 8002c18:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c1c:	fb03 5711 	mls	r7, r3, r1, r5
 8002c20:	5dc7      	ldrb	r7, [r0, r7]
 8002c22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c26:	462f      	mov	r7, r5
 8002c28:	42bb      	cmp	r3, r7
 8002c2a:	460d      	mov	r5, r1
 8002c2c:	d9f4      	bls.n	8002c18 <_printf_i+0x114>
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d10b      	bne.n	8002c4a <_printf_i+0x146>
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	07df      	lsls	r7, r3, #31
 8002c36:	d508      	bpl.n	8002c4a <_printf_i+0x146>
 8002c38:	6923      	ldr	r3, [r4, #16]
 8002c3a:	6861      	ldr	r1, [r4, #4]
 8002c3c:	4299      	cmp	r1, r3
 8002c3e:	bfde      	ittt	le
 8002c40:	2330      	movle	r3, #48	@ 0x30
 8002c42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c46:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002c4a:	1b92      	subs	r2, r2, r6
 8002c4c:	6122      	str	r2, [r4, #16]
 8002c4e:	464b      	mov	r3, r9
 8002c50:	4621      	mov	r1, r4
 8002c52:	4640      	mov	r0, r8
 8002c54:	f8cd a000 	str.w	sl, [sp]
 8002c58:	aa03      	add	r2, sp, #12
 8002c5a:	f7ff fee1 	bl	8002a20 <_printf_common>
 8002c5e:	3001      	adds	r0, #1
 8002c60:	d14a      	bne.n	8002cf8 <_printf_i+0x1f4>
 8002c62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c66:	b004      	add	sp, #16
 8002c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	f043 0320 	orr.w	r3, r3, #32
 8002c72:	6023      	str	r3, [r4, #0]
 8002c74:	2778      	movs	r7, #120	@ 0x78
 8002c76:	4832      	ldr	r0, [pc, #200]	@ (8002d40 <_printf_i+0x23c>)
 8002c78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	6831      	ldr	r1, [r6, #0]
 8002c80:	061f      	lsls	r7, r3, #24
 8002c82:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c86:	d402      	bmi.n	8002c8e <_printf_i+0x18a>
 8002c88:	065f      	lsls	r7, r3, #25
 8002c8a:	bf48      	it	mi
 8002c8c:	b2ad      	uxthmi	r5, r5
 8002c8e:	6031      	str	r1, [r6, #0]
 8002c90:	07d9      	lsls	r1, r3, #31
 8002c92:	bf44      	itt	mi
 8002c94:	f043 0320 	orrmi.w	r3, r3, #32
 8002c98:	6023      	strmi	r3, [r4, #0]
 8002c9a:	b11d      	cbz	r5, 8002ca4 <_printf_i+0x1a0>
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	e7ab      	b.n	8002bf8 <_printf_i+0xf4>
 8002ca0:	4826      	ldr	r0, [pc, #152]	@ (8002d3c <_printf_i+0x238>)
 8002ca2:	e7e9      	b.n	8002c78 <_printf_i+0x174>
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	f023 0320 	bic.w	r3, r3, #32
 8002caa:	6023      	str	r3, [r4, #0]
 8002cac:	e7f6      	b.n	8002c9c <_printf_i+0x198>
 8002cae:	4616      	mov	r6, r2
 8002cb0:	e7bd      	b.n	8002c2e <_printf_i+0x12a>
 8002cb2:	6833      	ldr	r3, [r6, #0]
 8002cb4:	6825      	ldr	r5, [r4, #0]
 8002cb6:	1d18      	adds	r0, r3, #4
 8002cb8:	6961      	ldr	r1, [r4, #20]
 8002cba:	6030      	str	r0, [r6, #0]
 8002cbc:	062e      	lsls	r6, r5, #24
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	d501      	bpl.n	8002cc6 <_printf_i+0x1c2>
 8002cc2:	6019      	str	r1, [r3, #0]
 8002cc4:	e002      	b.n	8002ccc <_printf_i+0x1c8>
 8002cc6:	0668      	lsls	r0, r5, #25
 8002cc8:	d5fb      	bpl.n	8002cc2 <_printf_i+0x1be>
 8002cca:	8019      	strh	r1, [r3, #0]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	4616      	mov	r6, r2
 8002cd0:	6123      	str	r3, [r4, #16]
 8002cd2:	e7bc      	b.n	8002c4e <_printf_i+0x14a>
 8002cd4:	6833      	ldr	r3, [r6, #0]
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	1d1a      	adds	r2, r3, #4
 8002cda:	6032      	str	r2, [r6, #0]
 8002cdc:	681e      	ldr	r6, [r3, #0]
 8002cde:	6862      	ldr	r2, [r4, #4]
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f000 f92a 	bl	8002f3a <memchr>
 8002ce6:	b108      	cbz	r0, 8002cec <_printf_i+0x1e8>
 8002ce8:	1b80      	subs	r0, r0, r6
 8002cea:	6060      	str	r0, [r4, #4]
 8002cec:	6863      	ldr	r3, [r4, #4]
 8002cee:	6123      	str	r3, [r4, #16]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cf6:	e7aa      	b.n	8002c4e <_printf_i+0x14a>
 8002cf8:	4632      	mov	r2, r6
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	4640      	mov	r0, r8
 8002cfe:	6923      	ldr	r3, [r4, #16]
 8002d00:	47d0      	blx	sl
 8002d02:	3001      	adds	r0, #1
 8002d04:	d0ad      	beq.n	8002c62 <_printf_i+0x15e>
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	079b      	lsls	r3, r3, #30
 8002d0a:	d413      	bmi.n	8002d34 <_printf_i+0x230>
 8002d0c:	68e0      	ldr	r0, [r4, #12]
 8002d0e:	9b03      	ldr	r3, [sp, #12]
 8002d10:	4298      	cmp	r0, r3
 8002d12:	bfb8      	it	lt
 8002d14:	4618      	movlt	r0, r3
 8002d16:	e7a6      	b.n	8002c66 <_printf_i+0x162>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	4632      	mov	r2, r6
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	4640      	mov	r0, r8
 8002d20:	47d0      	blx	sl
 8002d22:	3001      	adds	r0, #1
 8002d24:	d09d      	beq.n	8002c62 <_printf_i+0x15e>
 8002d26:	3501      	adds	r5, #1
 8002d28:	68e3      	ldr	r3, [r4, #12]
 8002d2a:	9903      	ldr	r1, [sp, #12]
 8002d2c:	1a5b      	subs	r3, r3, r1
 8002d2e:	42ab      	cmp	r3, r5
 8002d30:	dcf2      	bgt.n	8002d18 <_printf_i+0x214>
 8002d32:	e7eb      	b.n	8002d0c <_printf_i+0x208>
 8002d34:	2500      	movs	r5, #0
 8002d36:	f104 0619 	add.w	r6, r4, #25
 8002d3a:	e7f5      	b.n	8002d28 <_printf_i+0x224>
 8002d3c:	08004df4 	.word	0x08004df4
 8002d40:	08004e05 	.word	0x08004e05

08002d44 <std>:
 8002d44:	2300      	movs	r3, #0
 8002d46:	b510      	push	{r4, lr}
 8002d48:	4604      	mov	r4, r0
 8002d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d52:	6083      	str	r3, [r0, #8]
 8002d54:	8181      	strh	r1, [r0, #12]
 8002d56:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d58:	81c2      	strh	r2, [r0, #14]
 8002d5a:	6183      	str	r3, [r0, #24]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	2208      	movs	r2, #8
 8002d60:	305c      	adds	r0, #92	@ 0x5c
 8002d62:	f000 f8b1 	bl	8002ec8 <memset>
 8002d66:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <std+0x58>)
 8002d68:	6224      	str	r4, [r4, #32]
 8002d6a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002da0 <std+0x5c>)
 8002d6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d70:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <std+0x60>)
 8002d72:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <std+0x64>)
 8002d76:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d78:	4b0c      	ldr	r3, [pc, #48]	@ (8002dac <std+0x68>)
 8002d7a:	429c      	cmp	r4, r3
 8002d7c:	d006      	beq.n	8002d8c <std+0x48>
 8002d7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d82:	4294      	cmp	r4, r2
 8002d84:	d002      	beq.n	8002d8c <std+0x48>
 8002d86:	33d0      	adds	r3, #208	@ 0xd0
 8002d88:	429c      	cmp	r4, r3
 8002d8a:	d105      	bne.n	8002d98 <std+0x54>
 8002d8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d94:	f000 b8ce 	b.w	8002f34 <__retarget_lock_init_recursive>
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	bf00      	nop
 8002d9c:	080045b5 	.word	0x080045b5
 8002da0:	080045d7 	.word	0x080045d7
 8002da4:	0800460f 	.word	0x0800460f
 8002da8:	08004633 	.word	0x08004633
 8002dac:	200002d0 	.word	0x200002d0

08002db0 <stdio_exit_handler>:
 8002db0:	4a02      	ldr	r2, [pc, #8]	@ (8002dbc <stdio_exit_handler+0xc>)
 8002db2:	4903      	ldr	r1, [pc, #12]	@ (8002dc0 <stdio_exit_handler+0x10>)
 8002db4:	4803      	ldr	r0, [pc, #12]	@ (8002dc4 <stdio_exit_handler+0x14>)
 8002db6:	f000 b869 	b.w	8002e8c <_fwalk_sglue>
 8002dba:	bf00      	nop
 8002dbc:	2000000c 	.word	0x2000000c
 8002dc0:	08003e4d 	.word	0x08003e4d
 8002dc4:	2000001c 	.word	0x2000001c

08002dc8 <cleanup_stdio>:
 8002dc8:	6841      	ldr	r1, [r0, #4]
 8002dca:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <cleanup_stdio+0x34>)
 8002dcc:	b510      	push	{r4, lr}
 8002dce:	4299      	cmp	r1, r3
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	d001      	beq.n	8002dd8 <cleanup_stdio+0x10>
 8002dd4:	f001 f83a 	bl	8003e4c <_fflush_r>
 8002dd8:	68a1      	ldr	r1, [r4, #8]
 8002dda:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <cleanup_stdio+0x38>)
 8002ddc:	4299      	cmp	r1, r3
 8002dde:	d002      	beq.n	8002de6 <cleanup_stdio+0x1e>
 8002de0:	4620      	mov	r0, r4
 8002de2:	f001 f833 	bl	8003e4c <_fflush_r>
 8002de6:	68e1      	ldr	r1, [r4, #12]
 8002de8:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <cleanup_stdio+0x3c>)
 8002dea:	4299      	cmp	r1, r3
 8002dec:	d004      	beq.n	8002df8 <cleanup_stdio+0x30>
 8002dee:	4620      	mov	r0, r4
 8002df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df4:	f001 b82a 	b.w	8003e4c <_fflush_r>
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200002d0 	.word	0x200002d0
 8002e00:	20000338 	.word	0x20000338
 8002e04:	200003a0 	.word	0x200003a0

08002e08 <global_stdio_init.part.0>:
 8002e08:	b510      	push	{r4, lr}
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <global_stdio_init.part.0+0x30>)
 8002e0c:	4c0b      	ldr	r4, [pc, #44]	@ (8002e3c <global_stdio_init.part.0+0x34>)
 8002e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e40 <global_stdio_init.part.0+0x38>)
 8002e10:	4620      	mov	r0, r4
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	2104      	movs	r1, #4
 8002e16:	2200      	movs	r2, #0
 8002e18:	f7ff ff94 	bl	8002d44 <std>
 8002e1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e20:	2201      	movs	r2, #1
 8002e22:	2109      	movs	r1, #9
 8002e24:	f7ff ff8e 	bl	8002d44 <std>
 8002e28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e32:	2112      	movs	r1, #18
 8002e34:	f7ff bf86 	b.w	8002d44 <std>
 8002e38:	20000408 	.word	0x20000408
 8002e3c:	200002d0 	.word	0x200002d0
 8002e40:	08002db1 	.word	0x08002db1

08002e44 <__sfp_lock_acquire>:
 8002e44:	4801      	ldr	r0, [pc, #4]	@ (8002e4c <__sfp_lock_acquire+0x8>)
 8002e46:	f000 b876 	b.w	8002f36 <__retarget_lock_acquire_recursive>
 8002e4a:	bf00      	nop
 8002e4c:	2000040d 	.word	0x2000040d

08002e50 <__sfp_lock_release>:
 8002e50:	4801      	ldr	r0, [pc, #4]	@ (8002e58 <__sfp_lock_release+0x8>)
 8002e52:	f000 b871 	b.w	8002f38 <__retarget_lock_release_recursive>
 8002e56:	bf00      	nop
 8002e58:	2000040d 	.word	0x2000040d

08002e5c <__sinit>:
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	4604      	mov	r4, r0
 8002e60:	f7ff fff0 	bl	8002e44 <__sfp_lock_acquire>
 8002e64:	6a23      	ldr	r3, [r4, #32]
 8002e66:	b11b      	cbz	r3, 8002e70 <__sinit+0x14>
 8002e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e6c:	f7ff bff0 	b.w	8002e50 <__sfp_lock_release>
 8002e70:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <__sinit+0x28>)
 8002e72:	6223      	str	r3, [r4, #32]
 8002e74:	4b04      	ldr	r3, [pc, #16]	@ (8002e88 <__sinit+0x2c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f5      	bne.n	8002e68 <__sinit+0xc>
 8002e7c:	f7ff ffc4 	bl	8002e08 <global_stdio_init.part.0>
 8002e80:	e7f2      	b.n	8002e68 <__sinit+0xc>
 8002e82:	bf00      	nop
 8002e84:	08002dc9 	.word	0x08002dc9
 8002e88:	20000408 	.word	0x20000408

08002e8c <_fwalk_sglue>:
 8002e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e90:	4607      	mov	r7, r0
 8002e92:	4688      	mov	r8, r1
 8002e94:	4614      	mov	r4, r2
 8002e96:	2600      	movs	r6, #0
 8002e98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e9c:	f1b9 0901 	subs.w	r9, r9, #1
 8002ea0:	d505      	bpl.n	8002eae <_fwalk_sglue+0x22>
 8002ea2:	6824      	ldr	r4, [r4, #0]
 8002ea4:	2c00      	cmp	r4, #0
 8002ea6:	d1f7      	bne.n	8002e98 <_fwalk_sglue+0xc>
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eae:	89ab      	ldrh	r3, [r5, #12]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d907      	bls.n	8002ec4 <_fwalk_sglue+0x38>
 8002eb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	d003      	beq.n	8002ec4 <_fwalk_sglue+0x38>
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	4638      	mov	r0, r7
 8002ec0:	47c0      	blx	r8
 8002ec2:	4306      	orrs	r6, r0
 8002ec4:	3568      	adds	r5, #104	@ 0x68
 8002ec6:	e7e9      	b.n	8002e9c <_fwalk_sglue+0x10>

08002ec8 <memset>:
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4402      	add	r2, r0
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d100      	bne.n	8002ed2 <memset+0xa>
 8002ed0:	4770      	bx	lr
 8002ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed6:	e7f9      	b.n	8002ecc <memset+0x4>

08002ed8 <_localeconv_r>:
 8002ed8:	4800      	ldr	r0, [pc, #0]	@ (8002edc <_localeconv_r+0x4>)
 8002eda:	4770      	bx	lr
 8002edc:	20000158 	.word	0x20000158

08002ee0 <__errno>:
 8002ee0:	4b01      	ldr	r3, [pc, #4]	@ (8002ee8 <__errno+0x8>)
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000018 	.word	0x20000018

08002eec <__libc_init_array>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	2600      	movs	r6, #0
 8002ef0:	4d0c      	ldr	r5, [pc, #48]	@ (8002f24 <__libc_init_array+0x38>)
 8002ef2:	4c0d      	ldr	r4, [pc, #52]	@ (8002f28 <__libc_init_array+0x3c>)
 8002ef4:	1b64      	subs	r4, r4, r5
 8002ef6:	10a4      	asrs	r4, r4, #2
 8002ef8:	42a6      	cmp	r6, r4
 8002efa:	d109      	bne.n	8002f10 <__libc_init_array+0x24>
 8002efc:	f001 ff50 	bl	8004da0 <_init>
 8002f00:	2600      	movs	r6, #0
 8002f02:	4d0a      	ldr	r5, [pc, #40]	@ (8002f2c <__libc_init_array+0x40>)
 8002f04:	4c0a      	ldr	r4, [pc, #40]	@ (8002f30 <__libc_init_array+0x44>)
 8002f06:	1b64      	subs	r4, r4, r5
 8002f08:	10a4      	asrs	r4, r4, #2
 8002f0a:	42a6      	cmp	r6, r4
 8002f0c:	d105      	bne.n	8002f1a <__libc_init_array+0x2e>
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f14:	4798      	blx	r3
 8002f16:	3601      	adds	r6, #1
 8002f18:	e7ee      	b.n	8002ef8 <__libc_init_array+0xc>
 8002f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1e:	4798      	blx	r3
 8002f20:	3601      	adds	r6, #1
 8002f22:	e7f2      	b.n	8002f0a <__libc_init_array+0x1e>
 8002f24:	08005158 	.word	0x08005158
 8002f28:	08005158 	.word	0x08005158
 8002f2c:	08005158 	.word	0x08005158
 8002f30:	0800515c 	.word	0x0800515c

08002f34 <__retarget_lock_init_recursive>:
 8002f34:	4770      	bx	lr

08002f36 <__retarget_lock_acquire_recursive>:
 8002f36:	4770      	bx	lr

08002f38 <__retarget_lock_release_recursive>:
 8002f38:	4770      	bx	lr

08002f3a <memchr>:
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	b2c9      	uxtb	r1, r1
 8002f40:	4402      	add	r2, r0
 8002f42:	4293      	cmp	r3, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	d101      	bne.n	8002f4c <memchr+0x12>
 8002f48:	2000      	movs	r0, #0
 8002f4a:	e003      	b.n	8002f54 <memchr+0x1a>
 8002f4c:	7804      	ldrb	r4, [r0, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	428c      	cmp	r4, r1
 8002f52:	d1f6      	bne.n	8002f42 <memchr+0x8>
 8002f54:	bd10      	pop	{r4, pc}

08002f56 <quorem>:
 8002f56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f5a:	6903      	ldr	r3, [r0, #16]
 8002f5c:	690c      	ldr	r4, [r1, #16]
 8002f5e:	4607      	mov	r7, r0
 8002f60:	42a3      	cmp	r3, r4
 8002f62:	db7e      	blt.n	8003062 <quorem+0x10c>
 8002f64:	3c01      	subs	r4, #1
 8002f66:	00a3      	lsls	r3, r4, #2
 8002f68:	f100 0514 	add.w	r5, r0, #20
 8002f6c:	f101 0814 	add.w	r8, r1, #20
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002f7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002f80:	3301      	adds	r3, #1
 8002f82:	429a      	cmp	r2, r3
 8002f84:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002f8c:	d32e      	bcc.n	8002fec <quorem+0x96>
 8002f8e:	f04f 0a00 	mov.w	sl, #0
 8002f92:	46c4      	mov	ip, r8
 8002f94:	46ae      	mov	lr, r5
 8002f96:	46d3      	mov	fp, sl
 8002f98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002f9c:	b298      	uxth	r0, r3
 8002f9e:	fb06 a000 	mla	r0, r6, r0, sl
 8002fa2:	0c1b      	lsrs	r3, r3, #16
 8002fa4:	0c02      	lsrs	r2, r0, #16
 8002fa6:	fb06 2303 	mla	r3, r6, r3, r2
 8002faa:	f8de 2000 	ldr.w	r2, [lr]
 8002fae:	b280      	uxth	r0, r0
 8002fb0:	b292      	uxth	r2, r2
 8002fb2:	1a12      	subs	r2, r2, r0
 8002fb4:	445a      	add	r2, fp
 8002fb6:	f8de 0000 	ldr.w	r0, [lr]
 8002fba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002fc4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002fce:	45e1      	cmp	r9, ip
 8002fd0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002fd4:	f84e 2b04 	str.w	r2, [lr], #4
 8002fd8:	d2de      	bcs.n	8002f98 <quorem+0x42>
 8002fda:	9b00      	ldr	r3, [sp, #0]
 8002fdc:	58eb      	ldr	r3, [r5, r3]
 8002fde:	b92b      	cbnz	r3, 8002fec <quorem+0x96>
 8002fe0:	9b01      	ldr	r3, [sp, #4]
 8002fe2:	3b04      	subs	r3, #4
 8002fe4:	429d      	cmp	r5, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	d32f      	bcc.n	800304a <quorem+0xf4>
 8002fea:	613c      	str	r4, [r7, #16]
 8002fec:	4638      	mov	r0, r7
 8002fee:	f001 f9d9 	bl	80043a4 <__mcmp>
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	db25      	blt.n	8003042 <quorem+0xec>
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f858 2b04 	ldr.w	r2, [r8], #4
 8002ffe:	f8d1 c000 	ldr.w	ip, [r1]
 8003002:	fa1f fe82 	uxth.w	lr, r2
 8003006:	fa1f f38c 	uxth.w	r3, ip
 800300a:	eba3 030e 	sub.w	r3, r3, lr
 800300e:	4403      	add	r3, r0
 8003010:	0c12      	lsrs	r2, r2, #16
 8003012:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003016:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800301a:	b29b      	uxth	r3, r3
 800301c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003020:	45c1      	cmp	r9, r8
 8003022:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003026:	f841 3b04 	str.w	r3, [r1], #4
 800302a:	d2e6      	bcs.n	8002ffa <quorem+0xa4>
 800302c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003030:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003034:	b922      	cbnz	r2, 8003040 <quorem+0xea>
 8003036:	3b04      	subs	r3, #4
 8003038:	429d      	cmp	r5, r3
 800303a:	461a      	mov	r2, r3
 800303c:	d30b      	bcc.n	8003056 <quorem+0x100>
 800303e:	613c      	str	r4, [r7, #16]
 8003040:	3601      	adds	r6, #1
 8003042:	4630      	mov	r0, r6
 8003044:	b003      	add	sp, #12
 8003046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	3b04      	subs	r3, #4
 800304e:	2a00      	cmp	r2, #0
 8003050:	d1cb      	bne.n	8002fea <quorem+0x94>
 8003052:	3c01      	subs	r4, #1
 8003054:	e7c6      	b.n	8002fe4 <quorem+0x8e>
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	3b04      	subs	r3, #4
 800305a:	2a00      	cmp	r2, #0
 800305c:	d1ef      	bne.n	800303e <quorem+0xe8>
 800305e:	3c01      	subs	r4, #1
 8003060:	e7ea      	b.n	8003038 <quorem+0xe2>
 8003062:	2000      	movs	r0, #0
 8003064:	e7ee      	b.n	8003044 <quorem+0xee>
	...

08003068 <_dtoa_r>:
 8003068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306c:	4614      	mov	r4, r2
 800306e:	461d      	mov	r5, r3
 8003070:	69c7      	ldr	r7, [r0, #28]
 8003072:	b097      	sub	sp, #92	@ 0x5c
 8003074:	4683      	mov	fp, r0
 8003076:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800307a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800307c:	b97f      	cbnz	r7, 800309e <_dtoa_r+0x36>
 800307e:	2010      	movs	r0, #16
 8003080:	f000 fdba 	bl	8003bf8 <malloc>
 8003084:	4602      	mov	r2, r0
 8003086:	f8cb 001c 	str.w	r0, [fp, #28]
 800308a:	b920      	cbnz	r0, 8003096 <_dtoa_r+0x2e>
 800308c:	21ef      	movs	r1, #239	@ 0xef
 800308e:	4ba8      	ldr	r3, [pc, #672]	@ (8003330 <_dtoa_r+0x2c8>)
 8003090:	48a8      	ldr	r0, [pc, #672]	@ (8003334 <_dtoa_r+0x2cc>)
 8003092:	f001 fb37 	bl	8004704 <__assert_func>
 8003096:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800309a:	6007      	str	r7, [r0, #0]
 800309c:	60c7      	str	r7, [r0, #12]
 800309e:	f8db 301c 	ldr.w	r3, [fp, #28]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	b159      	cbz	r1, 80030be <_dtoa_r+0x56>
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	2301      	movs	r3, #1
 80030aa:	4093      	lsls	r3, r2
 80030ac:	604a      	str	r2, [r1, #4]
 80030ae:	608b      	str	r3, [r1, #8]
 80030b0:	4658      	mov	r0, fp
 80030b2:	f000 ff3f 	bl	8003f34 <_Bfree>
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	1e2b      	subs	r3, r5, #0
 80030c0:	bfaf      	iteee	ge
 80030c2:	2300      	movge	r3, #0
 80030c4:	2201      	movlt	r2, #1
 80030c6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80030ca:	9303      	strlt	r3, [sp, #12]
 80030cc:	bfa8      	it	ge
 80030ce:	6033      	strge	r3, [r6, #0]
 80030d0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80030d4:	4b98      	ldr	r3, [pc, #608]	@ (8003338 <_dtoa_r+0x2d0>)
 80030d6:	bfb8      	it	lt
 80030d8:	6032      	strlt	r2, [r6, #0]
 80030da:	ea33 0308 	bics.w	r3, r3, r8
 80030de:	d112      	bne.n	8003106 <_dtoa_r+0x9e>
 80030e0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80030e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80030ec:	4323      	orrs	r3, r4
 80030ee:	f000 8550 	beq.w	8003b92 <_dtoa_r+0xb2a>
 80030f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80030f4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800333c <_dtoa_r+0x2d4>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8552 	beq.w	8003ba2 <_dtoa_r+0xb3a>
 80030fe:	f10a 0303 	add.w	r3, sl, #3
 8003102:	f000 bd4c 	b.w	8003b9e <_dtoa_r+0xb36>
 8003106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800310a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800310e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003112:	2200      	movs	r2, #0
 8003114:	2300      	movs	r3, #0
 8003116:	f7fd fc47 	bl	80009a8 <__aeabi_dcmpeq>
 800311a:	4607      	mov	r7, r0
 800311c:	b158      	cbz	r0, 8003136 <_dtoa_r+0xce>
 800311e:	2301      	movs	r3, #1
 8003120:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003126:	b113      	cbz	r3, 800312e <_dtoa_r+0xc6>
 8003128:	4b85      	ldr	r3, [pc, #532]	@ (8003340 <_dtoa_r+0x2d8>)
 800312a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003344 <_dtoa_r+0x2dc>
 8003132:	f000 bd36 	b.w	8003ba2 <_dtoa_r+0xb3a>
 8003136:	ab14      	add	r3, sp, #80	@ 0x50
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	ab15      	add	r3, sp, #84	@ 0x54
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	4658      	mov	r0, fp
 8003140:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003144:	f001 f9de 	bl	8004504 <__d2b>
 8003148:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800314c:	4681      	mov	r9, r0
 800314e:	2e00      	cmp	r6, #0
 8003150:	d077      	beq.n	8003242 <_dtoa_r+0x1da>
 8003152:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003158:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800315c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003160:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003164:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003168:	9712      	str	r7, [sp, #72]	@ 0x48
 800316a:	4619      	mov	r1, r3
 800316c:	2200      	movs	r2, #0
 800316e:	4b76      	ldr	r3, [pc, #472]	@ (8003348 <_dtoa_r+0x2e0>)
 8003170:	f7fc fffa 	bl	8000168 <__aeabi_dsub>
 8003174:	a368      	add	r3, pc, #416	@ (adr r3, 8003318 <_dtoa_r+0x2b0>)
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f7fd f9ad 	bl	80004d8 <__aeabi_dmul>
 800317e:	a368      	add	r3, pc, #416	@ (adr r3, 8003320 <_dtoa_r+0x2b8>)
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f7fc fff2 	bl	800016c <__adddf3>
 8003188:	4604      	mov	r4, r0
 800318a:	4630      	mov	r0, r6
 800318c:	460d      	mov	r5, r1
 800318e:	f7fd f939 	bl	8000404 <__aeabi_i2d>
 8003192:	a365      	add	r3, pc, #404	@ (adr r3, 8003328 <_dtoa_r+0x2c0>)
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f7fd f99e 	bl	80004d8 <__aeabi_dmul>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4620      	mov	r0, r4
 80031a2:	4629      	mov	r1, r5
 80031a4:	f7fc ffe2 	bl	800016c <__adddf3>
 80031a8:	4604      	mov	r4, r0
 80031aa:	460d      	mov	r5, r1
 80031ac:	f7fd fc44 	bl	8000a38 <__aeabi_d2iz>
 80031b0:	2200      	movs	r2, #0
 80031b2:	4607      	mov	r7, r0
 80031b4:	2300      	movs	r3, #0
 80031b6:	4620      	mov	r0, r4
 80031b8:	4629      	mov	r1, r5
 80031ba:	f7fd fbff 	bl	80009bc <__aeabi_dcmplt>
 80031be:	b140      	cbz	r0, 80031d2 <_dtoa_r+0x16a>
 80031c0:	4638      	mov	r0, r7
 80031c2:	f7fd f91f 	bl	8000404 <__aeabi_i2d>
 80031c6:	4622      	mov	r2, r4
 80031c8:	462b      	mov	r3, r5
 80031ca:	f7fd fbed 	bl	80009a8 <__aeabi_dcmpeq>
 80031ce:	b900      	cbnz	r0, 80031d2 <_dtoa_r+0x16a>
 80031d0:	3f01      	subs	r7, #1
 80031d2:	2f16      	cmp	r7, #22
 80031d4:	d853      	bhi.n	800327e <_dtoa_r+0x216>
 80031d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80031da:	4b5c      	ldr	r3, [pc, #368]	@ (800334c <_dtoa_r+0x2e4>)
 80031dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f7fd fbea 	bl	80009bc <__aeabi_dcmplt>
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d04a      	beq.n	8003282 <_dtoa_r+0x21a>
 80031ec:	2300      	movs	r3, #0
 80031ee:	3f01      	subs	r7, #1
 80031f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80031f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80031f4:	1b9b      	subs	r3, r3, r6
 80031f6:	1e5a      	subs	r2, r3, #1
 80031f8:	bf46      	itte	mi
 80031fa:	f1c3 0801 	rsbmi	r8, r3, #1
 80031fe:	2300      	movmi	r3, #0
 8003200:	f04f 0800 	movpl.w	r8, #0
 8003204:	9209      	str	r2, [sp, #36]	@ 0x24
 8003206:	bf48      	it	mi
 8003208:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800320a:	2f00      	cmp	r7, #0
 800320c:	db3b      	blt.n	8003286 <_dtoa_r+0x21e>
 800320e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003210:	970e      	str	r7, [sp, #56]	@ 0x38
 8003212:	443b      	add	r3, r7
 8003214:	9309      	str	r3, [sp, #36]	@ 0x24
 8003216:	2300      	movs	r3, #0
 8003218:	930a      	str	r3, [sp, #40]	@ 0x28
 800321a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800321c:	2b09      	cmp	r3, #9
 800321e:	d866      	bhi.n	80032ee <_dtoa_r+0x286>
 8003220:	2b05      	cmp	r3, #5
 8003222:	bfc4      	itt	gt
 8003224:	3b04      	subgt	r3, #4
 8003226:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003228:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800322a:	bfc8      	it	gt
 800322c:	2400      	movgt	r4, #0
 800322e:	f1a3 0302 	sub.w	r3, r3, #2
 8003232:	bfd8      	it	le
 8003234:	2401      	movle	r4, #1
 8003236:	2b03      	cmp	r3, #3
 8003238:	d864      	bhi.n	8003304 <_dtoa_r+0x29c>
 800323a:	e8df f003 	tbb	[pc, r3]
 800323e:	382b      	.short	0x382b
 8003240:	5636      	.short	0x5636
 8003242:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003246:	441e      	add	r6, r3
 8003248:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800324c:	2b20      	cmp	r3, #32
 800324e:	bfc1      	itttt	gt
 8003250:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003254:	fa08 f803 	lslgt.w	r8, r8, r3
 8003258:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800325c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003260:	bfd6      	itet	le
 8003262:	f1c3 0320 	rsble	r3, r3, #32
 8003266:	ea48 0003 	orrgt.w	r0, r8, r3
 800326a:	fa04 f003 	lslle.w	r0, r4, r3
 800326e:	f7fd f8b9 	bl	80003e4 <__aeabi_ui2d>
 8003272:	2201      	movs	r2, #1
 8003274:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003278:	3e01      	subs	r6, #1
 800327a:	9212      	str	r2, [sp, #72]	@ 0x48
 800327c:	e775      	b.n	800316a <_dtoa_r+0x102>
 800327e:	2301      	movs	r3, #1
 8003280:	e7b6      	b.n	80031f0 <_dtoa_r+0x188>
 8003282:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003284:	e7b5      	b.n	80031f2 <_dtoa_r+0x18a>
 8003286:	427b      	negs	r3, r7
 8003288:	930a      	str	r3, [sp, #40]	@ 0x28
 800328a:	2300      	movs	r3, #0
 800328c:	eba8 0807 	sub.w	r8, r8, r7
 8003290:	930e      	str	r3, [sp, #56]	@ 0x38
 8003292:	e7c2      	b.n	800321a <_dtoa_r+0x1b2>
 8003294:	2300      	movs	r3, #0
 8003296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003298:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800329a:	2b00      	cmp	r3, #0
 800329c:	dc35      	bgt.n	800330a <_dtoa_r+0x2a2>
 800329e:	2301      	movs	r3, #1
 80032a0:	461a      	mov	r2, r3
 80032a2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80032a6:	9221      	str	r2, [sp, #132]	@ 0x84
 80032a8:	e00b      	b.n	80032c2 <_dtoa_r+0x25a>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e7f3      	b.n	8003296 <_dtoa_r+0x22e>
 80032ae:	2300      	movs	r3, #0
 80032b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	9308      	str	r3, [sp, #32]
 80032b8:	3301      	adds	r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	9307      	str	r3, [sp, #28]
 80032be:	bfb8      	it	lt
 80032c0:	2301      	movlt	r3, #1
 80032c2:	2100      	movs	r1, #0
 80032c4:	2204      	movs	r2, #4
 80032c6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80032ca:	f102 0514 	add.w	r5, r2, #20
 80032ce:	429d      	cmp	r5, r3
 80032d0:	d91f      	bls.n	8003312 <_dtoa_r+0x2aa>
 80032d2:	6041      	str	r1, [r0, #4]
 80032d4:	4658      	mov	r0, fp
 80032d6:	f000 fded 	bl	8003eb4 <_Balloc>
 80032da:	4682      	mov	sl, r0
 80032dc:	2800      	cmp	r0, #0
 80032de:	d139      	bne.n	8003354 <_dtoa_r+0x2ec>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80032e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003350 <_dtoa_r+0x2e8>)
 80032e8:	e6d2      	b.n	8003090 <_dtoa_r+0x28>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e7e0      	b.n	80032b0 <_dtoa_r+0x248>
 80032ee:	2401      	movs	r4, #1
 80032f0:	2300      	movs	r3, #0
 80032f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80032f4:	9320      	str	r3, [sp, #128]	@ 0x80
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032fa:	2200      	movs	r2, #0
 80032fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003300:	2312      	movs	r3, #18
 8003302:	e7d0      	b.n	80032a6 <_dtoa_r+0x23e>
 8003304:	2301      	movs	r3, #1
 8003306:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003308:	e7f5      	b.n	80032f6 <_dtoa_r+0x28e>
 800330a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800330c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003310:	e7d7      	b.n	80032c2 <_dtoa_r+0x25a>
 8003312:	3101      	adds	r1, #1
 8003314:	0052      	lsls	r2, r2, #1
 8003316:	e7d8      	b.n	80032ca <_dtoa_r+0x262>
 8003318:	636f4361 	.word	0x636f4361
 800331c:	3fd287a7 	.word	0x3fd287a7
 8003320:	8b60c8b3 	.word	0x8b60c8b3
 8003324:	3fc68a28 	.word	0x3fc68a28
 8003328:	509f79fb 	.word	0x509f79fb
 800332c:	3fd34413 	.word	0x3fd34413
 8003330:	08004e23 	.word	0x08004e23
 8003334:	08004e3a 	.word	0x08004e3a
 8003338:	7ff00000 	.word	0x7ff00000
 800333c:	08004e1f 	.word	0x08004e1f
 8003340:	08004df3 	.word	0x08004df3
 8003344:	08004df2 	.word	0x08004df2
 8003348:	3ff80000 	.word	0x3ff80000
 800334c:	08004f30 	.word	0x08004f30
 8003350:	08004e92 	.word	0x08004e92
 8003354:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003358:	6018      	str	r0, [r3, #0]
 800335a:	9b07      	ldr	r3, [sp, #28]
 800335c:	2b0e      	cmp	r3, #14
 800335e:	f200 80a4 	bhi.w	80034aa <_dtoa_r+0x442>
 8003362:	2c00      	cmp	r4, #0
 8003364:	f000 80a1 	beq.w	80034aa <_dtoa_r+0x442>
 8003368:	2f00      	cmp	r7, #0
 800336a:	dd33      	ble.n	80033d4 <_dtoa_r+0x36c>
 800336c:	4b86      	ldr	r3, [pc, #536]	@ (8003588 <_dtoa_r+0x520>)
 800336e:	f007 020f 	and.w	r2, r7, #15
 8003372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003376:	05f8      	lsls	r0, r7, #23
 8003378:	e9d3 3400 	ldrd	r3, r4, [r3]
 800337c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003380:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003384:	d516      	bpl.n	80033b4 <_dtoa_r+0x34c>
 8003386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800338a:	4b80      	ldr	r3, [pc, #512]	@ (800358c <_dtoa_r+0x524>)
 800338c:	2603      	movs	r6, #3
 800338e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003392:	f7fd f9cb 	bl	800072c <__aeabi_ddiv>
 8003396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800339a:	f004 040f 	and.w	r4, r4, #15
 800339e:	4d7b      	ldr	r5, [pc, #492]	@ (800358c <_dtoa_r+0x524>)
 80033a0:	b954      	cbnz	r4, 80033b8 <_dtoa_r+0x350>
 80033a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033aa:	f7fd f9bf 	bl	800072c <__aeabi_ddiv>
 80033ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033b2:	e028      	b.n	8003406 <_dtoa_r+0x39e>
 80033b4:	2602      	movs	r6, #2
 80033b6:	e7f2      	b.n	800339e <_dtoa_r+0x336>
 80033b8:	07e1      	lsls	r1, r4, #31
 80033ba:	d508      	bpl.n	80033ce <_dtoa_r+0x366>
 80033bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80033c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80033c4:	f7fd f888 	bl	80004d8 <__aeabi_dmul>
 80033c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033cc:	3601      	adds	r6, #1
 80033ce:	1064      	asrs	r4, r4, #1
 80033d0:	3508      	adds	r5, #8
 80033d2:	e7e5      	b.n	80033a0 <_dtoa_r+0x338>
 80033d4:	f000 80d2 	beq.w	800357c <_dtoa_r+0x514>
 80033d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80033dc:	427c      	negs	r4, r7
 80033de:	4b6a      	ldr	r3, [pc, #424]	@ (8003588 <_dtoa_r+0x520>)
 80033e0:	f004 020f 	and.w	r2, r4, #15
 80033e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f7fd f874 	bl	80004d8 <__aeabi_dmul>
 80033f0:	2602      	movs	r6, #2
 80033f2:	2300      	movs	r3, #0
 80033f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033f8:	4d64      	ldr	r5, [pc, #400]	@ (800358c <_dtoa_r+0x524>)
 80033fa:	1124      	asrs	r4, r4, #4
 80033fc:	2c00      	cmp	r4, #0
 80033fe:	f040 80b2 	bne.w	8003566 <_dtoa_r+0x4fe>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1d3      	bne.n	80033ae <_dtoa_r+0x346>
 8003406:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800340a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80b7 	beq.w	8003580 <_dtoa_r+0x518>
 8003412:	2200      	movs	r2, #0
 8003414:	4620      	mov	r0, r4
 8003416:	4629      	mov	r1, r5
 8003418:	4b5d      	ldr	r3, [pc, #372]	@ (8003590 <_dtoa_r+0x528>)
 800341a:	f7fd facf 	bl	80009bc <__aeabi_dcmplt>
 800341e:	2800      	cmp	r0, #0
 8003420:	f000 80ae 	beq.w	8003580 <_dtoa_r+0x518>
 8003424:	9b07      	ldr	r3, [sp, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80aa 	beq.w	8003580 <_dtoa_r+0x518>
 800342c:	9b08      	ldr	r3, [sp, #32]
 800342e:	2b00      	cmp	r3, #0
 8003430:	dd37      	ble.n	80034a2 <_dtoa_r+0x43a>
 8003432:	1e7b      	subs	r3, r7, #1
 8003434:	4620      	mov	r0, r4
 8003436:	9304      	str	r3, [sp, #16]
 8003438:	2200      	movs	r2, #0
 800343a:	4629      	mov	r1, r5
 800343c:	4b55      	ldr	r3, [pc, #340]	@ (8003594 <_dtoa_r+0x52c>)
 800343e:	f7fd f84b 	bl	80004d8 <__aeabi_dmul>
 8003442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003446:	9c08      	ldr	r4, [sp, #32]
 8003448:	3601      	adds	r6, #1
 800344a:	4630      	mov	r0, r6
 800344c:	f7fc ffda 	bl	8000404 <__aeabi_i2d>
 8003450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003454:	f7fd f840 	bl	80004d8 <__aeabi_dmul>
 8003458:	2200      	movs	r2, #0
 800345a:	4b4f      	ldr	r3, [pc, #316]	@ (8003598 <_dtoa_r+0x530>)
 800345c:	f7fc fe86 	bl	800016c <__adddf3>
 8003460:	4605      	mov	r5, r0
 8003462:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003466:	2c00      	cmp	r4, #0
 8003468:	f040 809a 	bne.w	80035a0 <_dtoa_r+0x538>
 800346c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003470:	2200      	movs	r2, #0
 8003472:	4b4a      	ldr	r3, [pc, #296]	@ (800359c <_dtoa_r+0x534>)
 8003474:	f7fc fe78 	bl	8000168 <__aeabi_dsub>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003480:	462a      	mov	r2, r5
 8003482:	4633      	mov	r3, r6
 8003484:	f7fd fab8 	bl	80009f8 <__aeabi_dcmpgt>
 8003488:	2800      	cmp	r0, #0
 800348a:	f040 828e 	bne.w	80039aa <_dtoa_r+0x942>
 800348e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003492:	462a      	mov	r2, r5
 8003494:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003498:	f7fd fa90 	bl	80009bc <__aeabi_dcmplt>
 800349c:	2800      	cmp	r0, #0
 800349e:	f040 8127 	bne.w	80036f0 <_dtoa_r+0x688>
 80034a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80034a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80034aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f2c0 8163 	blt.w	8003778 <_dtoa_r+0x710>
 80034b2:	2f0e      	cmp	r7, #14
 80034b4:	f300 8160 	bgt.w	8003778 <_dtoa_r+0x710>
 80034b8:	4b33      	ldr	r3, [pc, #204]	@ (8003588 <_dtoa_r+0x520>)
 80034ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80034be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80034c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	da03      	bge.n	80034d4 <_dtoa_r+0x46c>
 80034cc:	9b07      	ldr	r3, [sp, #28]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f340 8100 	ble.w	80036d4 <_dtoa_r+0x66c>
 80034d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80034d8:	4656      	mov	r6, sl
 80034da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034de:	4620      	mov	r0, r4
 80034e0:	4629      	mov	r1, r5
 80034e2:	f7fd f923 	bl	800072c <__aeabi_ddiv>
 80034e6:	f7fd faa7 	bl	8000a38 <__aeabi_d2iz>
 80034ea:	4680      	mov	r8, r0
 80034ec:	f7fc ff8a 	bl	8000404 <__aeabi_i2d>
 80034f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034f4:	f7fc fff0 	bl	80004d8 <__aeabi_dmul>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4620      	mov	r0, r4
 80034fe:	4629      	mov	r1, r5
 8003500:	f7fc fe32 	bl	8000168 <__aeabi_dsub>
 8003504:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003508:	9d07      	ldr	r5, [sp, #28]
 800350a:	f806 4b01 	strb.w	r4, [r6], #1
 800350e:	eba6 040a 	sub.w	r4, r6, sl
 8003512:	42a5      	cmp	r5, r4
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	f040 8116 	bne.w	8003748 <_dtoa_r+0x6e0>
 800351c:	f7fc fe26 	bl	800016c <__adddf3>
 8003520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003524:	4604      	mov	r4, r0
 8003526:	460d      	mov	r5, r1
 8003528:	f7fd fa66 	bl	80009f8 <__aeabi_dcmpgt>
 800352c:	2800      	cmp	r0, #0
 800352e:	f040 80f8 	bne.w	8003722 <_dtoa_r+0x6ba>
 8003532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003536:	4620      	mov	r0, r4
 8003538:	4629      	mov	r1, r5
 800353a:	f7fd fa35 	bl	80009a8 <__aeabi_dcmpeq>
 800353e:	b118      	cbz	r0, 8003548 <_dtoa_r+0x4e0>
 8003540:	f018 0f01 	tst.w	r8, #1
 8003544:	f040 80ed 	bne.w	8003722 <_dtoa_r+0x6ba>
 8003548:	4649      	mov	r1, r9
 800354a:	4658      	mov	r0, fp
 800354c:	f000 fcf2 	bl	8003f34 <_Bfree>
 8003550:	2300      	movs	r3, #0
 8003552:	7033      	strb	r3, [r6, #0]
 8003554:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003556:	3701      	adds	r7, #1
 8003558:	601f      	str	r7, [r3, #0]
 800355a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8320 	beq.w	8003ba2 <_dtoa_r+0xb3a>
 8003562:	601e      	str	r6, [r3, #0]
 8003564:	e31d      	b.n	8003ba2 <_dtoa_r+0xb3a>
 8003566:	07e2      	lsls	r2, r4, #31
 8003568:	d505      	bpl.n	8003576 <_dtoa_r+0x50e>
 800356a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800356e:	f7fc ffb3 	bl	80004d8 <__aeabi_dmul>
 8003572:	2301      	movs	r3, #1
 8003574:	3601      	adds	r6, #1
 8003576:	1064      	asrs	r4, r4, #1
 8003578:	3508      	adds	r5, #8
 800357a:	e73f      	b.n	80033fc <_dtoa_r+0x394>
 800357c:	2602      	movs	r6, #2
 800357e:	e742      	b.n	8003406 <_dtoa_r+0x39e>
 8003580:	9c07      	ldr	r4, [sp, #28]
 8003582:	9704      	str	r7, [sp, #16]
 8003584:	e761      	b.n	800344a <_dtoa_r+0x3e2>
 8003586:	bf00      	nop
 8003588:	08004f30 	.word	0x08004f30
 800358c:	08004f08 	.word	0x08004f08
 8003590:	3ff00000 	.word	0x3ff00000
 8003594:	40240000 	.word	0x40240000
 8003598:	401c0000 	.word	0x401c0000
 800359c:	40140000 	.word	0x40140000
 80035a0:	4b70      	ldr	r3, [pc, #448]	@ (8003764 <_dtoa_r+0x6fc>)
 80035a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80035a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80035a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80035ac:	4454      	add	r4, sl
 80035ae:	2900      	cmp	r1, #0
 80035b0:	d045      	beq.n	800363e <_dtoa_r+0x5d6>
 80035b2:	2000      	movs	r0, #0
 80035b4:	496c      	ldr	r1, [pc, #432]	@ (8003768 <_dtoa_r+0x700>)
 80035b6:	f7fd f8b9 	bl	800072c <__aeabi_ddiv>
 80035ba:	4633      	mov	r3, r6
 80035bc:	462a      	mov	r2, r5
 80035be:	f7fc fdd3 	bl	8000168 <__aeabi_dsub>
 80035c2:	4656      	mov	r6, sl
 80035c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80035c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035cc:	f7fd fa34 	bl	8000a38 <__aeabi_d2iz>
 80035d0:	4605      	mov	r5, r0
 80035d2:	f7fc ff17 	bl	8000404 <__aeabi_i2d>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035de:	f7fc fdc3 	bl	8000168 <__aeabi_dsub>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	3530      	adds	r5, #48	@ 0x30
 80035e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80035f0:	f806 5b01 	strb.w	r5, [r6], #1
 80035f4:	f7fd f9e2 	bl	80009bc <__aeabi_dcmplt>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d163      	bne.n	80036c4 <_dtoa_r+0x65c>
 80035fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003600:	2000      	movs	r0, #0
 8003602:	495a      	ldr	r1, [pc, #360]	@ (800376c <_dtoa_r+0x704>)
 8003604:	f7fc fdb0 	bl	8000168 <__aeabi_dsub>
 8003608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800360c:	f7fd f9d6 	bl	80009bc <__aeabi_dcmplt>
 8003610:	2800      	cmp	r0, #0
 8003612:	f040 8087 	bne.w	8003724 <_dtoa_r+0x6bc>
 8003616:	42a6      	cmp	r6, r4
 8003618:	f43f af43 	beq.w	80034a2 <_dtoa_r+0x43a>
 800361c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003620:	2200      	movs	r2, #0
 8003622:	4b53      	ldr	r3, [pc, #332]	@ (8003770 <_dtoa_r+0x708>)
 8003624:	f7fc ff58 	bl	80004d8 <__aeabi_dmul>
 8003628:	2200      	movs	r2, #0
 800362a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800362e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003632:	4b4f      	ldr	r3, [pc, #316]	@ (8003770 <_dtoa_r+0x708>)
 8003634:	f7fc ff50 	bl	80004d8 <__aeabi_dmul>
 8003638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800363c:	e7c4      	b.n	80035c8 <_dtoa_r+0x560>
 800363e:	4631      	mov	r1, r6
 8003640:	4628      	mov	r0, r5
 8003642:	f7fc ff49 	bl	80004d8 <__aeabi_dmul>
 8003646:	4656      	mov	r6, sl
 8003648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800364c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800364e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003652:	f7fd f9f1 	bl	8000a38 <__aeabi_d2iz>
 8003656:	4605      	mov	r5, r0
 8003658:	f7fc fed4 	bl	8000404 <__aeabi_i2d>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003664:	f7fc fd80 	bl	8000168 <__aeabi_dsub>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	3530      	adds	r5, #48	@ 0x30
 800366e:	f806 5b01 	strb.w	r5, [r6], #1
 8003672:	42a6      	cmp	r6, r4
 8003674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	d124      	bne.n	80036c8 <_dtoa_r+0x660>
 800367e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003682:	4b39      	ldr	r3, [pc, #228]	@ (8003768 <_dtoa_r+0x700>)
 8003684:	f7fc fd72 	bl	800016c <__adddf3>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003690:	f7fd f9b2 	bl	80009f8 <__aeabi_dcmpgt>
 8003694:	2800      	cmp	r0, #0
 8003696:	d145      	bne.n	8003724 <_dtoa_r+0x6bc>
 8003698:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800369c:	2000      	movs	r0, #0
 800369e:	4932      	ldr	r1, [pc, #200]	@ (8003768 <_dtoa_r+0x700>)
 80036a0:	f7fc fd62 	bl	8000168 <__aeabi_dsub>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036ac:	f7fd f986 	bl	80009bc <__aeabi_dcmplt>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	f43f aef6 	beq.w	80034a2 <_dtoa_r+0x43a>
 80036b6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80036b8:	1e73      	subs	r3, r6, #1
 80036ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80036bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80036c0:	2b30      	cmp	r3, #48	@ 0x30
 80036c2:	d0f8      	beq.n	80036b6 <_dtoa_r+0x64e>
 80036c4:	9f04      	ldr	r7, [sp, #16]
 80036c6:	e73f      	b.n	8003548 <_dtoa_r+0x4e0>
 80036c8:	4b29      	ldr	r3, [pc, #164]	@ (8003770 <_dtoa_r+0x708>)
 80036ca:	f7fc ff05 	bl	80004d8 <__aeabi_dmul>
 80036ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036d2:	e7bc      	b.n	800364e <_dtoa_r+0x5e6>
 80036d4:	d10c      	bne.n	80036f0 <_dtoa_r+0x688>
 80036d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036da:	2200      	movs	r2, #0
 80036dc:	4b25      	ldr	r3, [pc, #148]	@ (8003774 <_dtoa_r+0x70c>)
 80036de:	f7fc fefb 	bl	80004d8 <__aeabi_dmul>
 80036e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036e6:	f7fd f97d 	bl	80009e4 <__aeabi_dcmpge>
 80036ea:	2800      	cmp	r0, #0
 80036ec:	f000 815b 	beq.w	80039a6 <_dtoa_r+0x93e>
 80036f0:	2400      	movs	r4, #0
 80036f2:	4625      	mov	r5, r4
 80036f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80036f6:	4656      	mov	r6, sl
 80036f8:	43db      	mvns	r3, r3
 80036fa:	9304      	str	r3, [sp, #16]
 80036fc:	2700      	movs	r7, #0
 80036fe:	4621      	mov	r1, r4
 8003700:	4658      	mov	r0, fp
 8003702:	f000 fc17 	bl	8003f34 <_Bfree>
 8003706:	2d00      	cmp	r5, #0
 8003708:	d0dc      	beq.n	80036c4 <_dtoa_r+0x65c>
 800370a:	b12f      	cbz	r7, 8003718 <_dtoa_r+0x6b0>
 800370c:	42af      	cmp	r7, r5
 800370e:	d003      	beq.n	8003718 <_dtoa_r+0x6b0>
 8003710:	4639      	mov	r1, r7
 8003712:	4658      	mov	r0, fp
 8003714:	f000 fc0e 	bl	8003f34 <_Bfree>
 8003718:	4629      	mov	r1, r5
 800371a:	4658      	mov	r0, fp
 800371c:	f000 fc0a 	bl	8003f34 <_Bfree>
 8003720:	e7d0      	b.n	80036c4 <_dtoa_r+0x65c>
 8003722:	9704      	str	r7, [sp, #16]
 8003724:	4633      	mov	r3, r6
 8003726:	461e      	mov	r6, r3
 8003728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800372c:	2a39      	cmp	r2, #57	@ 0x39
 800372e:	d107      	bne.n	8003740 <_dtoa_r+0x6d8>
 8003730:	459a      	cmp	sl, r3
 8003732:	d1f8      	bne.n	8003726 <_dtoa_r+0x6be>
 8003734:	9a04      	ldr	r2, [sp, #16]
 8003736:	3201      	adds	r2, #1
 8003738:	9204      	str	r2, [sp, #16]
 800373a:	2230      	movs	r2, #48	@ 0x30
 800373c:	f88a 2000 	strb.w	r2, [sl]
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	3201      	adds	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	e7bd      	b.n	80036c4 <_dtoa_r+0x65c>
 8003748:	2200      	movs	r2, #0
 800374a:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <_dtoa_r+0x708>)
 800374c:	f7fc fec4 	bl	80004d8 <__aeabi_dmul>
 8003750:	2200      	movs	r2, #0
 8003752:	2300      	movs	r3, #0
 8003754:	4604      	mov	r4, r0
 8003756:	460d      	mov	r5, r1
 8003758:	f7fd f926 	bl	80009a8 <__aeabi_dcmpeq>
 800375c:	2800      	cmp	r0, #0
 800375e:	f43f aebc 	beq.w	80034da <_dtoa_r+0x472>
 8003762:	e6f1      	b.n	8003548 <_dtoa_r+0x4e0>
 8003764:	08004f30 	.word	0x08004f30
 8003768:	3fe00000 	.word	0x3fe00000
 800376c:	3ff00000 	.word	0x3ff00000
 8003770:	40240000 	.word	0x40240000
 8003774:	40140000 	.word	0x40140000
 8003778:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800377a:	2a00      	cmp	r2, #0
 800377c:	f000 80db 	beq.w	8003936 <_dtoa_r+0x8ce>
 8003780:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003782:	2a01      	cmp	r2, #1
 8003784:	f300 80bf 	bgt.w	8003906 <_dtoa_r+0x89e>
 8003788:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800378a:	2a00      	cmp	r2, #0
 800378c:	f000 80b7 	beq.w	80038fe <_dtoa_r+0x896>
 8003790:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003794:	4646      	mov	r6, r8
 8003796:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003798:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800379a:	2101      	movs	r1, #1
 800379c:	441a      	add	r2, r3
 800379e:	4658      	mov	r0, fp
 80037a0:	4498      	add	r8, r3
 80037a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80037a4:	f000 fc7a 	bl	800409c <__i2b>
 80037a8:	4605      	mov	r5, r0
 80037aa:	b15e      	cbz	r6, 80037c4 <_dtoa_r+0x75c>
 80037ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	dd08      	ble.n	80037c4 <_dtoa_r+0x75c>
 80037b2:	42b3      	cmp	r3, r6
 80037b4:	bfa8      	it	ge
 80037b6:	4633      	movge	r3, r6
 80037b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037ba:	eba8 0803 	sub.w	r8, r8, r3
 80037be:	1af6      	subs	r6, r6, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80037c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037c6:	b1f3      	cbz	r3, 8003806 <_dtoa_r+0x79e>
 80037c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80b7 	beq.w	800393e <_dtoa_r+0x8d6>
 80037d0:	b18c      	cbz	r4, 80037f6 <_dtoa_r+0x78e>
 80037d2:	4629      	mov	r1, r5
 80037d4:	4622      	mov	r2, r4
 80037d6:	4658      	mov	r0, fp
 80037d8:	f000 fd1e 	bl	8004218 <__pow5mult>
 80037dc:	464a      	mov	r2, r9
 80037de:	4601      	mov	r1, r0
 80037e0:	4605      	mov	r5, r0
 80037e2:	4658      	mov	r0, fp
 80037e4:	f000 fc70 	bl	80040c8 <__multiply>
 80037e8:	4649      	mov	r1, r9
 80037ea:	9004      	str	r0, [sp, #16]
 80037ec:	4658      	mov	r0, fp
 80037ee:	f000 fba1 	bl	8003f34 <_Bfree>
 80037f2:	9b04      	ldr	r3, [sp, #16]
 80037f4:	4699      	mov	r9, r3
 80037f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037f8:	1b1a      	subs	r2, r3, r4
 80037fa:	d004      	beq.n	8003806 <_dtoa_r+0x79e>
 80037fc:	4649      	mov	r1, r9
 80037fe:	4658      	mov	r0, fp
 8003800:	f000 fd0a 	bl	8004218 <__pow5mult>
 8003804:	4681      	mov	r9, r0
 8003806:	2101      	movs	r1, #1
 8003808:	4658      	mov	r0, fp
 800380a:	f000 fc47 	bl	800409c <__i2b>
 800380e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003810:	4604      	mov	r4, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 81c9 	beq.w	8003baa <_dtoa_r+0xb42>
 8003818:	461a      	mov	r2, r3
 800381a:	4601      	mov	r1, r0
 800381c:	4658      	mov	r0, fp
 800381e:	f000 fcfb 	bl	8004218 <__pow5mult>
 8003822:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003824:	4604      	mov	r4, r0
 8003826:	2b01      	cmp	r3, #1
 8003828:	f300 808f 	bgt.w	800394a <_dtoa_r+0x8e2>
 800382c:	9b02      	ldr	r3, [sp, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	f040 8087 	bne.w	8003942 <_dtoa_r+0x8da>
 8003834:	9b03      	ldr	r3, [sp, #12]
 8003836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800383a:	2b00      	cmp	r3, #0
 800383c:	f040 8083 	bne.w	8003946 <_dtoa_r+0x8de>
 8003840:	9b03      	ldr	r3, [sp, #12]
 8003842:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003846:	0d1b      	lsrs	r3, r3, #20
 8003848:	051b      	lsls	r3, r3, #20
 800384a:	b12b      	cbz	r3, 8003858 <_dtoa_r+0x7f0>
 800384c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800384e:	f108 0801 	add.w	r8, r8, #1
 8003852:	3301      	adds	r3, #1
 8003854:	9309      	str	r3, [sp, #36]	@ 0x24
 8003856:	2301      	movs	r3, #1
 8003858:	930a      	str	r3, [sp, #40]	@ 0x28
 800385a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 81aa 	beq.w	8003bb6 <_dtoa_r+0xb4e>
 8003862:	6923      	ldr	r3, [r4, #16]
 8003864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003868:	6918      	ldr	r0, [r3, #16]
 800386a:	f000 fbcb 	bl	8004004 <__hi0bits>
 800386e:	f1c0 0020 	rsb	r0, r0, #32
 8003872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003874:	4418      	add	r0, r3
 8003876:	f010 001f 	ands.w	r0, r0, #31
 800387a:	d071      	beq.n	8003960 <_dtoa_r+0x8f8>
 800387c:	f1c0 0320 	rsb	r3, r0, #32
 8003880:	2b04      	cmp	r3, #4
 8003882:	dd65      	ble.n	8003950 <_dtoa_r+0x8e8>
 8003884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003886:	f1c0 001c 	rsb	r0, r0, #28
 800388a:	4403      	add	r3, r0
 800388c:	4480      	add	r8, r0
 800388e:	4406      	add	r6, r0
 8003890:	9309      	str	r3, [sp, #36]	@ 0x24
 8003892:	f1b8 0f00 	cmp.w	r8, #0
 8003896:	dd05      	ble.n	80038a4 <_dtoa_r+0x83c>
 8003898:	4649      	mov	r1, r9
 800389a:	4642      	mov	r2, r8
 800389c:	4658      	mov	r0, fp
 800389e:	f000 fd15 	bl	80042cc <__lshift>
 80038a2:	4681      	mov	r9, r0
 80038a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	dd05      	ble.n	80038b6 <_dtoa_r+0x84e>
 80038aa:	4621      	mov	r1, r4
 80038ac:	461a      	mov	r2, r3
 80038ae:	4658      	mov	r0, fp
 80038b0:	f000 fd0c 	bl	80042cc <__lshift>
 80038b4:	4604      	mov	r4, r0
 80038b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d053      	beq.n	8003964 <_dtoa_r+0x8fc>
 80038bc:	4621      	mov	r1, r4
 80038be:	4648      	mov	r0, r9
 80038c0:	f000 fd70 	bl	80043a4 <__mcmp>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	da4d      	bge.n	8003964 <_dtoa_r+0x8fc>
 80038c8:	1e7b      	subs	r3, r7, #1
 80038ca:	4649      	mov	r1, r9
 80038cc:	9304      	str	r3, [sp, #16]
 80038ce:	220a      	movs	r2, #10
 80038d0:	2300      	movs	r3, #0
 80038d2:	4658      	mov	r0, fp
 80038d4:	f000 fb50 	bl	8003f78 <__multadd>
 80038d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80038da:	4681      	mov	r9, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 816c 	beq.w	8003bba <_dtoa_r+0xb52>
 80038e2:	2300      	movs	r3, #0
 80038e4:	4629      	mov	r1, r5
 80038e6:	220a      	movs	r2, #10
 80038e8:	4658      	mov	r0, fp
 80038ea:	f000 fb45 	bl	8003f78 <__multadd>
 80038ee:	9b08      	ldr	r3, [sp, #32]
 80038f0:	4605      	mov	r5, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	dc61      	bgt.n	80039ba <_dtoa_r+0x952>
 80038f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	dc3b      	bgt.n	8003974 <_dtoa_r+0x90c>
 80038fc:	e05d      	b.n	80039ba <_dtoa_r+0x952>
 80038fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003900:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003904:	e746      	b.n	8003794 <_dtoa_r+0x72c>
 8003906:	9b07      	ldr	r3, [sp, #28]
 8003908:	1e5c      	subs	r4, r3, #1
 800390a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800390c:	42a3      	cmp	r3, r4
 800390e:	bfbf      	itttt	lt
 8003910:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8003912:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8003914:	1ae3      	sublt	r3, r4, r3
 8003916:	18d2      	addlt	r2, r2, r3
 8003918:	bfa8      	it	ge
 800391a:	1b1c      	subge	r4, r3, r4
 800391c:	9b07      	ldr	r3, [sp, #28]
 800391e:	bfbe      	ittt	lt
 8003920:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8003922:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8003924:	2400      	movlt	r4, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	bfb5      	itete	lt
 800392a:	eba8 0603 	sublt.w	r6, r8, r3
 800392e:	4646      	movge	r6, r8
 8003930:	2300      	movlt	r3, #0
 8003932:	9b07      	ldrge	r3, [sp, #28]
 8003934:	e730      	b.n	8003798 <_dtoa_r+0x730>
 8003936:	4646      	mov	r6, r8
 8003938:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800393a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800393c:	e735      	b.n	80037aa <_dtoa_r+0x742>
 800393e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003940:	e75c      	b.n	80037fc <_dtoa_r+0x794>
 8003942:	2300      	movs	r3, #0
 8003944:	e788      	b.n	8003858 <_dtoa_r+0x7f0>
 8003946:	9b02      	ldr	r3, [sp, #8]
 8003948:	e786      	b.n	8003858 <_dtoa_r+0x7f0>
 800394a:	2300      	movs	r3, #0
 800394c:	930a      	str	r3, [sp, #40]	@ 0x28
 800394e:	e788      	b.n	8003862 <_dtoa_r+0x7fa>
 8003950:	d09f      	beq.n	8003892 <_dtoa_r+0x82a>
 8003952:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003954:	331c      	adds	r3, #28
 8003956:	441a      	add	r2, r3
 8003958:	4498      	add	r8, r3
 800395a:	441e      	add	r6, r3
 800395c:	9209      	str	r2, [sp, #36]	@ 0x24
 800395e:	e798      	b.n	8003892 <_dtoa_r+0x82a>
 8003960:	4603      	mov	r3, r0
 8003962:	e7f6      	b.n	8003952 <_dtoa_r+0x8ea>
 8003964:	9b07      	ldr	r3, [sp, #28]
 8003966:	9704      	str	r7, [sp, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	dc20      	bgt.n	80039ae <_dtoa_r+0x946>
 800396c:	9308      	str	r3, [sp, #32]
 800396e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003970:	2b02      	cmp	r3, #2
 8003972:	dd1e      	ble.n	80039b2 <_dtoa_r+0x94a>
 8003974:	9b08      	ldr	r3, [sp, #32]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f47f aebc 	bne.w	80036f4 <_dtoa_r+0x68c>
 800397c:	4621      	mov	r1, r4
 800397e:	2205      	movs	r2, #5
 8003980:	4658      	mov	r0, fp
 8003982:	f000 faf9 	bl	8003f78 <__multadd>
 8003986:	4601      	mov	r1, r0
 8003988:	4604      	mov	r4, r0
 800398a:	4648      	mov	r0, r9
 800398c:	f000 fd0a 	bl	80043a4 <__mcmp>
 8003990:	2800      	cmp	r0, #0
 8003992:	f77f aeaf 	ble.w	80036f4 <_dtoa_r+0x68c>
 8003996:	2331      	movs	r3, #49	@ 0x31
 8003998:	4656      	mov	r6, sl
 800399a:	f806 3b01 	strb.w	r3, [r6], #1
 800399e:	9b04      	ldr	r3, [sp, #16]
 80039a0:	3301      	adds	r3, #1
 80039a2:	9304      	str	r3, [sp, #16]
 80039a4:	e6aa      	b.n	80036fc <_dtoa_r+0x694>
 80039a6:	9c07      	ldr	r4, [sp, #28]
 80039a8:	9704      	str	r7, [sp, #16]
 80039aa:	4625      	mov	r5, r4
 80039ac:	e7f3      	b.n	8003996 <_dtoa_r+0x92e>
 80039ae:	9b07      	ldr	r3, [sp, #28]
 80039b0:	9308      	str	r3, [sp, #32]
 80039b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8104 	beq.w	8003bc2 <_dtoa_r+0xb5a>
 80039ba:	2e00      	cmp	r6, #0
 80039bc:	dd05      	ble.n	80039ca <_dtoa_r+0x962>
 80039be:	4629      	mov	r1, r5
 80039c0:	4632      	mov	r2, r6
 80039c2:	4658      	mov	r0, fp
 80039c4:	f000 fc82 	bl	80042cc <__lshift>
 80039c8:	4605      	mov	r5, r0
 80039ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05a      	beq.n	8003a86 <_dtoa_r+0xa1e>
 80039d0:	4658      	mov	r0, fp
 80039d2:	6869      	ldr	r1, [r5, #4]
 80039d4:	f000 fa6e 	bl	8003eb4 <_Balloc>
 80039d8:	4606      	mov	r6, r0
 80039da:	b928      	cbnz	r0, 80039e8 <_dtoa_r+0x980>
 80039dc:	4602      	mov	r2, r0
 80039de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80039e2:	4b83      	ldr	r3, [pc, #524]	@ (8003bf0 <_dtoa_r+0xb88>)
 80039e4:	f7ff bb54 	b.w	8003090 <_dtoa_r+0x28>
 80039e8:	692a      	ldr	r2, [r5, #16]
 80039ea:	f105 010c 	add.w	r1, r5, #12
 80039ee:	3202      	adds	r2, #2
 80039f0:	0092      	lsls	r2, r2, #2
 80039f2:	300c      	adds	r0, #12
 80039f4:	f000 fe78 	bl	80046e8 <memcpy>
 80039f8:	2201      	movs	r2, #1
 80039fa:	4631      	mov	r1, r6
 80039fc:	4658      	mov	r0, fp
 80039fe:	f000 fc65 	bl	80042cc <__lshift>
 8003a02:	462f      	mov	r7, r5
 8003a04:	4605      	mov	r5, r0
 8003a06:	f10a 0301 	add.w	r3, sl, #1
 8003a0a:	9307      	str	r3, [sp, #28]
 8003a0c:	9b08      	ldr	r3, [sp, #32]
 8003a0e:	4453      	add	r3, sl
 8003a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a12:	9b02      	ldr	r3, [sp, #8]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a1a:	9b07      	ldr	r3, [sp, #28]
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4648      	mov	r0, r9
 8003a22:	9302      	str	r3, [sp, #8]
 8003a24:	f7ff fa97 	bl	8002f56 <quorem>
 8003a28:	4639      	mov	r1, r7
 8003a2a:	9008      	str	r0, [sp, #32]
 8003a2c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003a30:	4648      	mov	r0, r9
 8003a32:	f000 fcb7 	bl	80043a4 <__mcmp>
 8003a36:	462a      	mov	r2, r5
 8003a38:	9009      	str	r0, [sp, #36]	@ 0x24
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	4658      	mov	r0, fp
 8003a3e:	f000 fccd 	bl	80043dc <__mdiff>
 8003a42:	68c2      	ldr	r2, [r0, #12]
 8003a44:	4606      	mov	r6, r0
 8003a46:	bb02      	cbnz	r2, 8003a8a <_dtoa_r+0xa22>
 8003a48:	4601      	mov	r1, r0
 8003a4a:	4648      	mov	r0, r9
 8003a4c:	f000 fcaa 	bl	80043a4 <__mcmp>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4631      	mov	r1, r6
 8003a54:	4658      	mov	r0, fp
 8003a56:	920c      	str	r2, [sp, #48]	@ 0x30
 8003a58:	f000 fa6c 	bl	8003f34 <_Bfree>
 8003a5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003a5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003a60:	9e07      	ldr	r6, [sp, #28]
 8003a62:	ea43 0102 	orr.w	r1, r3, r2
 8003a66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a68:	4319      	orrs	r1, r3
 8003a6a:	d110      	bne.n	8003a8e <_dtoa_r+0xa26>
 8003a6c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003a70:	d029      	beq.n	8003ac6 <_dtoa_r+0xa5e>
 8003a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	dd02      	ble.n	8003a7e <_dtoa_r+0xa16>
 8003a78:	9b08      	ldr	r3, [sp, #32]
 8003a7a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8003a7e:	9b02      	ldr	r3, [sp, #8]
 8003a80:	f883 8000 	strb.w	r8, [r3]
 8003a84:	e63b      	b.n	80036fe <_dtoa_r+0x696>
 8003a86:	4628      	mov	r0, r5
 8003a88:	e7bb      	b.n	8003a02 <_dtoa_r+0x99a>
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	e7e1      	b.n	8003a52 <_dtoa_r+0x9ea>
 8003a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	db04      	blt.n	8003a9e <_dtoa_r+0xa36>
 8003a94:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8003a96:	430b      	orrs	r3, r1
 8003a98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	d120      	bne.n	8003ae0 <_dtoa_r+0xa78>
 8003a9e:	2a00      	cmp	r2, #0
 8003aa0:	dded      	ble.n	8003a7e <_dtoa_r+0xa16>
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	4658      	mov	r0, fp
 8003aa8:	f000 fc10 	bl	80042cc <__lshift>
 8003aac:	4621      	mov	r1, r4
 8003aae:	4681      	mov	r9, r0
 8003ab0:	f000 fc78 	bl	80043a4 <__mcmp>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	dc03      	bgt.n	8003ac0 <_dtoa_r+0xa58>
 8003ab8:	d1e1      	bne.n	8003a7e <_dtoa_r+0xa16>
 8003aba:	f018 0f01 	tst.w	r8, #1
 8003abe:	d0de      	beq.n	8003a7e <_dtoa_r+0xa16>
 8003ac0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003ac4:	d1d8      	bne.n	8003a78 <_dtoa_r+0xa10>
 8003ac6:	2339      	movs	r3, #57	@ 0x39
 8003ac8:	9a02      	ldr	r2, [sp, #8]
 8003aca:	7013      	strb	r3, [r2, #0]
 8003acc:	4633      	mov	r3, r6
 8003ace:	461e      	mov	r6, r3
 8003ad0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	2a39      	cmp	r2, #57	@ 0x39
 8003ad8:	d052      	beq.n	8003b80 <_dtoa_r+0xb18>
 8003ada:	3201      	adds	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	e60e      	b.n	80036fe <_dtoa_r+0x696>
 8003ae0:	2a00      	cmp	r2, #0
 8003ae2:	dd07      	ble.n	8003af4 <_dtoa_r+0xa8c>
 8003ae4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003ae8:	d0ed      	beq.n	8003ac6 <_dtoa_r+0xa5e>
 8003aea:	9a02      	ldr	r2, [sp, #8]
 8003aec:	f108 0301 	add.w	r3, r8, #1
 8003af0:	7013      	strb	r3, [r2, #0]
 8003af2:	e604      	b.n	80036fe <_dtoa_r+0x696>
 8003af4:	9b07      	ldr	r3, [sp, #28]
 8003af6:	9a07      	ldr	r2, [sp, #28]
 8003af8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8003afc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d028      	beq.n	8003b54 <_dtoa_r+0xaec>
 8003b02:	4649      	mov	r1, r9
 8003b04:	2300      	movs	r3, #0
 8003b06:	220a      	movs	r2, #10
 8003b08:	4658      	mov	r0, fp
 8003b0a:	f000 fa35 	bl	8003f78 <__multadd>
 8003b0e:	42af      	cmp	r7, r5
 8003b10:	4681      	mov	r9, r0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	f04f 020a 	mov.w	r2, #10
 8003b1a:	4639      	mov	r1, r7
 8003b1c:	4658      	mov	r0, fp
 8003b1e:	d107      	bne.n	8003b30 <_dtoa_r+0xac8>
 8003b20:	f000 fa2a 	bl	8003f78 <__multadd>
 8003b24:	4607      	mov	r7, r0
 8003b26:	4605      	mov	r5, r0
 8003b28:	9b07      	ldr	r3, [sp, #28]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	9307      	str	r3, [sp, #28]
 8003b2e:	e774      	b.n	8003a1a <_dtoa_r+0x9b2>
 8003b30:	f000 fa22 	bl	8003f78 <__multadd>
 8003b34:	4629      	mov	r1, r5
 8003b36:	4607      	mov	r7, r0
 8003b38:	2300      	movs	r3, #0
 8003b3a:	220a      	movs	r2, #10
 8003b3c:	4658      	mov	r0, fp
 8003b3e:	f000 fa1b 	bl	8003f78 <__multadd>
 8003b42:	4605      	mov	r5, r0
 8003b44:	e7f0      	b.n	8003b28 <_dtoa_r+0xac0>
 8003b46:	9b08      	ldr	r3, [sp, #32]
 8003b48:	2700      	movs	r7, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bfcc      	ite	gt
 8003b4e:	461e      	movgt	r6, r3
 8003b50:	2601      	movle	r6, #1
 8003b52:	4456      	add	r6, sl
 8003b54:	4649      	mov	r1, r9
 8003b56:	2201      	movs	r2, #1
 8003b58:	4658      	mov	r0, fp
 8003b5a:	f000 fbb7 	bl	80042cc <__lshift>
 8003b5e:	4621      	mov	r1, r4
 8003b60:	4681      	mov	r9, r0
 8003b62:	f000 fc1f 	bl	80043a4 <__mcmp>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	dcb0      	bgt.n	8003acc <_dtoa_r+0xa64>
 8003b6a:	d102      	bne.n	8003b72 <_dtoa_r+0xb0a>
 8003b6c:	f018 0f01 	tst.w	r8, #1
 8003b70:	d1ac      	bne.n	8003acc <_dtoa_r+0xa64>
 8003b72:	4633      	mov	r3, r6
 8003b74:	461e      	mov	r6, r3
 8003b76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003b7a:	2a30      	cmp	r2, #48	@ 0x30
 8003b7c:	d0fa      	beq.n	8003b74 <_dtoa_r+0xb0c>
 8003b7e:	e5be      	b.n	80036fe <_dtoa_r+0x696>
 8003b80:	459a      	cmp	sl, r3
 8003b82:	d1a4      	bne.n	8003ace <_dtoa_r+0xa66>
 8003b84:	9b04      	ldr	r3, [sp, #16]
 8003b86:	3301      	adds	r3, #1
 8003b88:	9304      	str	r3, [sp, #16]
 8003b8a:	2331      	movs	r3, #49	@ 0x31
 8003b8c:	f88a 3000 	strb.w	r3, [sl]
 8003b90:	e5b5      	b.n	80036fe <_dtoa_r+0x696>
 8003b92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003b94:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8003bf4 <_dtoa_r+0xb8c>
 8003b98:	b11b      	cbz	r3, 8003ba2 <_dtoa_r+0xb3a>
 8003b9a:	f10a 0308 	add.w	r3, sl, #8
 8003b9e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4650      	mov	r0, sl
 8003ba4:	b017      	add	sp, #92	@ 0x5c
 8003ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003baa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	f77f ae3d 	ble.w	800382c <_dtoa_r+0x7c4>
 8003bb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003bb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	e65b      	b.n	8003872 <_dtoa_r+0x80a>
 8003bba:	9b08      	ldr	r3, [sp, #32]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f77f aed6 	ble.w	800396e <_dtoa_r+0x906>
 8003bc2:	4656      	mov	r6, sl
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4648      	mov	r0, r9
 8003bc8:	f7ff f9c5 	bl	8002f56 <quorem>
 8003bcc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003bd0:	9b08      	ldr	r3, [sp, #32]
 8003bd2:	f806 8b01 	strb.w	r8, [r6], #1
 8003bd6:	eba6 020a 	sub.w	r2, r6, sl
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	ddb3      	ble.n	8003b46 <_dtoa_r+0xade>
 8003bde:	4649      	mov	r1, r9
 8003be0:	2300      	movs	r3, #0
 8003be2:	220a      	movs	r2, #10
 8003be4:	4658      	mov	r0, fp
 8003be6:	f000 f9c7 	bl	8003f78 <__multadd>
 8003bea:	4681      	mov	r9, r0
 8003bec:	e7ea      	b.n	8003bc4 <_dtoa_r+0xb5c>
 8003bee:	bf00      	nop
 8003bf0:	08004e92 	.word	0x08004e92
 8003bf4:	08004e16 	.word	0x08004e16

08003bf8 <malloc>:
 8003bf8:	4b02      	ldr	r3, [pc, #8]	@ (8003c04 <malloc+0xc>)
 8003bfa:	4601      	mov	r1, r0
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	f000 b825 	b.w	8003c4c <_malloc_r>
 8003c02:	bf00      	nop
 8003c04:	20000018 	.word	0x20000018

08003c08 <sbrk_aligned>:
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8003c48 <sbrk_aligned+0x40>)
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	6831      	ldr	r1, [r6, #0]
 8003c10:	4605      	mov	r5, r0
 8003c12:	b911      	cbnz	r1, 8003c1a <sbrk_aligned+0x12>
 8003c14:	f000 fd46 	bl	80046a4 <_sbrk_r>
 8003c18:	6030      	str	r0, [r6, #0]
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f000 fd41 	bl	80046a4 <_sbrk_r>
 8003c22:	1c43      	adds	r3, r0, #1
 8003c24:	d103      	bne.n	8003c2e <sbrk_aligned+0x26>
 8003c26:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	bd70      	pop	{r4, r5, r6, pc}
 8003c2e:	1cc4      	adds	r4, r0, #3
 8003c30:	f024 0403 	bic.w	r4, r4, #3
 8003c34:	42a0      	cmp	r0, r4
 8003c36:	d0f8      	beq.n	8003c2a <sbrk_aligned+0x22>
 8003c38:	1a21      	subs	r1, r4, r0
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	f000 fd32 	bl	80046a4 <_sbrk_r>
 8003c40:	3001      	adds	r0, #1
 8003c42:	d1f2      	bne.n	8003c2a <sbrk_aligned+0x22>
 8003c44:	e7ef      	b.n	8003c26 <sbrk_aligned+0x1e>
 8003c46:	bf00      	nop
 8003c48:	20000410 	.word	0x20000410

08003c4c <_malloc_r>:
 8003c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c50:	1ccd      	adds	r5, r1, #3
 8003c52:	f025 0503 	bic.w	r5, r5, #3
 8003c56:	3508      	adds	r5, #8
 8003c58:	2d0c      	cmp	r5, #12
 8003c5a:	bf38      	it	cc
 8003c5c:	250c      	movcc	r5, #12
 8003c5e:	2d00      	cmp	r5, #0
 8003c60:	4606      	mov	r6, r0
 8003c62:	db01      	blt.n	8003c68 <_malloc_r+0x1c>
 8003c64:	42a9      	cmp	r1, r5
 8003c66:	d904      	bls.n	8003c72 <_malloc_r+0x26>
 8003c68:	230c      	movs	r3, #12
 8003c6a:	6033      	str	r3, [r6, #0]
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d48 <_malloc_r+0xfc>
 8003c76:	f000 f911 	bl	8003e9c <__malloc_lock>
 8003c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c7e:	461c      	mov	r4, r3
 8003c80:	bb44      	cbnz	r4, 8003cd4 <_malloc_r+0x88>
 8003c82:	4629      	mov	r1, r5
 8003c84:	4630      	mov	r0, r6
 8003c86:	f7ff ffbf 	bl	8003c08 <sbrk_aligned>
 8003c8a:	1c43      	adds	r3, r0, #1
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	d158      	bne.n	8003d42 <_malloc_r+0xf6>
 8003c90:	f8d8 4000 	ldr.w	r4, [r8]
 8003c94:	4627      	mov	r7, r4
 8003c96:	2f00      	cmp	r7, #0
 8003c98:	d143      	bne.n	8003d22 <_malloc_r+0xd6>
 8003c9a:	2c00      	cmp	r4, #0
 8003c9c:	d04b      	beq.n	8003d36 <_malloc_r+0xea>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	4639      	mov	r1, r7
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	eb04 0903 	add.w	r9, r4, r3
 8003ca8:	f000 fcfc 	bl	80046a4 <_sbrk_r>
 8003cac:	4581      	cmp	r9, r0
 8003cae:	d142      	bne.n	8003d36 <_malloc_r+0xea>
 8003cb0:	6821      	ldr	r1, [r4, #0]
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	1a6d      	subs	r5, r5, r1
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	f7ff ffa6 	bl	8003c08 <sbrk_aligned>
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d03a      	beq.n	8003d36 <_malloc_r+0xea>
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	442b      	add	r3, r5
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	bb62      	cbnz	r2, 8003d28 <_malloc_r+0xdc>
 8003cce:	f8c8 7000 	str.w	r7, [r8]
 8003cd2:	e00f      	b.n	8003cf4 <_malloc_r+0xa8>
 8003cd4:	6822      	ldr	r2, [r4, #0]
 8003cd6:	1b52      	subs	r2, r2, r5
 8003cd8:	d420      	bmi.n	8003d1c <_malloc_r+0xd0>
 8003cda:	2a0b      	cmp	r2, #11
 8003cdc:	d917      	bls.n	8003d0e <_malloc_r+0xc2>
 8003cde:	1961      	adds	r1, r4, r5
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	6025      	str	r5, [r4, #0]
 8003ce4:	bf18      	it	ne
 8003ce6:	6059      	strne	r1, [r3, #4]
 8003ce8:	6863      	ldr	r3, [r4, #4]
 8003cea:	bf08      	it	eq
 8003cec:	f8c8 1000 	streq.w	r1, [r8]
 8003cf0:	5162      	str	r2, [r4, r5]
 8003cf2:	604b      	str	r3, [r1, #4]
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f000 f8d7 	bl	8003ea8 <__malloc_unlock>
 8003cfa:	f104 000b 	add.w	r0, r4, #11
 8003cfe:	1d23      	adds	r3, r4, #4
 8003d00:	f020 0007 	bic.w	r0, r0, #7
 8003d04:	1ac2      	subs	r2, r0, r3
 8003d06:	bf1c      	itt	ne
 8003d08:	1a1b      	subne	r3, r3, r0
 8003d0a:	50a3      	strne	r3, [r4, r2]
 8003d0c:	e7af      	b.n	8003c6e <_malloc_r+0x22>
 8003d0e:	6862      	ldr	r2, [r4, #4]
 8003d10:	42a3      	cmp	r3, r4
 8003d12:	bf0c      	ite	eq
 8003d14:	f8c8 2000 	streq.w	r2, [r8]
 8003d18:	605a      	strne	r2, [r3, #4]
 8003d1a:	e7eb      	b.n	8003cf4 <_malloc_r+0xa8>
 8003d1c:	4623      	mov	r3, r4
 8003d1e:	6864      	ldr	r4, [r4, #4]
 8003d20:	e7ae      	b.n	8003c80 <_malloc_r+0x34>
 8003d22:	463c      	mov	r4, r7
 8003d24:	687f      	ldr	r7, [r7, #4]
 8003d26:	e7b6      	b.n	8003c96 <_malloc_r+0x4a>
 8003d28:	461a      	mov	r2, r3
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	d1fb      	bne.n	8003d28 <_malloc_r+0xdc>
 8003d30:	2300      	movs	r3, #0
 8003d32:	6053      	str	r3, [r2, #4]
 8003d34:	e7de      	b.n	8003cf4 <_malloc_r+0xa8>
 8003d36:	230c      	movs	r3, #12
 8003d38:	4630      	mov	r0, r6
 8003d3a:	6033      	str	r3, [r6, #0]
 8003d3c:	f000 f8b4 	bl	8003ea8 <__malloc_unlock>
 8003d40:	e794      	b.n	8003c6c <_malloc_r+0x20>
 8003d42:	6005      	str	r5, [r0, #0]
 8003d44:	e7d6      	b.n	8003cf4 <_malloc_r+0xa8>
 8003d46:	bf00      	nop
 8003d48:	20000414 	.word	0x20000414

08003d4c <__sflush_r>:
 8003d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	0716      	lsls	r6, r2, #28
 8003d54:	4605      	mov	r5, r0
 8003d56:	460c      	mov	r4, r1
 8003d58:	d454      	bmi.n	8003e04 <__sflush_r+0xb8>
 8003d5a:	684b      	ldr	r3, [r1, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	dc02      	bgt.n	8003d66 <__sflush_r+0x1a>
 8003d60:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	dd48      	ble.n	8003df8 <__sflush_r+0xac>
 8003d66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d68:	2e00      	cmp	r6, #0
 8003d6a:	d045      	beq.n	8003df8 <__sflush_r+0xac>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003d72:	682f      	ldr	r7, [r5, #0]
 8003d74:	6a21      	ldr	r1, [r4, #32]
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	d030      	beq.n	8003ddc <__sflush_r+0x90>
 8003d7a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	0759      	lsls	r1, r3, #29
 8003d80:	d505      	bpl.n	8003d8e <__sflush_r+0x42>
 8003d82:	6863      	ldr	r3, [r4, #4]
 8003d84:	1ad2      	subs	r2, r2, r3
 8003d86:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d88:	b10b      	cbz	r3, 8003d8e <__sflush_r+0x42>
 8003d8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d8c:	1ad2      	subs	r2, r2, r3
 8003d8e:	2300      	movs	r3, #0
 8003d90:	4628      	mov	r0, r5
 8003d92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d94:	6a21      	ldr	r1, [r4, #32]
 8003d96:	47b0      	blx	r6
 8003d98:	1c43      	adds	r3, r0, #1
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	d106      	bne.n	8003dac <__sflush_r+0x60>
 8003d9e:	6829      	ldr	r1, [r5, #0]
 8003da0:	291d      	cmp	r1, #29
 8003da2:	d82b      	bhi.n	8003dfc <__sflush_r+0xb0>
 8003da4:	4a28      	ldr	r2, [pc, #160]	@ (8003e48 <__sflush_r+0xfc>)
 8003da6:	410a      	asrs	r2, r1
 8003da8:	07d6      	lsls	r6, r2, #31
 8003daa:	d427      	bmi.n	8003dfc <__sflush_r+0xb0>
 8003dac:	2200      	movs	r2, #0
 8003dae:	6062      	str	r2, [r4, #4]
 8003db0:	6922      	ldr	r2, [r4, #16]
 8003db2:	04d9      	lsls	r1, r3, #19
 8003db4:	6022      	str	r2, [r4, #0]
 8003db6:	d504      	bpl.n	8003dc2 <__sflush_r+0x76>
 8003db8:	1c42      	adds	r2, r0, #1
 8003dba:	d101      	bne.n	8003dc0 <__sflush_r+0x74>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	b903      	cbnz	r3, 8003dc2 <__sflush_r+0x76>
 8003dc0:	6560      	str	r0, [r4, #84]	@ 0x54
 8003dc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003dc4:	602f      	str	r7, [r5, #0]
 8003dc6:	b1b9      	cbz	r1, 8003df8 <__sflush_r+0xac>
 8003dc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003dcc:	4299      	cmp	r1, r3
 8003dce:	d002      	beq.n	8003dd6 <__sflush_r+0x8a>
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f000 fcc9 	bl	8004768 <_free_r>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003dda:	e00d      	b.n	8003df8 <__sflush_r+0xac>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	4628      	mov	r0, r5
 8003de0:	47b0      	blx	r6
 8003de2:	4602      	mov	r2, r0
 8003de4:	1c50      	adds	r0, r2, #1
 8003de6:	d1c9      	bne.n	8003d7c <__sflush_r+0x30>
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0c6      	beq.n	8003d7c <__sflush_r+0x30>
 8003dee:	2b1d      	cmp	r3, #29
 8003df0:	d001      	beq.n	8003df6 <__sflush_r+0xaa>
 8003df2:	2b16      	cmp	r3, #22
 8003df4:	d11d      	bne.n	8003e32 <__sflush_r+0xe6>
 8003df6:	602f      	str	r7, [r5, #0]
 8003df8:	2000      	movs	r0, #0
 8003dfa:	e021      	b.n	8003e40 <__sflush_r+0xf4>
 8003dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e00:	b21b      	sxth	r3, r3
 8003e02:	e01a      	b.n	8003e3a <__sflush_r+0xee>
 8003e04:	690f      	ldr	r7, [r1, #16]
 8003e06:	2f00      	cmp	r7, #0
 8003e08:	d0f6      	beq.n	8003df8 <__sflush_r+0xac>
 8003e0a:	0793      	lsls	r3, r2, #30
 8003e0c:	bf18      	it	ne
 8003e0e:	2300      	movne	r3, #0
 8003e10:	680e      	ldr	r6, [r1, #0]
 8003e12:	bf08      	it	eq
 8003e14:	694b      	ldreq	r3, [r1, #20]
 8003e16:	1bf6      	subs	r6, r6, r7
 8003e18:	600f      	str	r7, [r1, #0]
 8003e1a:	608b      	str	r3, [r1, #8]
 8003e1c:	2e00      	cmp	r6, #0
 8003e1e:	ddeb      	ble.n	8003df8 <__sflush_r+0xac>
 8003e20:	4633      	mov	r3, r6
 8003e22:	463a      	mov	r2, r7
 8003e24:	4628      	mov	r0, r5
 8003e26:	6a21      	ldr	r1, [r4, #32]
 8003e28:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003e2c:	47e0      	blx	ip
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	dc07      	bgt.n	8003e42 <__sflush_r+0xf6>
 8003e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e3e:	81a3      	strh	r3, [r4, #12]
 8003e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e42:	4407      	add	r7, r0
 8003e44:	1a36      	subs	r6, r6, r0
 8003e46:	e7e9      	b.n	8003e1c <__sflush_r+0xd0>
 8003e48:	dfbffffe 	.word	0xdfbffffe

08003e4c <_fflush_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	690b      	ldr	r3, [r1, #16]
 8003e50:	4605      	mov	r5, r0
 8003e52:	460c      	mov	r4, r1
 8003e54:	b913      	cbnz	r3, 8003e5c <_fflush_r+0x10>
 8003e56:	2500      	movs	r5, #0
 8003e58:	4628      	mov	r0, r5
 8003e5a:	bd38      	pop	{r3, r4, r5, pc}
 8003e5c:	b118      	cbz	r0, 8003e66 <_fflush_r+0x1a>
 8003e5e:	6a03      	ldr	r3, [r0, #32]
 8003e60:	b90b      	cbnz	r3, 8003e66 <_fflush_r+0x1a>
 8003e62:	f7fe fffb 	bl	8002e5c <__sinit>
 8003e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f3      	beq.n	8003e56 <_fflush_r+0xa>
 8003e6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003e70:	07d0      	lsls	r0, r2, #31
 8003e72:	d404      	bmi.n	8003e7e <_fflush_r+0x32>
 8003e74:	0599      	lsls	r1, r3, #22
 8003e76:	d402      	bmi.n	8003e7e <_fflush_r+0x32>
 8003e78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e7a:	f7ff f85c 	bl	8002f36 <__retarget_lock_acquire_recursive>
 8003e7e:	4628      	mov	r0, r5
 8003e80:	4621      	mov	r1, r4
 8003e82:	f7ff ff63 	bl	8003d4c <__sflush_r>
 8003e86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e88:	4605      	mov	r5, r0
 8003e8a:	07da      	lsls	r2, r3, #31
 8003e8c:	d4e4      	bmi.n	8003e58 <_fflush_r+0xc>
 8003e8e:	89a3      	ldrh	r3, [r4, #12]
 8003e90:	059b      	lsls	r3, r3, #22
 8003e92:	d4e1      	bmi.n	8003e58 <_fflush_r+0xc>
 8003e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e96:	f7ff f84f 	bl	8002f38 <__retarget_lock_release_recursive>
 8003e9a:	e7dd      	b.n	8003e58 <_fflush_r+0xc>

08003e9c <__malloc_lock>:
 8003e9c:	4801      	ldr	r0, [pc, #4]	@ (8003ea4 <__malloc_lock+0x8>)
 8003e9e:	f7ff b84a 	b.w	8002f36 <__retarget_lock_acquire_recursive>
 8003ea2:	bf00      	nop
 8003ea4:	2000040c 	.word	0x2000040c

08003ea8 <__malloc_unlock>:
 8003ea8:	4801      	ldr	r0, [pc, #4]	@ (8003eb0 <__malloc_unlock+0x8>)
 8003eaa:	f7ff b845 	b.w	8002f38 <__retarget_lock_release_recursive>
 8003eae:	bf00      	nop
 8003eb0:	2000040c 	.word	0x2000040c

08003eb4 <_Balloc>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	69c6      	ldr	r6, [r0, #28]
 8003eb8:	4604      	mov	r4, r0
 8003eba:	460d      	mov	r5, r1
 8003ebc:	b976      	cbnz	r6, 8003edc <_Balloc+0x28>
 8003ebe:	2010      	movs	r0, #16
 8003ec0:	f7ff fe9a 	bl	8003bf8 <malloc>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	61e0      	str	r0, [r4, #28]
 8003ec8:	b920      	cbnz	r0, 8003ed4 <_Balloc+0x20>
 8003eca:	216b      	movs	r1, #107	@ 0x6b
 8003ecc:	4b17      	ldr	r3, [pc, #92]	@ (8003f2c <_Balloc+0x78>)
 8003ece:	4818      	ldr	r0, [pc, #96]	@ (8003f30 <_Balloc+0x7c>)
 8003ed0:	f000 fc18 	bl	8004704 <__assert_func>
 8003ed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003ed8:	6006      	str	r6, [r0, #0]
 8003eda:	60c6      	str	r6, [r0, #12]
 8003edc:	69e6      	ldr	r6, [r4, #28]
 8003ede:	68f3      	ldr	r3, [r6, #12]
 8003ee0:	b183      	cbz	r3, 8003f04 <_Balloc+0x50>
 8003ee2:	69e3      	ldr	r3, [r4, #28]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003eea:	b9b8      	cbnz	r0, 8003f1c <_Balloc+0x68>
 8003eec:	2101      	movs	r1, #1
 8003eee:	fa01 f605 	lsl.w	r6, r1, r5
 8003ef2:	1d72      	adds	r2, r6, #5
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	0092      	lsls	r2, r2, #2
 8003ef8:	f000 fc22 	bl	8004740 <_calloc_r>
 8003efc:	b160      	cbz	r0, 8003f18 <_Balloc+0x64>
 8003efe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003f02:	e00e      	b.n	8003f22 <_Balloc+0x6e>
 8003f04:	2221      	movs	r2, #33	@ 0x21
 8003f06:	2104      	movs	r1, #4
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f000 fc19 	bl	8004740 <_calloc_r>
 8003f0e:	69e3      	ldr	r3, [r4, #28]
 8003f10:	60f0      	str	r0, [r6, #12]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e4      	bne.n	8003ee2 <_Balloc+0x2e>
 8003f18:	2000      	movs	r0, #0
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	6802      	ldr	r2, [r0, #0]
 8003f1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003f22:	2300      	movs	r3, #0
 8003f24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003f28:	e7f7      	b.n	8003f1a <_Balloc+0x66>
 8003f2a:	bf00      	nop
 8003f2c:	08004e23 	.word	0x08004e23
 8003f30:	08004ea3 	.word	0x08004ea3

08003f34 <_Bfree>:
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	69c6      	ldr	r6, [r0, #28]
 8003f38:	4605      	mov	r5, r0
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	b976      	cbnz	r6, 8003f5c <_Bfree+0x28>
 8003f3e:	2010      	movs	r0, #16
 8003f40:	f7ff fe5a 	bl	8003bf8 <malloc>
 8003f44:	4602      	mov	r2, r0
 8003f46:	61e8      	str	r0, [r5, #28]
 8003f48:	b920      	cbnz	r0, 8003f54 <_Bfree+0x20>
 8003f4a:	218f      	movs	r1, #143	@ 0x8f
 8003f4c:	4b08      	ldr	r3, [pc, #32]	@ (8003f70 <_Bfree+0x3c>)
 8003f4e:	4809      	ldr	r0, [pc, #36]	@ (8003f74 <_Bfree+0x40>)
 8003f50:	f000 fbd8 	bl	8004704 <__assert_func>
 8003f54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003f58:	6006      	str	r6, [r0, #0]
 8003f5a:	60c6      	str	r6, [r0, #12]
 8003f5c:	b13c      	cbz	r4, 8003f6e <_Bfree+0x3a>
 8003f5e:	69eb      	ldr	r3, [r5, #28]
 8003f60:	6862      	ldr	r2, [r4, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f68:	6021      	str	r1, [r4, #0]
 8003f6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	08004e23 	.word	0x08004e23
 8003f74:	08004ea3 	.word	0x08004ea3

08003f78 <__multadd>:
 8003f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7c:	4607      	mov	r7, r0
 8003f7e:	460c      	mov	r4, r1
 8003f80:	461e      	mov	r6, r3
 8003f82:	2000      	movs	r0, #0
 8003f84:	690d      	ldr	r5, [r1, #16]
 8003f86:	f101 0c14 	add.w	ip, r1, #20
 8003f8a:	f8dc 3000 	ldr.w	r3, [ip]
 8003f8e:	3001      	adds	r0, #1
 8003f90:	b299      	uxth	r1, r3
 8003f92:	fb02 6101 	mla	r1, r2, r1, r6
 8003f96:	0c1e      	lsrs	r6, r3, #16
 8003f98:	0c0b      	lsrs	r3, r1, #16
 8003f9a:	fb02 3306 	mla	r3, r2, r6, r3
 8003f9e:	b289      	uxth	r1, r1
 8003fa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003fa4:	4285      	cmp	r5, r0
 8003fa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003faa:	f84c 1b04 	str.w	r1, [ip], #4
 8003fae:	dcec      	bgt.n	8003f8a <__multadd+0x12>
 8003fb0:	b30e      	cbz	r6, 8003ff6 <__multadd+0x7e>
 8003fb2:	68a3      	ldr	r3, [r4, #8]
 8003fb4:	42ab      	cmp	r3, r5
 8003fb6:	dc19      	bgt.n	8003fec <__multadd+0x74>
 8003fb8:	6861      	ldr	r1, [r4, #4]
 8003fba:	4638      	mov	r0, r7
 8003fbc:	3101      	adds	r1, #1
 8003fbe:	f7ff ff79 	bl	8003eb4 <_Balloc>
 8003fc2:	4680      	mov	r8, r0
 8003fc4:	b928      	cbnz	r0, 8003fd2 <__multadd+0x5a>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	21ba      	movs	r1, #186	@ 0xba
 8003fca:	4b0c      	ldr	r3, [pc, #48]	@ (8003ffc <__multadd+0x84>)
 8003fcc:	480c      	ldr	r0, [pc, #48]	@ (8004000 <__multadd+0x88>)
 8003fce:	f000 fb99 	bl	8004704 <__assert_func>
 8003fd2:	6922      	ldr	r2, [r4, #16]
 8003fd4:	f104 010c 	add.w	r1, r4, #12
 8003fd8:	3202      	adds	r2, #2
 8003fda:	0092      	lsls	r2, r2, #2
 8003fdc:	300c      	adds	r0, #12
 8003fde:	f000 fb83 	bl	80046e8 <memcpy>
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	4638      	mov	r0, r7
 8003fe6:	f7ff ffa5 	bl	8003f34 <_Bfree>
 8003fea:	4644      	mov	r4, r8
 8003fec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003ff0:	3501      	adds	r5, #1
 8003ff2:	615e      	str	r6, [r3, #20]
 8003ff4:	6125      	str	r5, [r4, #16]
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ffc:	08004e92 	.word	0x08004e92
 8004000:	08004ea3 	.word	0x08004ea3

08004004 <__hi0bits>:
 8004004:	4603      	mov	r3, r0
 8004006:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800400a:	bf3a      	itte	cc
 800400c:	0403      	lslcc	r3, r0, #16
 800400e:	2010      	movcc	r0, #16
 8004010:	2000      	movcs	r0, #0
 8004012:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004016:	bf3c      	itt	cc
 8004018:	021b      	lslcc	r3, r3, #8
 800401a:	3008      	addcc	r0, #8
 800401c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004020:	bf3c      	itt	cc
 8004022:	011b      	lslcc	r3, r3, #4
 8004024:	3004      	addcc	r0, #4
 8004026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402a:	bf3c      	itt	cc
 800402c:	009b      	lslcc	r3, r3, #2
 800402e:	3002      	addcc	r0, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	db05      	blt.n	8004040 <__hi0bits+0x3c>
 8004034:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004038:	f100 0001 	add.w	r0, r0, #1
 800403c:	bf08      	it	eq
 800403e:	2020      	moveq	r0, #32
 8004040:	4770      	bx	lr

08004042 <__lo0bits>:
 8004042:	6803      	ldr	r3, [r0, #0]
 8004044:	4602      	mov	r2, r0
 8004046:	f013 0007 	ands.w	r0, r3, #7
 800404a:	d00b      	beq.n	8004064 <__lo0bits+0x22>
 800404c:	07d9      	lsls	r1, r3, #31
 800404e:	d421      	bmi.n	8004094 <__lo0bits+0x52>
 8004050:	0798      	lsls	r0, r3, #30
 8004052:	bf49      	itett	mi
 8004054:	085b      	lsrmi	r3, r3, #1
 8004056:	089b      	lsrpl	r3, r3, #2
 8004058:	2001      	movmi	r0, #1
 800405a:	6013      	strmi	r3, [r2, #0]
 800405c:	bf5c      	itt	pl
 800405e:	2002      	movpl	r0, #2
 8004060:	6013      	strpl	r3, [r2, #0]
 8004062:	4770      	bx	lr
 8004064:	b299      	uxth	r1, r3
 8004066:	b909      	cbnz	r1, 800406c <__lo0bits+0x2a>
 8004068:	2010      	movs	r0, #16
 800406a:	0c1b      	lsrs	r3, r3, #16
 800406c:	b2d9      	uxtb	r1, r3
 800406e:	b909      	cbnz	r1, 8004074 <__lo0bits+0x32>
 8004070:	3008      	adds	r0, #8
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	0719      	lsls	r1, r3, #28
 8004076:	bf04      	itt	eq
 8004078:	091b      	lsreq	r3, r3, #4
 800407a:	3004      	addeq	r0, #4
 800407c:	0799      	lsls	r1, r3, #30
 800407e:	bf04      	itt	eq
 8004080:	089b      	lsreq	r3, r3, #2
 8004082:	3002      	addeq	r0, #2
 8004084:	07d9      	lsls	r1, r3, #31
 8004086:	d403      	bmi.n	8004090 <__lo0bits+0x4e>
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	f100 0001 	add.w	r0, r0, #1
 800408e:	d003      	beq.n	8004098 <__lo0bits+0x56>
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	4770      	bx	lr
 8004094:	2000      	movs	r0, #0
 8004096:	4770      	bx	lr
 8004098:	2020      	movs	r0, #32
 800409a:	4770      	bx	lr

0800409c <__i2b>:
 800409c:	b510      	push	{r4, lr}
 800409e:	460c      	mov	r4, r1
 80040a0:	2101      	movs	r1, #1
 80040a2:	f7ff ff07 	bl	8003eb4 <_Balloc>
 80040a6:	4602      	mov	r2, r0
 80040a8:	b928      	cbnz	r0, 80040b6 <__i2b+0x1a>
 80040aa:	f240 1145 	movw	r1, #325	@ 0x145
 80040ae:	4b04      	ldr	r3, [pc, #16]	@ (80040c0 <__i2b+0x24>)
 80040b0:	4804      	ldr	r0, [pc, #16]	@ (80040c4 <__i2b+0x28>)
 80040b2:	f000 fb27 	bl	8004704 <__assert_func>
 80040b6:	2301      	movs	r3, #1
 80040b8:	6144      	str	r4, [r0, #20]
 80040ba:	6103      	str	r3, [r0, #16]
 80040bc:	bd10      	pop	{r4, pc}
 80040be:	bf00      	nop
 80040c0:	08004e92 	.word	0x08004e92
 80040c4:	08004ea3 	.word	0x08004ea3

080040c8 <__multiply>:
 80040c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040cc:	4614      	mov	r4, r2
 80040ce:	690a      	ldr	r2, [r1, #16]
 80040d0:	6923      	ldr	r3, [r4, #16]
 80040d2:	460f      	mov	r7, r1
 80040d4:	429a      	cmp	r2, r3
 80040d6:	bfa2      	ittt	ge
 80040d8:	4623      	movge	r3, r4
 80040da:	460c      	movge	r4, r1
 80040dc:	461f      	movge	r7, r3
 80040de:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80040e2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80040e6:	68a3      	ldr	r3, [r4, #8]
 80040e8:	6861      	ldr	r1, [r4, #4]
 80040ea:	eb0a 0609 	add.w	r6, sl, r9
 80040ee:	42b3      	cmp	r3, r6
 80040f0:	b085      	sub	sp, #20
 80040f2:	bfb8      	it	lt
 80040f4:	3101      	addlt	r1, #1
 80040f6:	f7ff fedd 	bl	8003eb4 <_Balloc>
 80040fa:	b930      	cbnz	r0, 800410a <__multiply+0x42>
 80040fc:	4602      	mov	r2, r0
 80040fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004102:	4b43      	ldr	r3, [pc, #268]	@ (8004210 <__multiply+0x148>)
 8004104:	4843      	ldr	r0, [pc, #268]	@ (8004214 <__multiply+0x14c>)
 8004106:	f000 fafd 	bl	8004704 <__assert_func>
 800410a:	f100 0514 	add.w	r5, r0, #20
 800410e:	462b      	mov	r3, r5
 8004110:	2200      	movs	r2, #0
 8004112:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004116:	4543      	cmp	r3, r8
 8004118:	d321      	bcc.n	800415e <__multiply+0x96>
 800411a:	f107 0114 	add.w	r1, r7, #20
 800411e:	f104 0214 	add.w	r2, r4, #20
 8004122:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004126:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800412a:	9302      	str	r3, [sp, #8]
 800412c:	1b13      	subs	r3, r2, r4
 800412e:	3b15      	subs	r3, #21
 8004130:	f023 0303 	bic.w	r3, r3, #3
 8004134:	3304      	adds	r3, #4
 8004136:	f104 0715 	add.w	r7, r4, #21
 800413a:	42ba      	cmp	r2, r7
 800413c:	bf38      	it	cc
 800413e:	2304      	movcc	r3, #4
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	9b02      	ldr	r3, [sp, #8]
 8004144:	9103      	str	r1, [sp, #12]
 8004146:	428b      	cmp	r3, r1
 8004148:	d80c      	bhi.n	8004164 <__multiply+0x9c>
 800414a:	2e00      	cmp	r6, #0
 800414c:	dd03      	ble.n	8004156 <__multiply+0x8e>
 800414e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004152:	2b00      	cmp	r3, #0
 8004154:	d05a      	beq.n	800420c <__multiply+0x144>
 8004156:	6106      	str	r6, [r0, #16]
 8004158:	b005      	add	sp, #20
 800415a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415e:	f843 2b04 	str.w	r2, [r3], #4
 8004162:	e7d8      	b.n	8004116 <__multiply+0x4e>
 8004164:	f8b1 a000 	ldrh.w	sl, [r1]
 8004168:	f1ba 0f00 	cmp.w	sl, #0
 800416c:	d023      	beq.n	80041b6 <__multiply+0xee>
 800416e:	46a9      	mov	r9, r5
 8004170:	f04f 0c00 	mov.w	ip, #0
 8004174:	f104 0e14 	add.w	lr, r4, #20
 8004178:	f85e 7b04 	ldr.w	r7, [lr], #4
 800417c:	f8d9 3000 	ldr.w	r3, [r9]
 8004180:	fa1f fb87 	uxth.w	fp, r7
 8004184:	b29b      	uxth	r3, r3
 8004186:	fb0a 330b 	mla	r3, sl, fp, r3
 800418a:	4463      	add	r3, ip
 800418c:	f8d9 c000 	ldr.w	ip, [r9]
 8004190:	0c3f      	lsrs	r7, r7, #16
 8004192:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004196:	fb0a c707 	mla	r7, sl, r7, ip
 800419a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800419e:	b29b      	uxth	r3, r3
 80041a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80041a4:	4572      	cmp	r2, lr
 80041a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80041aa:	f849 3b04 	str.w	r3, [r9], #4
 80041ae:	d8e3      	bhi.n	8004178 <__multiply+0xb0>
 80041b0:	9b01      	ldr	r3, [sp, #4]
 80041b2:	f845 c003 	str.w	ip, [r5, r3]
 80041b6:	9b03      	ldr	r3, [sp, #12]
 80041b8:	3104      	adds	r1, #4
 80041ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80041be:	f1b9 0f00 	cmp.w	r9, #0
 80041c2:	d021      	beq.n	8004208 <__multiply+0x140>
 80041c4:	46ae      	mov	lr, r5
 80041c6:	f04f 0a00 	mov.w	sl, #0
 80041ca:	682b      	ldr	r3, [r5, #0]
 80041cc:	f104 0c14 	add.w	ip, r4, #20
 80041d0:	f8bc b000 	ldrh.w	fp, [ip]
 80041d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	fb09 770b 	mla	r7, r9, fp, r7
 80041de:	4457      	add	r7, sl
 80041e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80041e4:	f84e 3b04 	str.w	r3, [lr], #4
 80041e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80041ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80041f0:	f8be 3000 	ldrh.w	r3, [lr]
 80041f4:	4562      	cmp	r2, ip
 80041f6:	fb09 330a 	mla	r3, r9, sl, r3
 80041fa:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80041fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004202:	d8e5      	bhi.n	80041d0 <__multiply+0x108>
 8004204:	9f01      	ldr	r7, [sp, #4]
 8004206:	51eb      	str	r3, [r5, r7]
 8004208:	3504      	adds	r5, #4
 800420a:	e79a      	b.n	8004142 <__multiply+0x7a>
 800420c:	3e01      	subs	r6, #1
 800420e:	e79c      	b.n	800414a <__multiply+0x82>
 8004210:	08004e92 	.word	0x08004e92
 8004214:	08004ea3 	.word	0x08004ea3

08004218 <__pow5mult>:
 8004218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800421c:	4615      	mov	r5, r2
 800421e:	f012 0203 	ands.w	r2, r2, #3
 8004222:	4607      	mov	r7, r0
 8004224:	460e      	mov	r6, r1
 8004226:	d007      	beq.n	8004238 <__pow5mult+0x20>
 8004228:	4c25      	ldr	r4, [pc, #148]	@ (80042c0 <__pow5mult+0xa8>)
 800422a:	3a01      	subs	r2, #1
 800422c:	2300      	movs	r3, #0
 800422e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004232:	f7ff fea1 	bl	8003f78 <__multadd>
 8004236:	4606      	mov	r6, r0
 8004238:	10ad      	asrs	r5, r5, #2
 800423a:	d03d      	beq.n	80042b8 <__pow5mult+0xa0>
 800423c:	69fc      	ldr	r4, [r7, #28]
 800423e:	b97c      	cbnz	r4, 8004260 <__pow5mult+0x48>
 8004240:	2010      	movs	r0, #16
 8004242:	f7ff fcd9 	bl	8003bf8 <malloc>
 8004246:	4602      	mov	r2, r0
 8004248:	61f8      	str	r0, [r7, #28]
 800424a:	b928      	cbnz	r0, 8004258 <__pow5mult+0x40>
 800424c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004250:	4b1c      	ldr	r3, [pc, #112]	@ (80042c4 <__pow5mult+0xac>)
 8004252:	481d      	ldr	r0, [pc, #116]	@ (80042c8 <__pow5mult+0xb0>)
 8004254:	f000 fa56 	bl	8004704 <__assert_func>
 8004258:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800425c:	6004      	str	r4, [r0, #0]
 800425e:	60c4      	str	r4, [r0, #12]
 8004260:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004264:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004268:	b94c      	cbnz	r4, 800427e <__pow5mult+0x66>
 800426a:	f240 2171 	movw	r1, #625	@ 0x271
 800426e:	4638      	mov	r0, r7
 8004270:	f7ff ff14 	bl	800409c <__i2b>
 8004274:	2300      	movs	r3, #0
 8004276:	4604      	mov	r4, r0
 8004278:	f8c8 0008 	str.w	r0, [r8, #8]
 800427c:	6003      	str	r3, [r0, #0]
 800427e:	f04f 0900 	mov.w	r9, #0
 8004282:	07eb      	lsls	r3, r5, #31
 8004284:	d50a      	bpl.n	800429c <__pow5mult+0x84>
 8004286:	4631      	mov	r1, r6
 8004288:	4622      	mov	r2, r4
 800428a:	4638      	mov	r0, r7
 800428c:	f7ff ff1c 	bl	80040c8 <__multiply>
 8004290:	4680      	mov	r8, r0
 8004292:	4631      	mov	r1, r6
 8004294:	4638      	mov	r0, r7
 8004296:	f7ff fe4d 	bl	8003f34 <_Bfree>
 800429a:	4646      	mov	r6, r8
 800429c:	106d      	asrs	r5, r5, #1
 800429e:	d00b      	beq.n	80042b8 <__pow5mult+0xa0>
 80042a0:	6820      	ldr	r0, [r4, #0]
 80042a2:	b938      	cbnz	r0, 80042b4 <__pow5mult+0x9c>
 80042a4:	4622      	mov	r2, r4
 80042a6:	4621      	mov	r1, r4
 80042a8:	4638      	mov	r0, r7
 80042aa:	f7ff ff0d 	bl	80040c8 <__multiply>
 80042ae:	6020      	str	r0, [r4, #0]
 80042b0:	f8c0 9000 	str.w	r9, [r0]
 80042b4:	4604      	mov	r4, r0
 80042b6:	e7e4      	b.n	8004282 <__pow5mult+0x6a>
 80042b8:	4630      	mov	r0, r6
 80042ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042be:	bf00      	nop
 80042c0:	08004efc 	.word	0x08004efc
 80042c4:	08004e23 	.word	0x08004e23
 80042c8:	08004ea3 	.word	0x08004ea3

080042cc <__lshift>:
 80042cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d0:	460c      	mov	r4, r1
 80042d2:	4607      	mov	r7, r0
 80042d4:	4691      	mov	r9, r2
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	6849      	ldr	r1, [r1, #4]
 80042da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80042de:	68a3      	ldr	r3, [r4, #8]
 80042e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80042e4:	f108 0601 	add.w	r6, r8, #1
 80042e8:	42b3      	cmp	r3, r6
 80042ea:	db0b      	blt.n	8004304 <__lshift+0x38>
 80042ec:	4638      	mov	r0, r7
 80042ee:	f7ff fde1 	bl	8003eb4 <_Balloc>
 80042f2:	4605      	mov	r5, r0
 80042f4:	b948      	cbnz	r0, 800430a <__lshift+0x3e>
 80042f6:	4602      	mov	r2, r0
 80042f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80042fc:	4b27      	ldr	r3, [pc, #156]	@ (800439c <__lshift+0xd0>)
 80042fe:	4828      	ldr	r0, [pc, #160]	@ (80043a0 <__lshift+0xd4>)
 8004300:	f000 fa00 	bl	8004704 <__assert_func>
 8004304:	3101      	adds	r1, #1
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	e7ee      	b.n	80042e8 <__lshift+0x1c>
 800430a:	2300      	movs	r3, #0
 800430c:	f100 0114 	add.w	r1, r0, #20
 8004310:	f100 0210 	add.w	r2, r0, #16
 8004314:	4618      	mov	r0, r3
 8004316:	4553      	cmp	r3, sl
 8004318:	db33      	blt.n	8004382 <__lshift+0xb6>
 800431a:	6920      	ldr	r0, [r4, #16]
 800431c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004320:	f104 0314 	add.w	r3, r4, #20
 8004324:	f019 091f 	ands.w	r9, r9, #31
 8004328:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800432c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004330:	d02b      	beq.n	800438a <__lshift+0xbe>
 8004332:	468a      	mov	sl, r1
 8004334:	2200      	movs	r2, #0
 8004336:	f1c9 0e20 	rsb	lr, r9, #32
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	fa00 f009 	lsl.w	r0, r0, r9
 8004340:	4310      	orrs	r0, r2
 8004342:	f84a 0b04 	str.w	r0, [sl], #4
 8004346:	f853 2b04 	ldr.w	r2, [r3], #4
 800434a:	459c      	cmp	ip, r3
 800434c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004350:	d8f3      	bhi.n	800433a <__lshift+0x6e>
 8004352:	ebac 0304 	sub.w	r3, ip, r4
 8004356:	3b15      	subs	r3, #21
 8004358:	f023 0303 	bic.w	r3, r3, #3
 800435c:	3304      	adds	r3, #4
 800435e:	f104 0015 	add.w	r0, r4, #21
 8004362:	4584      	cmp	ip, r0
 8004364:	bf38      	it	cc
 8004366:	2304      	movcc	r3, #4
 8004368:	50ca      	str	r2, [r1, r3]
 800436a:	b10a      	cbz	r2, 8004370 <__lshift+0xa4>
 800436c:	f108 0602 	add.w	r6, r8, #2
 8004370:	3e01      	subs	r6, #1
 8004372:	4638      	mov	r0, r7
 8004374:	4621      	mov	r1, r4
 8004376:	612e      	str	r6, [r5, #16]
 8004378:	f7ff fddc 	bl	8003f34 <_Bfree>
 800437c:	4628      	mov	r0, r5
 800437e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004382:	f842 0f04 	str.w	r0, [r2, #4]!
 8004386:	3301      	adds	r3, #1
 8004388:	e7c5      	b.n	8004316 <__lshift+0x4a>
 800438a:	3904      	subs	r1, #4
 800438c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004390:	459c      	cmp	ip, r3
 8004392:	f841 2f04 	str.w	r2, [r1, #4]!
 8004396:	d8f9      	bhi.n	800438c <__lshift+0xc0>
 8004398:	e7ea      	b.n	8004370 <__lshift+0xa4>
 800439a:	bf00      	nop
 800439c:	08004e92 	.word	0x08004e92
 80043a0:	08004ea3 	.word	0x08004ea3

080043a4 <__mcmp>:
 80043a4:	4603      	mov	r3, r0
 80043a6:	690a      	ldr	r2, [r1, #16]
 80043a8:	6900      	ldr	r0, [r0, #16]
 80043aa:	b530      	push	{r4, r5, lr}
 80043ac:	1a80      	subs	r0, r0, r2
 80043ae:	d10e      	bne.n	80043ce <__mcmp+0x2a>
 80043b0:	3314      	adds	r3, #20
 80043b2:	3114      	adds	r1, #20
 80043b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80043b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80043bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80043c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80043c4:	4295      	cmp	r5, r2
 80043c6:	d003      	beq.n	80043d0 <__mcmp+0x2c>
 80043c8:	d205      	bcs.n	80043d6 <__mcmp+0x32>
 80043ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043ce:	bd30      	pop	{r4, r5, pc}
 80043d0:	42a3      	cmp	r3, r4
 80043d2:	d3f3      	bcc.n	80043bc <__mcmp+0x18>
 80043d4:	e7fb      	b.n	80043ce <__mcmp+0x2a>
 80043d6:	2001      	movs	r0, #1
 80043d8:	e7f9      	b.n	80043ce <__mcmp+0x2a>
	...

080043dc <__mdiff>:
 80043dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e0:	4689      	mov	r9, r1
 80043e2:	4606      	mov	r6, r0
 80043e4:	4611      	mov	r1, r2
 80043e6:	4648      	mov	r0, r9
 80043e8:	4614      	mov	r4, r2
 80043ea:	f7ff ffdb 	bl	80043a4 <__mcmp>
 80043ee:	1e05      	subs	r5, r0, #0
 80043f0:	d112      	bne.n	8004418 <__mdiff+0x3c>
 80043f2:	4629      	mov	r1, r5
 80043f4:	4630      	mov	r0, r6
 80043f6:	f7ff fd5d 	bl	8003eb4 <_Balloc>
 80043fa:	4602      	mov	r2, r0
 80043fc:	b928      	cbnz	r0, 800440a <__mdiff+0x2e>
 80043fe:	f240 2137 	movw	r1, #567	@ 0x237
 8004402:	4b3e      	ldr	r3, [pc, #248]	@ (80044fc <__mdiff+0x120>)
 8004404:	483e      	ldr	r0, [pc, #248]	@ (8004500 <__mdiff+0x124>)
 8004406:	f000 f97d 	bl	8004704 <__assert_func>
 800440a:	2301      	movs	r3, #1
 800440c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004410:	4610      	mov	r0, r2
 8004412:	b003      	add	sp, #12
 8004414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004418:	bfbc      	itt	lt
 800441a:	464b      	movlt	r3, r9
 800441c:	46a1      	movlt	r9, r4
 800441e:	4630      	mov	r0, r6
 8004420:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004424:	bfba      	itte	lt
 8004426:	461c      	movlt	r4, r3
 8004428:	2501      	movlt	r5, #1
 800442a:	2500      	movge	r5, #0
 800442c:	f7ff fd42 	bl	8003eb4 <_Balloc>
 8004430:	4602      	mov	r2, r0
 8004432:	b918      	cbnz	r0, 800443c <__mdiff+0x60>
 8004434:	f240 2145 	movw	r1, #581	@ 0x245
 8004438:	4b30      	ldr	r3, [pc, #192]	@ (80044fc <__mdiff+0x120>)
 800443a:	e7e3      	b.n	8004404 <__mdiff+0x28>
 800443c:	f100 0b14 	add.w	fp, r0, #20
 8004440:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004444:	f109 0310 	add.w	r3, r9, #16
 8004448:	60c5      	str	r5, [r0, #12]
 800444a:	f04f 0c00 	mov.w	ip, #0
 800444e:	f109 0514 	add.w	r5, r9, #20
 8004452:	46d9      	mov	r9, fp
 8004454:	6926      	ldr	r6, [r4, #16]
 8004456:	f104 0e14 	add.w	lr, r4, #20
 800445a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800445e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004462:	9301      	str	r3, [sp, #4]
 8004464:	9b01      	ldr	r3, [sp, #4]
 8004466:	f85e 0b04 	ldr.w	r0, [lr], #4
 800446a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800446e:	b281      	uxth	r1, r0
 8004470:	9301      	str	r3, [sp, #4]
 8004472:	fa1f f38a 	uxth.w	r3, sl
 8004476:	1a5b      	subs	r3, r3, r1
 8004478:	0c00      	lsrs	r0, r0, #16
 800447a:	4463      	add	r3, ip
 800447c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004480:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004484:	b29b      	uxth	r3, r3
 8004486:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800448a:	4576      	cmp	r6, lr
 800448c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004490:	f849 3b04 	str.w	r3, [r9], #4
 8004494:	d8e6      	bhi.n	8004464 <__mdiff+0x88>
 8004496:	1b33      	subs	r3, r6, r4
 8004498:	3b15      	subs	r3, #21
 800449a:	f023 0303 	bic.w	r3, r3, #3
 800449e:	3415      	adds	r4, #21
 80044a0:	3304      	adds	r3, #4
 80044a2:	42a6      	cmp	r6, r4
 80044a4:	bf38      	it	cc
 80044a6:	2304      	movcc	r3, #4
 80044a8:	441d      	add	r5, r3
 80044aa:	445b      	add	r3, fp
 80044ac:	461e      	mov	r6, r3
 80044ae:	462c      	mov	r4, r5
 80044b0:	4544      	cmp	r4, r8
 80044b2:	d30e      	bcc.n	80044d2 <__mdiff+0xf6>
 80044b4:	f108 0103 	add.w	r1, r8, #3
 80044b8:	1b49      	subs	r1, r1, r5
 80044ba:	f021 0103 	bic.w	r1, r1, #3
 80044be:	3d03      	subs	r5, #3
 80044c0:	45a8      	cmp	r8, r5
 80044c2:	bf38      	it	cc
 80044c4:	2100      	movcc	r1, #0
 80044c6:	440b      	add	r3, r1
 80044c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80044cc:	b199      	cbz	r1, 80044f6 <__mdiff+0x11a>
 80044ce:	6117      	str	r7, [r2, #16]
 80044d0:	e79e      	b.n	8004410 <__mdiff+0x34>
 80044d2:	46e6      	mov	lr, ip
 80044d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80044d8:	fa1f fc81 	uxth.w	ip, r1
 80044dc:	44f4      	add	ip, lr
 80044de:	0c08      	lsrs	r0, r1, #16
 80044e0:	4471      	add	r1, lr
 80044e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80044e6:	b289      	uxth	r1, r1
 80044e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80044ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80044f0:	f846 1b04 	str.w	r1, [r6], #4
 80044f4:	e7dc      	b.n	80044b0 <__mdiff+0xd4>
 80044f6:	3f01      	subs	r7, #1
 80044f8:	e7e6      	b.n	80044c8 <__mdiff+0xec>
 80044fa:	bf00      	nop
 80044fc:	08004e92 	.word	0x08004e92
 8004500:	08004ea3 	.word	0x08004ea3

08004504 <__d2b>:
 8004504:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004508:	2101      	movs	r1, #1
 800450a:	4690      	mov	r8, r2
 800450c:	4699      	mov	r9, r3
 800450e:	9e08      	ldr	r6, [sp, #32]
 8004510:	f7ff fcd0 	bl	8003eb4 <_Balloc>
 8004514:	4604      	mov	r4, r0
 8004516:	b930      	cbnz	r0, 8004526 <__d2b+0x22>
 8004518:	4602      	mov	r2, r0
 800451a:	f240 310f 	movw	r1, #783	@ 0x30f
 800451e:	4b23      	ldr	r3, [pc, #140]	@ (80045ac <__d2b+0xa8>)
 8004520:	4823      	ldr	r0, [pc, #140]	@ (80045b0 <__d2b+0xac>)
 8004522:	f000 f8ef 	bl	8004704 <__assert_func>
 8004526:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800452a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800452e:	b10d      	cbz	r5, 8004534 <__d2b+0x30>
 8004530:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	f1b8 0300 	subs.w	r3, r8, #0
 800453a:	d024      	beq.n	8004586 <__d2b+0x82>
 800453c:	4668      	mov	r0, sp
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	f7ff fd7f 	bl	8004042 <__lo0bits>
 8004544:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004548:	b1d8      	cbz	r0, 8004582 <__d2b+0x7e>
 800454a:	f1c0 0320 	rsb	r3, r0, #32
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	430b      	orrs	r3, r1
 8004554:	40c2      	lsrs	r2, r0
 8004556:	6163      	str	r3, [r4, #20]
 8004558:	9201      	str	r2, [sp, #4]
 800455a:	9b01      	ldr	r3, [sp, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	bf0c      	ite	eq
 8004560:	2201      	moveq	r2, #1
 8004562:	2202      	movne	r2, #2
 8004564:	61a3      	str	r3, [r4, #24]
 8004566:	6122      	str	r2, [r4, #16]
 8004568:	b1ad      	cbz	r5, 8004596 <__d2b+0x92>
 800456a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800456e:	4405      	add	r5, r0
 8004570:	6035      	str	r5, [r6, #0]
 8004572:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004578:	6018      	str	r0, [r3, #0]
 800457a:	4620      	mov	r0, r4
 800457c:	b002      	add	sp, #8
 800457e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004582:	6161      	str	r1, [r4, #20]
 8004584:	e7e9      	b.n	800455a <__d2b+0x56>
 8004586:	a801      	add	r0, sp, #4
 8004588:	f7ff fd5b 	bl	8004042 <__lo0bits>
 800458c:	9b01      	ldr	r3, [sp, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	6163      	str	r3, [r4, #20]
 8004592:	3020      	adds	r0, #32
 8004594:	e7e7      	b.n	8004566 <__d2b+0x62>
 8004596:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800459a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800459e:	6030      	str	r0, [r6, #0]
 80045a0:	6918      	ldr	r0, [r3, #16]
 80045a2:	f7ff fd2f 	bl	8004004 <__hi0bits>
 80045a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80045aa:	e7e4      	b.n	8004576 <__d2b+0x72>
 80045ac:	08004e92 	.word	0x08004e92
 80045b0:	08004ea3 	.word	0x08004ea3

080045b4 <__sread>:
 80045b4:	b510      	push	{r4, lr}
 80045b6:	460c      	mov	r4, r1
 80045b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045bc:	f000 f860 	bl	8004680 <_read_r>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	bfab      	itete	ge
 80045c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80045c6:	89a3      	ldrhlt	r3, [r4, #12]
 80045c8:	181b      	addge	r3, r3, r0
 80045ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80045ce:	bfac      	ite	ge
 80045d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045d2:	81a3      	strhlt	r3, [r4, #12]
 80045d4:	bd10      	pop	{r4, pc}

080045d6 <__swrite>:
 80045d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045da:	461f      	mov	r7, r3
 80045dc:	898b      	ldrh	r3, [r1, #12]
 80045de:	4605      	mov	r5, r0
 80045e0:	05db      	lsls	r3, r3, #23
 80045e2:	460c      	mov	r4, r1
 80045e4:	4616      	mov	r6, r2
 80045e6:	d505      	bpl.n	80045f4 <__swrite+0x1e>
 80045e8:	2302      	movs	r3, #2
 80045ea:	2200      	movs	r2, #0
 80045ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f0:	f000 f834 	bl	800465c <_lseek_r>
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	4632      	mov	r2, r6
 80045f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	4628      	mov	r0, r5
 8004600:	463b      	mov	r3, r7
 8004602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800460a:	f000 b85b 	b.w	80046c4 <_write_r>

0800460e <__sseek>:
 800460e:	b510      	push	{r4, lr}
 8004610:	460c      	mov	r4, r1
 8004612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004616:	f000 f821 	bl	800465c <_lseek_r>
 800461a:	1c43      	adds	r3, r0, #1
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	bf15      	itete	ne
 8004620:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004622:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004626:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800462a:	81a3      	strheq	r3, [r4, #12]
 800462c:	bf18      	it	ne
 800462e:	81a3      	strhne	r3, [r4, #12]
 8004630:	bd10      	pop	{r4, pc}

08004632 <__sclose>:
 8004632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004636:	f000 b801 	b.w	800463c <_close_r>
	...

0800463c <_close_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	2300      	movs	r3, #0
 8004640:	4d05      	ldr	r5, [pc, #20]	@ (8004658 <_close_r+0x1c>)
 8004642:	4604      	mov	r4, r0
 8004644:	4608      	mov	r0, r1
 8004646:	602b      	str	r3, [r5, #0]
 8004648:	f7fc fced 	bl	8001026 <_close>
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	d102      	bne.n	8004656 <_close_r+0x1a>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	b103      	cbz	r3, 8004656 <_close_r+0x1a>
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	bd38      	pop	{r3, r4, r5, pc}
 8004658:	20000418 	.word	0x20000418

0800465c <_lseek_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	4604      	mov	r4, r0
 8004660:	4608      	mov	r0, r1
 8004662:	4611      	mov	r1, r2
 8004664:	2200      	movs	r2, #0
 8004666:	4d05      	ldr	r5, [pc, #20]	@ (800467c <_lseek_r+0x20>)
 8004668:	602a      	str	r2, [r5, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	f7fc fcff 	bl	800106e <_lseek>
 8004670:	1c43      	adds	r3, r0, #1
 8004672:	d102      	bne.n	800467a <_lseek_r+0x1e>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	b103      	cbz	r3, 800467a <_lseek_r+0x1e>
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	bd38      	pop	{r3, r4, r5, pc}
 800467c:	20000418 	.word	0x20000418

08004680 <_read_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4604      	mov	r4, r0
 8004684:	4608      	mov	r0, r1
 8004686:	4611      	mov	r1, r2
 8004688:	2200      	movs	r2, #0
 800468a:	4d05      	ldr	r5, [pc, #20]	@ (80046a0 <_read_r+0x20>)
 800468c:	602a      	str	r2, [r5, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	f7fc fc90 	bl	8000fb4 <_read>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_read_r+0x1e>
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	b103      	cbz	r3, 800469e <_read_r+0x1e>
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	20000418 	.word	0x20000418

080046a4 <_sbrk_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	2300      	movs	r3, #0
 80046a8:	4d05      	ldr	r5, [pc, #20]	@ (80046c0 <_sbrk_r+0x1c>)
 80046aa:	4604      	mov	r4, r0
 80046ac:	4608      	mov	r0, r1
 80046ae:	602b      	str	r3, [r5, #0]
 80046b0:	f7fc fcea 	bl	8001088 <_sbrk>
 80046b4:	1c43      	adds	r3, r0, #1
 80046b6:	d102      	bne.n	80046be <_sbrk_r+0x1a>
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	b103      	cbz	r3, 80046be <_sbrk_r+0x1a>
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	bd38      	pop	{r3, r4, r5, pc}
 80046c0:	20000418 	.word	0x20000418

080046c4 <_write_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	4604      	mov	r4, r0
 80046c8:	4608      	mov	r0, r1
 80046ca:	4611      	mov	r1, r2
 80046cc:	2200      	movs	r2, #0
 80046ce:	4d05      	ldr	r5, [pc, #20]	@ (80046e4 <_write_r+0x20>)
 80046d0:	602a      	str	r2, [r5, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	f7fc fc8b 	bl	8000fee <_write>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_write_r+0x1e>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_write_r+0x1e>
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	20000418 	.word	0x20000418

080046e8 <memcpy>:
 80046e8:	440a      	add	r2, r1
 80046ea:	4291      	cmp	r1, r2
 80046ec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80046f0:	d100      	bne.n	80046f4 <memcpy+0xc>
 80046f2:	4770      	bx	lr
 80046f4:	b510      	push	{r4, lr}
 80046f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046fa:	4291      	cmp	r1, r2
 80046fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004700:	d1f9      	bne.n	80046f6 <memcpy+0xe>
 8004702:	bd10      	pop	{r4, pc}

08004704 <__assert_func>:
 8004704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004706:	4614      	mov	r4, r2
 8004708:	461a      	mov	r2, r3
 800470a:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <__assert_func+0x2c>)
 800470c:	4605      	mov	r5, r0
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68d8      	ldr	r0, [r3, #12]
 8004712:	b954      	cbnz	r4, 800472a <__assert_func+0x26>
 8004714:	4b07      	ldr	r3, [pc, #28]	@ (8004734 <__assert_func+0x30>)
 8004716:	461c      	mov	r4, r3
 8004718:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800471c:	9100      	str	r1, [sp, #0]
 800471e:	462b      	mov	r3, r5
 8004720:	4905      	ldr	r1, [pc, #20]	@ (8004738 <__assert_func+0x34>)
 8004722:	f000 f87b 	bl	800481c <fiprintf>
 8004726:	f000 f898 	bl	800485a <abort>
 800472a:	4b04      	ldr	r3, [pc, #16]	@ (800473c <__assert_func+0x38>)
 800472c:	e7f4      	b.n	8004718 <__assert_func+0x14>
 800472e:	bf00      	nop
 8004730:	20000018 	.word	0x20000018
 8004734:	0800513e 	.word	0x0800513e
 8004738:	08005110 	.word	0x08005110
 800473c:	08005103 	.word	0x08005103

08004740 <_calloc_r>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	fba1 5402 	umull	r5, r4, r1, r2
 8004746:	b93c      	cbnz	r4, 8004758 <_calloc_r+0x18>
 8004748:	4629      	mov	r1, r5
 800474a:	f7ff fa7f 	bl	8003c4c <_malloc_r>
 800474e:	4606      	mov	r6, r0
 8004750:	b928      	cbnz	r0, 800475e <_calloc_r+0x1e>
 8004752:	2600      	movs	r6, #0
 8004754:	4630      	mov	r0, r6
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	220c      	movs	r2, #12
 800475a:	6002      	str	r2, [r0, #0]
 800475c:	e7f9      	b.n	8004752 <_calloc_r+0x12>
 800475e:	462a      	mov	r2, r5
 8004760:	4621      	mov	r1, r4
 8004762:	f7fe fbb1 	bl	8002ec8 <memset>
 8004766:	e7f5      	b.n	8004754 <_calloc_r+0x14>

08004768 <_free_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4605      	mov	r5, r0
 800476c:	2900      	cmp	r1, #0
 800476e:	d040      	beq.n	80047f2 <_free_r+0x8a>
 8004770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004774:	1f0c      	subs	r4, r1, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	bfb8      	it	lt
 800477a:	18e4      	addlt	r4, r4, r3
 800477c:	f7ff fb8e 	bl	8003e9c <__malloc_lock>
 8004780:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <_free_r+0x8c>)
 8004782:	6813      	ldr	r3, [r2, #0]
 8004784:	b933      	cbnz	r3, 8004794 <_free_r+0x2c>
 8004786:	6063      	str	r3, [r4, #4]
 8004788:	6014      	str	r4, [r2, #0]
 800478a:	4628      	mov	r0, r5
 800478c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004790:	f7ff bb8a 	b.w	8003ea8 <__malloc_unlock>
 8004794:	42a3      	cmp	r3, r4
 8004796:	d908      	bls.n	80047aa <_free_r+0x42>
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	1821      	adds	r1, r4, r0
 800479c:	428b      	cmp	r3, r1
 800479e:	bf01      	itttt	eq
 80047a0:	6819      	ldreq	r1, [r3, #0]
 80047a2:	685b      	ldreq	r3, [r3, #4]
 80047a4:	1809      	addeq	r1, r1, r0
 80047a6:	6021      	streq	r1, [r4, #0]
 80047a8:	e7ed      	b.n	8004786 <_free_r+0x1e>
 80047aa:	461a      	mov	r2, r3
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	b10b      	cbz	r3, 80047b4 <_free_r+0x4c>
 80047b0:	42a3      	cmp	r3, r4
 80047b2:	d9fa      	bls.n	80047aa <_free_r+0x42>
 80047b4:	6811      	ldr	r1, [r2, #0]
 80047b6:	1850      	adds	r0, r2, r1
 80047b8:	42a0      	cmp	r0, r4
 80047ba:	d10b      	bne.n	80047d4 <_free_r+0x6c>
 80047bc:	6820      	ldr	r0, [r4, #0]
 80047be:	4401      	add	r1, r0
 80047c0:	1850      	adds	r0, r2, r1
 80047c2:	4283      	cmp	r3, r0
 80047c4:	6011      	str	r1, [r2, #0]
 80047c6:	d1e0      	bne.n	800478a <_free_r+0x22>
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4408      	add	r0, r1
 80047ce:	6010      	str	r0, [r2, #0]
 80047d0:	6053      	str	r3, [r2, #4]
 80047d2:	e7da      	b.n	800478a <_free_r+0x22>
 80047d4:	d902      	bls.n	80047dc <_free_r+0x74>
 80047d6:	230c      	movs	r3, #12
 80047d8:	602b      	str	r3, [r5, #0]
 80047da:	e7d6      	b.n	800478a <_free_r+0x22>
 80047dc:	6820      	ldr	r0, [r4, #0]
 80047de:	1821      	adds	r1, r4, r0
 80047e0:	428b      	cmp	r3, r1
 80047e2:	bf01      	itttt	eq
 80047e4:	6819      	ldreq	r1, [r3, #0]
 80047e6:	685b      	ldreq	r3, [r3, #4]
 80047e8:	1809      	addeq	r1, r1, r0
 80047ea:	6021      	streq	r1, [r4, #0]
 80047ec:	6063      	str	r3, [r4, #4]
 80047ee:	6054      	str	r4, [r2, #4]
 80047f0:	e7cb      	b.n	800478a <_free_r+0x22>
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	20000414 	.word	0x20000414

080047f8 <__ascii_mbtowc>:
 80047f8:	b082      	sub	sp, #8
 80047fa:	b901      	cbnz	r1, 80047fe <__ascii_mbtowc+0x6>
 80047fc:	a901      	add	r1, sp, #4
 80047fe:	b142      	cbz	r2, 8004812 <__ascii_mbtowc+0x1a>
 8004800:	b14b      	cbz	r3, 8004816 <__ascii_mbtowc+0x1e>
 8004802:	7813      	ldrb	r3, [r2, #0]
 8004804:	600b      	str	r3, [r1, #0]
 8004806:	7812      	ldrb	r2, [r2, #0]
 8004808:	1e10      	subs	r0, r2, #0
 800480a:	bf18      	it	ne
 800480c:	2001      	movne	r0, #1
 800480e:	b002      	add	sp, #8
 8004810:	4770      	bx	lr
 8004812:	4610      	mov	r0, r2
 8004814:	e7fb      	b.n	800480e <__ascii_mbtowc+0x16>
 8004816:	f06f 0001 	mvn.w	r0, #1
 800481a:	e7f8      	b.n	800480e <__ascii_mbtowc+0x16>

0800481c <fiprintf>:
 800481c:	b40e      	push	{r1, r2, r3}
 800481e:	b503      	push	{r0, r1, lr}
 8004820:	4601      	mov	r1, r0
 8004822:	ab03      	add	r3, sp, #12
 8004824:	4805      	ldr	r0, [pc, #20]	@ (800483c <fiprintf+0x20>)
 8004826:	f853 2b04 	ldr.w	r2, [r3], #4
 800482a:	6800      	ldr	r0, [r0, #0]
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	f000 f843 	bl	80048b8 <_vfiprintf_r>
 8004832:	b002      	add	sp, #8
 8004834:	f85d eb04 	ldr.w	lr, [sp], #4
 8004838:	b003      	add	sp, #12
 800483a:	4770      	bx	lr
 800483c:	20000018 	.word	0x20000018

08004840 <__ascii_wctomb>:
 8004840:	4603      	mov	r3, r0
 8004842:	4608      	mov	r0, r1
 8004844:	b141      	cbz	r1, 8004858 <__ascii_wctomb+0x18>
 8004846:	2aff      	cmp	r2, #255	@ 0xff
 8004848:	d904      	bls.n	8004854 <__ascii_wctomb+0x14>
 800484a:	228a      	movs	r2, #138	@ 0x8a
 800484c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	4770      	bx	lr
 8004854:	2001      	movs	r0, #1
 8004856:	700a      	strb	r2, [r1, #0]
 8004858:	4770      	bx	lr

0800485a <abort>:
 800485a:	2006      	movs	r0, #6
 800485c:	b508      	push	{r3, lr}
 800485e:	f000 fa83 	bl	8004d68 <raise>
 8004862:	2001      	movs	r0, #1
 8004864:	f7fc fb9b 	bl	8000f9e <_exit>

08004868 <__sfputc_r>:
 8004868:	6893      	ldr	r3, [r2, #8]
 800486a:	b410      	push	{r4}
 800486c:	3b01      	subs	r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	6093      	str	r3, [r2, #8]
 8004872:	da07      	bge.n	8004884 <__sfputc_r+0x1c>
 8004874:	6994      	ldr	r4, [r2, #24]
 8004876:	42a3      	cmp	r3, r4
 8004878:	db01      	blt.n	800487e <__sfputc_r+0x16>
 800487a:	290a      	cmp	r1, #10
 800487c:	d102      	bne.n	8004884 <__sfputc_r+0x1c>
 800487e:	bc10      	pop	{r4}
 8004880:	f000 b932 	b.w	8004ae8 <__swbuf_r>
 8004884:	6813      	ldr	r3, [r2, #0]
 8004886:	1c58      	adds	r0, r3, #1
 8004888:	6010      	str	r0, [r2, #0]
 800488a:	7019      	strb	r1, [r3, #0]
 800488c:	4608      	mov	r0, r1
 800488e:	bc10      	pop	{r4}
 8004890:	4770      	bx	lr

08004892 <__sfputs_r>:
 8004892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004894:	4606      	mov	r6, r0
 8004896:	460f      	mov	r7, r1
 8004898:	4614      	mov	r4, r2
 800489a:	18d5      	adds	r5, r2, r3
 800489c:	42ac      	cmp	r4, r5
 800489e:	d101      	bne.n	80048a4 <__sfputs_r+0x12>
 80048a0:	2000      	movs	r0, #0
 80048a2:	e007      	b.n	80048b4 <__sfputs_r+0x22>
 80048a4:	463a      	mov	r2, r7
 80048a6:	4630      	mov	r0, r6
 80048a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ac:	f7ff ffdc 	bl	8004868 <__sfputc_r>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d1f3      	bne.n	800489c <__sfputs_r+0xa>
 80048b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048b8 <_vfiprintf_r>:
 80048b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048bc:	460d      	mov	r5, r1
 80048be:	4614      	mov	r4, r2
 80048c0:	4698      	mov	r8, r3
 80048c2:	4606      	mov	r6, r0
 80048c4:	b09d      	sub	sp, #116	@ 0x74
 80048c6:	b118      	cbz	r0, 80048d0 <_vfiprintf_r+0x18>
 80048c8:	6a03      	ldr	r3, [r0, #32]
 80048ca:	b90b      	cbnz	r3, 80048d0 <_vfiprintf_r+0x18>
 80048cc:	f7fe fac6 	bl	8002e5c <__sinit>
 80048d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048d2:	07d9      	lsls	r1, r3, #31
 80048d4:	d405      	bmi.n	80048e2 <_vfiprintf_r+0x2a>
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	059a      	lsls	r2, r3, #22
 80048da:	d402      	bmi.n	80048e2 <_vfiprintf_r+0x2a>
 80048dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048de:	f7fe fb2a 	bl	8002f36 <__retarget_lock_acquire_recursive>
 80048e2:	89ab      	ldrh	r3, [r5, #12]
 80048e4:	071b      	lsls	r3, r3, #28
 80048e6:	d501      	bpl.n	80048ec <_vfiprintf_r+0x34>
 80048e8:	692b      	ldr	r3, [r5, #16]
 80048ea:	b99b      	cbnz	r3, 8004914 <_vfiprintf_r+0x5c>
 80048ec:	4629      	mov	r1, r5
 80048ee:	4630      	mov	r0, r6
 80048f0:	f000 f938 	bl	8004b64 <__swsetup_r>
 80048f4:	b170      	cbz	r0, 8004914 <_vfiprintf_r+0x5c>
 80048f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048f8:	07dc      	lsls	r4, r3, #31
 80048fa:	d504      	bpl.n	8004906 <_vfiprintf_r+0x4e>
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004900:	b01d      	add	sp, #116	@ 0x74
 8004902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004906:	89ab      	ldrh	r3, [r5, #12]
 8004908:	0598      	lsls	r0, r3, #22
 800490a:	d4f7      	bmi.n	80048fc <_vfiprintf_r+0x44>
 800490c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800490e:	f7fe fb13 	bl	8002f38 <__retarget_lock_release_recursive>
 8004912:	e7f3      	b.n	80048fc <_vfiprintf_r+0x44>
 8004914:	2300      	movs	r3, #0
 8004916:	9309      	str	r3, [sp, #36]	@ 0x24
 8004918:	2320      	movs	r3, #32
 800491a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800491e:	2330      	movs	r3, #48	@ 0x30
 8004920:	f04f 0901 	mov.w	r9, #1
 8004924:	f8cd 800c 	str.w	r8, [sp, #12]
 8004928:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004ad4 <_vfiprintf_r+0x21c>
 800492c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004930:	4623      	mov	r3, r4
 8004932:	469a      	mov	sl, r3
 8004934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004938:	b10a      	cbz	r2, 800493e <_vfiprintf_r+0x86>
 800493a:	2a25      	cmp	r2, #37	@ 0x25
 800493c:	d1f9      	bne.n	8004932 <_vfiprintf_r+0x7a>
 800493e:	ebba 0b04 	subs.w	fp, sl, r4
 8004942:	d00b      	beq.n	800495c <_vfiprintf_r+0xa4>
 8004944:	465b      	mov	r3, fp
 8004946:	4622      	mov	r2, r4
 8004948:	4629      	mov	r1, r5
 800494a:	4630      	mov	r0, r6
 800494c:	f7ff ffa1 	bl	8004892 <__sfputs_r>
 8004950:	3001      	adds	r0, #1
 8004952:	f000 80a7 	beq.w	8004aa4 <_vfiprintf_r+0x1ec>
 8004956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004958:	445a      	add	r2, fp
 800495a:	9209      	str	r2, [sp, #36]	@ 0x24
 800495c:	f89a 3000 	ldrb.w	r3, [sl]
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 809f 	beq.w	8004aa4 <_vfiprintf_r+0x1ec>
 8004966:	2300      	movs	r3, #0
 8004968:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800496c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004970:	f10a 0a01 	add.w	sl, sl, #1
 8004974:	9304      	str	r3, [sp, #16]
 8004976:	9307      	str	r3, [sp, #28]
 8004978:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800497c:	931a      	str	r3, [sp, #104]	@ 0x68
 800497e:	4654      	mov	r4, sl
 8004980:	2205      	movs	r2, #5
 8004982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004986:	4853      	ldr	r0, [pc, #332]	@ (8004ad4 <_vfiprintf_r+0x21c>)
 8004988:	f7fe fad7 	bl	8002f3a <memchr>
 800498c:	9a04      	ldr	r2, [sp, #16]
 800498e:	b9d8      	cbnz	r0, 80049c8 <_vfiprintf_r+0x110>
 8004990:	06d1      	lsls	r1, r2, #27
 8004992:	bf44      	itt	mi
 8004994:	2320      	movmi	r3, #32
 8004996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800499a:	0713      	lsls	r3, r2, #28
 800499c:	bf44      	itt	mi
 800499e:	232b      	movmi	r3, #43	@ 0x2b
 80049a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049a4:	f89a 3000 	ldrb.w	r3, [sl]
 80049a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80049aa:	d015      	beq.n	80049d8 <_vfiprintf_r+0x120>
 80049ac:	4654      	mov	r4, sl
 80049ae:	2000      	movs	r0, #0
 80049b0:	f04f 0c0a 	mov.w	ip, #10
 80049b4:	9a07      	ldr	r2, [sp, #28]
 80049b6:	4621      	mov	r1, r4
 80049b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049bc:	3b30      	subs	r3, #48	@ 0x30
 80049be:	2b09      	cmp	r3, #9
 80049c0:	d94b      	bls.n	8004a5a <_vfiprintf_r+0x1a2>
 80049c2:	b1b0      	cbz	r0, 80049f2 <_vfiprintf_r+0x13a>
 80049c4:	9207      	str	r2, [sp, #28]
 80049c6:	e014      	b.n	80049f2 <_vfiprintf_r+0x13a>
 80049c8:	eba0 0308 	sub.w	r3, r0, r8
 80049cc:	fa09 f303 	lsl.w	r3, r9, r3
 80049d0:	4313      	orrs	r3, r2
 80049d2:	46a2      	mov	sl, r4
 80049d4:	9304      	str	r3, [sp, #16]
 80049d6:	e7d2      	b.n	800497e <_vfiprintf_r+0xc6>
 80049d8:	9b03      	ldr	r3, [sp, #12]
 80049da:	1d19      	adds	r1, r3, #4
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	9103      	str	r1, [sp, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bfbb      	ittet	lt
 80049e4:	425b      	neglt	r3, r3
 80049e6:	f042 0202 	orrlt.w	r2, r2, #2
 80049ea:	9307      	strge	r3, [sp, #28]
 80049ec:	9307      	strlt	r3, [sp, #28]
 80049ee:	bfb8      	it	lt
 80049f0:	9204      	strlt	r2, [sp, #16]
 80049f2:	7823      	ldrb	r3, [r4, #0]
 80049f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80049f6:	d10a      	bne.n	8004a0e <_vfiprintf_r+0x156>
 80049f8:	7863      	ldrb	r3, [r4, #1]
 80049fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80049fc:	d132      	bne.n	8004a64 <_vfiprintf_r+0x1ac>
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	3402      	adds	r4, #2
 8004a02:	1d1a      	adds	r2, r3, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	9203      	str	r2, [sp, #12]
 8004a08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a0c:	9305      	str	r3, [sp, #20]
 8004a0e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004ad8 <_vfiprintf_r+0x220>
 8004a12:	2203      	movs	r2, #3
 8004a14:	4650      	mov	r0, sl
 8004a16:	7821      	ldrb	r1, [r4, #0]
 8004a18:	f7fe fa8f 	bl	8002f3a <memchr>
 8004a1c:	b138      	cbz	r0, 8004a2e <_vfiprintf_r+0x176>
 8004a1e:	2240      	movs	r2, #64	@ 0x40
 8004a20:	9b04      	ldr	r3, [sp, #16]
 8004a22:	eba0 000a 	sub.w	r0, r0, sl
 8004a26:	4082      	lsls	r2, r0
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	3401      	adds	r4, #1
 8004a2c:	9304      	str	r3, [sp, #16]
 8004a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a32:	2206      	movs	r2, #6
 8004a34:	4829      	ldr	r0, [pc, #164]	@ (8004adc <_vfiprintf_r+0x224>)
 8004a36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a3a:	f7fe fa7e 	bl	8002f3a <memchr>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d03f      	beq.n	8004ac2 <_vfiprintf_r+0x20a>
 8004a42:	4b27      	ldr	r3, [pc, #156]	@ (8004ae0 <_vfiprintf_r+0x228>)
 8004a44:	bb1b      	cbnz	r3, 8004a8e <_vfiprintf_r+0x1d6>
 8004a46:	9b03      	ldr	r3, [sp, #12]
 8004a48:	3307      	adds	r3, #7
 8004a4a:	f023 0307 	bic.w	r3, r3, #7
 8004a4e:	3308      	adds	r3, #8
 8004a50:	9303      	str	r3, [sp, #12]
 8004a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a54:	443b      	add	r3, r7
 8004a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a58:	e76a      	b.n	8004930 <_vfiprintf_r+0x78>
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a62:	e7a8      	b.n	80049b6 <_vfiprintf_r+0xfe>
 8004a64:	2300      	movs	r3, #0
 8004a66:	f04f 0c0a 	mov.w	ip, #10
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	3401      	adds	r4, #1
 8004a6e:	9305      	str	r3, [sp, #20]
 8004a70:	4620      	mov	r0, r4
 8004a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a76:	3a30      	subs	r2, #48	@ 0x30
 8004a78:	2a09      	cmp	r2, #9
 8004a7a:	d903      	bls.n	8004a84 <_vfiprintf_r+0x1cc>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0c6      	beq.n	8004a0e <_vfiprintf_r+0x156>
 8004a80:	9105      	str	r1, [sp, #20]
 8004a82:	e7c4      	b.n	8004a0e <_vfiprintf_r+0x156>
 8004a84:	4604      	mov	r4, r0
 8004a86:	2301      	movs	r3, #1
 8004a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a8c:	e7f0      	b.n	8004a70 <_vfiprintf_r+0x1b8>
 8004a8e:	ab03      	add	r3, sp, #12
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	462a      	mov	r2, r5
 8004a94:	4630      	mov	r0, r6
 8004a96:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <_vfiprintf_r+0x22c>)
 8004a98:	a904      	add	r1, sp, #16
 8004a9a:	f7fd fd95 	bl	80025c8 <_printf_float>
 8004a9e:	4607      	mov	r7, r0
 8004aa0:	1c78      	adds	r0, r7, #1
 8004aa2:	d1d6      	bne.n	8004a52 <_vfiprintf_r+0x19a>
 8004aa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004aa6:	07d9      	lsls	r1, r3, #31
 8004aa8:	d405      	bmi.n	8004ab6 <_vfiprintf_r+0x1fe>
 8004aaa:	89ab      	ldrh	r3, [r5, #12]
 8004aac:	059a      	lsls	r2, r3, #22
 8004aae:	d402      	bmi.n	8004ab6 <_vfiprintf_r+0x1fe>
 8004ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ab2:	f7fe fa41 	bl	8002f38 <__retarget_lock_release_recursive>
 8004ab6:	89ab      	ldrh	r3, [r5, #12]
 8004ab8:	065b      	lsls	r3, r3, #25
 8004aba:	f53f af1f 	bmi.w	80048fc <_vfiprintf_r+0x44>
 8004abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ac0:	e71e      	b.n	8004900 <_vfiprintf_r+0x48>
 8004ac2:	ab03      	add	r3, sp, #12
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	462a      	mov	r2, r5
 8004ac8:	4630      	mov	r0, r6
 8004aca:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <_vfiprintf_r+0x22c>)
 8004acc:	a904      	add	r1, sp, #16
 8004ace:	f7fe f819 	bl	8002b04 <_printf_i>
 8004ad2:	e7e4      	b.n	8004a9e <_vfiprintf_r+0x1e6>
 8004ad4:	0800513f 	.word	0x0800513f
 8004ad8:	08005145 	.word	0x08005145
 8004adc:	08005149 	.word	0x08005149
 8004ae0:	080025c9 	.word	0x080025c9
 8004ae4:	08004893 	.word	0x08004893

08004ae8 <__swbuf_r>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	460e      	mov	r6, r1
 8004aec:	4614      	mov	r4, r2
 8004aee:	4605      	mov	r5, r0
 8004af0:	b118      	cbz	r0, 8004afa <__swbuf_r+0x12>
 8004af2:	6a03      	ldr	r3, [r0, #32]
 8004af4:	b90b      	cbnz	r3, 8004afa <__swbuf_r+0x12>
 8004af6:	f7fe f9b1 	bl	8002e5c <__sinit>
 8004afa:	69a3      	ldr	r3, [r4, #24]
 8004afc:	60a3      	str	r3, [r4, #8]
 8004afe:	89a3      	ldrh	r3, [r4, #12]
 8004b00:	071a      	lsls	r2, r3, #28
 8004b02:	d501      	bpl.n	8004b08 <__swbuf_r+0x20>
 8004b04:	6923      	ldr	r3, [r4, #16]
 8004b06:	b943      	cbnz	r3, 8004b1a <__swbuf_r+0x32>
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 f82a 	bl	8004b64 <__swsetup_r>
 8004b10:	b118      	cbz	r0, 8004b1a <__swbuf_r+0x32>
 8004b12:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004b16:	4638      	mov	r0, r7
 8004b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	6922      	ldr	r2, [r4, #16]
 8004b1e:	b2f6      	uxtb	r6, r6
 8004b20:	1a98      	subs	r0, r3, r2
 8004b22:	6963      	ldr	r3, [r4, #20]
 8004b24:	4637      	mov	r7, r6
 8004b26:	4283      	cmp	r3, r0
 8004b28:	dc05      	bgt.n	8004b36 <__swbuf_r+0x4e>
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f7ff f98d 	bl	8003e4c <_fflush_r>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d1ed      	bne.n	8004b12 <__swbuf_r+0x2a>
 8004b36:	68a3      	ldr	r3, [r4, #8]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	60a3      	str	r3, [r4, #8]
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	6022      	str	r2, [r4, #0]
 8004b42:	701e      	strb	r6, [r3, #0]
 8004b44:	6962      	ldr	r2, [r4, #20]
 8004b46:	1c43      	adds	r3, r0, #1
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d004      	beq.n	8004b56 <__swbuf_r+0x6e>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	07db      	lsls	r3, r3, #31
 8004b50:	d5e1      	bpl.n	8004b16 <__swbuf_r+0x2e>
 8004b52:	2e0a      	cmp	r6, #10
 8004b54:	d1df      	bne.n	8004b16 <__swbuf_r+0x2e>
 8004b56:	4621      	mov	r1, r4
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f7ff f977 	bl	8003e4c <_fflush_r>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d0d9      	beq.n	8004b16 <__swbuf_r+0x2e>
 8004b62:	e7d6      	b.n	8004b12 <__swbuf_r+0x2a>

08004b64 <__swsetup_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4b29      	ldr	r3, [pc, #164]	@ (8004c0c <__swsetup_r+0xa8>)
 8004b68:	4605      	mov	r5, r0
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	b118      	cbz	r0, 8004b78 <__swsetup_r+0x14>
 8004b70:	6a03      	ldr	r3, [r0, #32]
 8004b72:	b90b      	cbnz	r3, 8004b78 <__swsetup_r+0x14>
 8004b74:	f7fe f972 	bl	8002e5c <__sinit>
 8004b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b7c:	0719      	lsls	r1, r3, #28
 8004b7e:	d422      	bmi.n	8004bc6 <__swsetup_r+0x62>
 8004b80:	06da      	lsls	r2, r3, #27
 8004b82:	d407      	bmi.n	8004b94 <__swsetup_r+0x30>
 8004b84:	2209      	movs	r2, #9
 8004b86:	602a      	str	r2, [r5, #0]
 8004b88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b90:	81a3      	strh	r3, [r4, #12]
 8004b92:	e033      	b.n	8004bfc <__swsetup_r+0x98>
 8004b94:	0758      	lsls	r0, r3, #29
 8004b96:	d512      	bpl.n	8004bbe <__swsetup_r+0x5a>
 8004b98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b9a:	b141      	cbz	r1, 8004bae <__swsetup_r+0x4a>
 8004b9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ba0:	4299      	cmp	r1, r3
 8004ba2:	d002      	beq.n	8004baa <__swsetup_r+0x46>
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f7ff fddf 	bl	8004768 <_free_r>
 8004baa:	2300      	movs	r3, #0
 8004bac:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004bb4:	81a3      	strh	r3, [r4, #12]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6063      	str	r3, [r4, #4]
 8004bba:	6923      	ldr	r3, [r4, #16]
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	f043 0308 	orr.w	r3, r3, #8
 8004bc4:	81a3      	strh	r3, [r4, #12]
 8004bc6:	6923      	ldr	r3, [r4, #16]
 8004bc8:	b94b      	cbnz	r3, 8004bde <__swsetup_r+0x7a>
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bd4:	d003      	beq.n	8004bde <__swsetup_r+0x7a>
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f000 f83e 	bl	8004c5a <__smakebuf_r>
 8004bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be2:	f013 0201 	ands.w	r2, r3, #1
 8004be6:	d00a      	beq.n	8004bfe <__swsetup_r+0x9a>
 8004be8:	2200      	movs	r2, #0
 8004bea:	60a2      	str	r2, [r4, #8]
 8004bec:	6962      	ldr	r2, [r4, #20]
 8004bee:	4252      	negs	r2, r2
 8004bf0:	61a2      	str	r2, [r4, #24]
 8004bf2:	6922      	ldr	r2, [r4, #16]
 8004bf4:	b942      	cbnz	r2, 8004c08 <__swsetup_r+0xa4>
 8004bf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004bfa:	d1c5      	bne.n	8004b88 <__swsetup_r+0x24>
 8004bfc:	bd38      	pop	{r3, r4, r5, pc}
 8004bfe:	0799      	lsls	r1, r3, #30
 8004c00:	bf58      	it	pl
 8004c02:	6962      	ldrpl	r2, [r4, #20]
 8004c04:	60a2      	str	r2, [r4, #8]
 8004c06:	e7f4      	b.n	8004bf2 <__swsetup_r+0x8e>
 8004c08:	2000      	movs	r0, #0
 8004c0a:	e7f7      	b.n	8004bfc <__swsetup_r+0x98>
 8004c0c:	20000018 	.word	0x20000018

08004c10 <__swhatbuf_r>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	460c      	mov	r4, r1
 8004c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c18:	4615      	mov	r5, r2
 8004c1a:	2900      	cmp	r1, #0
 8004c1c:	461e      	mov	r6, r3
 8004c1e:	b096      	sub	sp, #88	@ 0x58
 8004c20:	da0c      	bge.n	8004c3c <__swhatbuf_r+0x2c>
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	2100      	movs	r1, #0
 8004c26:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c2a:	bf14      	ite	ne
 8004c2c:	2340      	movne	r3, #64	@ 0x40
 8004c2e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c32:	2000      	movs	r0, #0
 8004c34:	6031      	str	r1, [r6, #0]
 8004c36:	602b      	str	r3, [r5, #0]
 8004c38:	b016      	add	sp, #88	@ 0x58
 8004c3a:	bd70      	pop	{r4, r5, r6, pc}
 8004c3c:	466a      	mov	r2, sp
 8004c3e:	f000 f849 	bl	8004cd4 <_fstat_r>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	dbed      	blt.n	8004c22 <__swhatbuf_r+0x12>
 8004c46:	9901      	ldr	r1, [sp, #4]
 8004c48:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c4c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c50:	4259      	negs	r1, r3
 8004c52:	4159      	adcs	r1, r3
 8004c54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c58:	e7eb      	b.n	8004c32 <__swhatbuf_r+0x22>

08004c5a <__smakebuf_r>:
 8004c5a:	898b      	ldrh	r3, [r1, #12]
 8004c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c5e:	079d      	lsls	r5, r3, #30
 8004c60:	4606      	mov	r6, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	d507      	bpl.n	8004c76 <__smakebuf_r+0x1c>
 8004c66:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c6a:	6023      	str	r3, [r4, #0]
 8004c6c:	6123      	str	r3, [r4, #16]
 8004c6e:	2301      	movs	r3, #1
 8004c70:	6163      	str	r3, [r4, #20]
 8004c72:	b003      	add	sp, #12
 8004c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c76:	466a      	mov	r2, sp
 8004c78:	ab01      	add	r3, sp, #4
 8004c7a:	f7ff ffc9 	bl	8004c10 <__swhatbuf_r>
 8004c7e:	9f00      	ldr	r7, [sp, #0]
 8004c80:	4605      	mov	r5, r0
 8004c82:	4639      	mov	r1, r7
 8004c84:	4630      	mov	r0, r6
 8004c86:	f7fe ffe1 	bl	8003c4c <_malloc_r>
 8004c8a:	b948      	cbnz	r0, 8004ca0 <__smakebuf_r+0x46>
 8004c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c90:	059a      	lsls	r2, r3, #22
 8004c92:	d4ee      	bmi.n	8004c72 <__smakebuf_r+0x18>
 8004c94:	f023 0303 	bic.w	r3, r3, #3
 8004c98:	f043 0302 	orr.w	r3, r3, #2
 8004c9c:	81a3      	strh	r3, [r4, #12]
 8004c9e:	e7e2      	b.n	8004c66 <__smakebuf_r+0xc>
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004caa:	81a3      	strh	r3, [r4, #12]
 8004cac:	9b01      	ldr	r3, [sp, #4]
 8004cae:	6020      	str	r0, [r4, #0]
 8004cb0:	b15b      	cbz	r3, 8004cca <__smakebuf_r+0x70>
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb8:	f000 f81e 	bl	8004cf8 <_isatty_r>
 8004cbc:	b128      	cbz	r0, 8004cca <__smakebuf_r+0x70>
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	f023 0303 	bic.w	r3, r3, #3
 8004cc4:	f043 0301 	orr.w	r3, r3, #1
 8004cc8:	81a3      	strh	r3, [r4, #12]
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	431d      	orrs	r5, r3
 8004cce:	81a5      	strh	r5, [r4, #12]
 8004cd0:	e7cf      	b.n	8004c72 <__smakebuf_r+0x18>
	...

08004cd4 <_fstat_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	4d06      	ldr	r5, [pc, #24]	@ (8004cf4 <_fstat_r+0x20>)
 8004cda:	4604      	mov	r4, r0
 8004cdc:	4608      	mov	r0, r1
 8004cde:	4611      	mov	r1, r2
 8004ce0:	602b      	str	r3, [r5, #0]
 8004ce2:	f7fc f9ab 	bl	800103c <_fstat>
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	d102      	bne.n	8004cf0 <_fstat_r+0x1c>
 8004cea:	682b      	ldr	r3, [r5, #0]
 8004cec:	b103      	cbz	r3, 8004cf0 <_fstat_r+0x1c>
 8004cee:	6023      	str	r3, [r4, #0]
 8004cf0:	bd38      	pop	{r3, r4, r5, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000418 	.word	0x20000418

08004cf8 <_isatty_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	4d05      	ldr	r5, [pc, #20]	@ (8004d14 <_isatty_r+0x1c>)
 8004cfe:	4604      	mov	r4, r0
 8004d00:	4608      	mov	r0, r1
 8004d02:	602b      	str	r3, [r5, #0]
 8004d04:	f7fc f9a9 	bl	800105a <_isatty>
 8004d08:	1c43      	adds	r3, r0, #1
 8004d0a:	d102      	bne.n	8004d12 <_isatty_r+0x1a>
 8004d0c:	682b      	ldr	r3, [r5, #0]
 8004d0e:	b103      	cbz	r3, 8004d12 <_isatty_r+0x1a>
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	bd38      	pop	{r3, r4, r5, pc}
 8004d14:	20000418 	.word	0x20000418

08004d18 <_raise_r>:
 8004d18:	291f      	cmp	r1, #31
 8004d1a:	b538      	push	{r3, r4, r5, lr}
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	d904      	bls.n	8004d2c <_raise_r+0x14>
 8004d22:	2316      	movs	r3, #22
 8004d24:	6003      	str	r3, [r0, #0]
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d2a:	bd38      	pop	{r3, r4, r5, pc}
 8004d2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004d2e:	b112      	cbz	r2, 8004d36 <_raise_r+0x1e>
 8004d30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d34:	b94b      	cbnz	r3, 8004d4a <_raise_r+0x32>
 8004d36:	4628      	mov	r0, r5
 8004d38:	f000 f830 	bl	8004d9c <_getpid_r>
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	4601      	mov	r1, r0
 8004d40:	4628      	mov	r0, r5
 8004d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d46:	f000 b817 	b.w	8004d78 <_kill_r>
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d00a      	beq.n	8004d64 <_raise_r+0x4c>
 8004d4e:	1c59      	adds	r1, r3, #1
 8004d50:	d103      	bne.n	8004d5a <_raise_r+0x42>
 8004d52:	2316      	movs	r3, #22
 8004d54:	6003      	str	r3, [r0, #0]
 8004d56:	2001      	movs	r0, #1
 8004d58:	e7e7      	b.n	8004d2a <_raise_r+0x12>
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004d62:	4798      	blx	r3
 8004d64:	2000      	movs	r0, #0
 8004d66:	e7e0      	b.n	8004d2a <_raise_r+0x12>

08004d68 <raise>:
 8004d68:	4b02      	ldr	r3, [pc, #8]	@ (8004d74 <raise+0xc>)
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	f7ff bfd3 	b.w	8004d18 <_raise_r>
 8004d72:	bf00      	nop
 8004d74:	20000018 	.word	0x20000018

08004d78 <_kill_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	4d06      	ldr	r5, [pc, #24]	@ (8004d98 <_kill_r+0x20>)
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4608      	mov	r0, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	602b      	str	r3, [r5, #0]
 8004d86:	f7fc f8fa 	bl	8000f7e <_kill>
 8004d8a:	1c43      	adds	r3, r0, #1
 8004d8c:	d102      	bne.n	8004d94 <_kill_r+0x1c>
 8004d8e:	682b      	ldr	r3, [r5, #0]
 8004d90:	b103      	cbz	r3, 8004d94 <_kill_r+0x1c>
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	bd38      	pop	{r3, r4, r5, pc}
 8004d96:	bf00      	nop
 8004d98:	20000418 	.word	0x20000418

08004d9c <_getpid_r>:
 8004d9c:	f7fc b8e8 	b.w	8000f70 <_getpid>

08004da0 <_init>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	bf00      	nop
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr

08004dac <_fini>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	bf00      	nop
 8004db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db2:	bc08      	pop	{r3}
 8004db4:	469e      	mov	lr, r3
 8004db6:	4770      	bx	lr
