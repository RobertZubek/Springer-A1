
A1tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095ec  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08009700  08009700  0000a700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c90  08009c90  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009c90  08009c90  0000ac90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c98  08009c98  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c98  08009c98  0000ac98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c9c  08009c9c  0000ac9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009ca0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002068  200001d8  08009e78  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002240  08009e78  0000b240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135e5  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eab  00000000  00000000  0001e7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00021698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfd  00000000  00000000  00022638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e30  00000000  00000000  00023235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001201d  00000000  00000000  00027065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092df2  00000000  00000000  00039082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbe74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d4  00000000  00000000  000cbeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d0f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080096e4 	.word	0x080096e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080096e4 	.word	0x080096e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__io_putchar>:
void Uartcom(void *argument);

/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d4c:	1d39      	adds	r1, r7, #4
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d52:	2201      	movs	r2, #1
 8000d54:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <__io_putchar+0x20>)
 8000d56:	f002 ffeb 	bl	8003d30 <HAL_UART_Transmit>
  return ch;
 8000d5a:	687b      	ldr	r3, [r7, #4]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000026c 	.word	0x2000026c

08000d68 <ADC_SetActiveChannel>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig={0};
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
	sConfig.Channel=AdcChannel;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
	sConfig.Rank=1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	613b      	str	r3, [r7, #16]
	//sConfig.SamplingTime=ADC_SAMPLETIME_3CYCLES;
	if(HAL_ADC_ConfigChannel(hadc, &sConfig)!=HAL_OK){
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f001 fda3 	bl	80028d8 <HAL_ADC_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <ADC_SetActiveChannel+0x34>
		Error_Handler();
 8000d98:	f001 f82a 	bl	8001df0 <Error_Handler>
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <ADC_measure>:
float ADC_measure(uint32_t ADC_CHANNEL){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	ADC_SetActiveChannel(&hadc1, ADC_CHANNEL);
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	480e      	ldr	r0, [pc, #56]	@ (8000de8 <ADC_measure+0x44>)
 8000db0:	f7ff ffda 	bl	8000d68 <ADC_SetActiveChannel>
	HAL_ADC_Start(&hadc1);
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <ADC_measure+0x44>)
 8000db6:	f001 fbcf 	bl	8002558 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK){
 8000dba:	210a      	movs	r1, #10
 8000dbc:	480a      	ldr	r0, [pc, #40]	@ (8000de8 <ADC_measure+0x44>)
 8000dbe:	f001 fc79 	bl	80026b4 <HAL_ADC_PollForConversion>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d108      	bne.n	8000dda <ADC_measure+0x36>
		return HAL_ADC_GetValue(&hadc1);
 8000dc8:	4807      	ldr	r0, [pc, #28]	@ (8000de8 <ADC_measure+0x44>)
 8000dca:	f001 fd79 	bl	80028c0 <HAL_ADC_GetValue>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5f 	bl	8000c94 <__aeabi_ui2f>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e001      	b.n	8000dde <ADC_measure+0x3a>
	}else return 0;
 8000dda:	f04f 0300 	mov.w	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001f4 	.word	0x200001f4
 8000dec:	00000000 	.word	0x00000000

08000df0 <performTest>:
void performTest(VoltageLevels *LevelsStruct){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

	LevelsStruct->level11=ADC_measure(ADC_CHANNEL_7)*3.3/4095-0.35;
 8000df8:	2007      	movs	r0, #7
 8000dfa:	f7ff ffd3 	bl	8000da4 <ADC_measure>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fb11 	bl	8000428 <__aeabi_f2d>
 8000e06:	a382      	add	r3, pc, #520	@ (adr r3, 8001010 <performTest+0x220>)
 8000e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0c:	f7ff fb64 	bl	80004d8 <__aeabi_dmul>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	a37f      	add	r3, pc, #508	@ (adr r3, 8001018 <performTest+0x228>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	f7ff fc85 	bl	800072c <__aeabi_ddiv>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	a37d      	add	r3, pc, #500	@ (adr r3, 8001020 <performTest+0x230>)
 8000e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e30:	f7ff f99a 	bl	8000168 <__aeabi_dsub>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f7ff fe24 	bl	8000a88 <__aeabi_d2f>
 8000e40:	4602      	mov	r2, r0
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	619a      	str	r2, [r3, #24]
	LevelsStruct->level15=ADC_measure(ADC_CHANNEL_15)*2*3.3/4095;
 8000e46:	200f      	movs	r0, #15
 8000e48:	f7ff ffac 	bl	8000da4 <ADC_measure>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fe6f 	bl	8000b34 <__addsf3>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fae5 	bl	8000428 <__aeabi_f2d>
 8000e5e:	a36c      	add	r3, pc, #432	@ (adr r3, 8001010 <performTest+0x220>)
 8000e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e64:	f7ff fb38 	bl	80004d8 <__aeabi_dmul>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	a369      	add	r3, pc, #420	@ (adr r3, 8001018 <performTest+0x228>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	f7ff fc59 	bl	800072c <__aeabi_ddiv>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f7ff fe01 	bl	8000a88 <__aeabi_d2f>
 8000e86:	4602      	mov	r2, r0
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
	LevelsStruct->level178=ADC_measure(ADC_CHANNEL_8)*3.3/4095;
 8000e8c:	2008      	movs	r0, #8
 8000e8e:	f7ff ff89 	bl	8000da4 <ADC_measure>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fac7 	bl	8000428 <__aeabi_f2d>
 8000e9a:	a35d      	add	r3, pc, #372	@ (adr r3, 8001010 <performTest+0x220>)
 8000e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea0:	f7ff fb1a 	bl	80004d8 <__aeabi_dmul>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	a35a      	add	r3, pc, #360	@ (adr r3, 8001018 <performTest+0x228>)
 8000eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb2:	f7ff fc3b 	bl	800072c <__aeabi_ddiv>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f7ff fde3 	bl	8000a88 <__aeabi_d2f>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	61da      	str	r2, [r3, #28]
	LevelsStruct->level18=ADC_measure(ADC_CHANNEL_4)*3.3/4095;
 8000ec8:	2004      	movs	r0, #4
 8000eca:	f7ff ff6b 	bl	8000da4 <ADC_measure>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff faa9 	bl	8000428 <__aeabi_f2d>
 8000ed6:	a34e      	add	r3, pc, #312	@ (adr r3, 8001010 <performTest+0x220>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f7ff fafc 	bl	80004d8 <__aeabi_dmul>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	a34b      	add	r3, pc, #300	@ (adr r3, 8001018 <performTest+0x228>)
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	f7ff fc1d 	bl	800072c <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fdc5 	bl	8000a88 <__aeabi_d2f>
 8000efe:	4602      	mov	r2, r0
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	621a      	str	r2, [r3, #32]
	LevelsStruct->level25=ADC_measure(ADC_CHANNEL_11)*2*3.3/4095;
 8000f04:	200b      	movs	r0, #11
 8000f06:	f7ff ff4d 	bl	8000da4 <ADC_measure>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fe10 	bl	8000b34 <__addsf3>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fa86 	bl	8000428 <__aeabi_f2d>
 8000f1c:	a33c      	add	r3, pc, #240	@ (adr r3, 8001010 <performTest+0x220>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fad9 	bl	80004d8 <__aeabi_dmul>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	a33a      	add	r3, pc, #232	@ (adr r3, 8001018 <performTest+0x228>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff fbfa 	bl	800072c <__aeabi_ddiv>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fda2 	bl	8000a88 <__aeabi_d2f>
 8000f44:	4602      	mov	r2, r0
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60da      	str	r2, [r3, #12]
	LevelsStruct->level28=ADC_measure(ADC_CHANNEL_1)*3.3/4095;
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f7ff ff2a 	bl	8000da4 <ADC_measure>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa68 	bl	8000428 <__aeabi_f2d>
 8000f58:	a32d      	add	r3, pc, #180	@ (adr r3, 8001010 <performTest+0x220>)
 8000f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5e:	f7ff fabb 	bl	80004d8 <__aeabi_dmul>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	a32b      	add	r3, pc, #172	@ (adr r3, 8001018 <performTest+0x228>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fbdc 	bl	800072c <__aeabi_ddiv>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fd84 	bl	8000a88 <__aeabi_d2f>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	615a      	str	r2, [r3, #20]
	LevelsStruct->level30=ADC_measure(ADC_CHANNEL_6)*3.3/4095;
 8000f86:	2006      	movs	r0, #6
 8000f88:	f7ff ff0c 	bl	8000da4 <ADC_measure>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fa4a 	bl	8000428 <__aeabi_f2d>
 8000f94:	a31e      	add	r3, pc, #120	@ (adr r3, 8001010 <performTest+0x220>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	f7ff fa9d 	bl	80004d8 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001018 <performTest+0x228>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fbbe 	bl	800072c <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f7ff fd66 	bl	8000a88 <__aeabi_d2f>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	611a      	str	r2, [r3, #16]
	LevelsStruct->level42=ADC_measure(ADC_CHANNEL_10)*2*3.3/4095;
 8000fc2:	200a      	movs	r0, #10
 8000fc4:	f7ff feee 	bl	8000da4 <ADC_measure>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fdb1 	bl	8000b34 <__addsf3>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa27 	bl	8000428 <__aeabi_f2d>
 8000fda:	a30d      	add	r3, pc, #52	@ (adr r3, 8001010 <performTest+0x220>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fa7a 	bl	80004d8 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	a30a      	add	r3, pc, #40	@ (adr r3, 8001018 <performTest+0x228>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff fb9b 	bl	800072c <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fd43 	bl	8000a88 <__aeabi_d2f>
 8001002:	4602      	mov	r2, r0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	66666666 	.word	0x66666666
 8001014:	400a6666 	.word	0x400a6666
 8001018:	00000000 	.word	0x00000000
 800101c:	40affe00 	.word	0x40affe00
 8001020:	66666666 	.word	0x66666666
 8001024:	3fd66666 	.word	0x3fd66666

08001028 <compare>:
    {
      break;
    }
  }
}
void compare(VoltageLevels *comp, VoltageLevels *levels){
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	printf("Test:");
 8001032:	48ab      	ldr	r0, [pc, #684]	@ (80012e0 <compare+0x2b8>)
 8001034:	f006 fae8 	bl	8007608 <iprintf>
	printf(levels->test);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f006 fae4 	bl	8007608 <iprintf>
	printf("\n");
 8001040:	200a      	movs	r0, #10
 8001042:	f006 faf3 	bl	800762c <putchar>
	if((levels->level11<=1.1*comp->level11)&&(levels->level11>=0.95*comp->level11)){
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f9ec 	bl	8000428 <__aeabi_f2d>
 8001050:	4604      	mov	r4, r0
 8001052:	460d      	mov	r5, r1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f9e5 	bl	8000428 <__aeabi_f2d>
 800105e:	a39a      	add	r3, pc, #616	@ (adr r3, 80012c8 <compare+0x2a0>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fa38 	bl	80004d8 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4620      	mov	r0, r4
 800106e:	4629      	mov	r1, r5
 8001070:	f7ff fcae 	bl	80009d0 <__aeabi_dcmple>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d01d      	beq.n	80010b6 <compare+0x8e>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f9d2 	bl	8000428 <__aeabi_f2d>
 8001084:	4604      	mov	r4, r0
 8001086:	460d      	mov	r5, r1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f9cb 	bl	8000428 <__aeabi_f2d>
 8001092:	a38f      	add	r3, pc, #572	@ (adr r3, 80012d0 <compare+0x2a8>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff fa1e 	bl	80004d8 <__aeabi_dmul>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4620      	mov	r0, r4
 80010a2:	4629      	mov	r1, r5
 80010a4:	f7ff fc9e 	bl	80009e4 <__aeabi_dcmpge>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <compare+0x8e>
		printf("1,1V ok\n");
 80010ae:	488d      	ldr	r0, [pc, #564]	@ (80012e4 <compare+0x2bc>)
 80010b0:	f006 fb1a 	bl	80076e8 <puts>
 80010b4:	e009      	b.n	80010ca <compare+0xa2>
	}
	else printf("1,1V error, value:%f\n",levels->level11);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f9b4 	bl	8000428 <__aeabi_f2d>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4888      	ldr	r0, [pc, #544]	@ (80012e8 <compare+0x2c0>)
 80010c6:	f006 fa9f 	bl	8007608 <iprintf>
	if((levels->level15<=1.05*comp->level15)&&(levels->level15>=0.95*comp->level15)){
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f9aa 	bl	8000428 <__aeabi_f2d>
 80010d4:	4604      	mov	r4, r0
 80010d6:	460d      	mov	r5, r1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f9a3 	bl	8000428 <__aeabi_f2d>
 80010e2:	a37d      	add	r3, pc, #500	@ (adr r3, 80012d8 <compare+0x2b0>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff f9f6 	bl	80004d8 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4620      	mov	r0, r4
 80010f2:	4629      	mov	r1, r5
 80010f4:	f7ff fc6c 	bl	80009d0 <__aeabi_dcmple>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d01d      	beq.n	800113a <compare+0x112>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f990 	bl	8000428 <__aeabi_f2d>
 8001108:	4604      	mov	r4, r0
 800110a:	460d      	mov	r5, r1
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f989 	bl	8000428 <__aeabi_f2d>
 8001116:	a36e      	add	r3, pc, #440	@ (adr r3, 80012d0 <compare+0x2a8>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff f9dc 	bl	80004d8 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4620      	mov	r0, r4
 8001126:	4629      	mov	r1, r5
 8001128:	f7ff fc5c 	bl	80009e4 <__aeabi_dcmpge>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <compare+0x112>
			printf("1)5V ok\n");
 8001132:	486e      	ldr	r0, [pc, #440]	@ (80012ec <compare+0x2c4>)
 8001134:	f006 fad8 	bl	80076e8 <puts>
 8001138:	e009      	b.n	800114e <compare+0x126>
		}
		else printf("1)5V error, value:%f\n",levels->level15);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f972 	bl	8000428 <__aeabi_f2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4869      	ldr	r0, [pc, #420]	@ (80012f0 <compare+0x2c8>)
 800114a:	f006 fa5d 	bl	8007608 <iprintf>
	if((levels->level25<=1.05*comp->level25)&&(levels->level25>=0.95*comp->level25)){
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f968 	bl	8000428 <__aeabi_f2d>
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f961 	bl	8000428 <__aeabi_f2d>
 8001166:	a35c      	add	r3, pc, #368	@ (adr r3, 80012d8 <compare+0x2b0>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	f7ff f9b4 	bl	80004d8 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4620      	mov	r0, r4
 8001176:	4629      	mov	r1, r5
 8001178:	f7ff fc2a 	bl	80009d0 <__aeabi_dcmple>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d01d      	beq.n	80011be <compare+0x196>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f94e 	bl	8000428 <__aeabi_f2d>
 800118c:	4604      	mov	r4, r0
 800118e:	460d      	mov	r5, r1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f947 	bl	8000428 <__aeabi_f2d>
 800119a:	a34d      	add	r3, pc, #308	@ (adr r3, 80012d0 <compare+0x2a8>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff f99a 	bl	80004d8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4620      	mov	r0, r4
 80011aa:	4629      	mov	r1, r5
 80011ac:	f7ff fc1a 	bl	80009e4 <__aeabi_dcmpge>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <compare+0x196>
			printf("2)5V ok\n");
 80011b6:	484f      	ldr	r0, [pc, #316]	@ (80012f4 <compare+0x2cc>)
 80011b8:	f006 fa96 	bl	80076e8 <puts>
 80011bc:	e009      	b.n	80011d2 <compare+0x1aa>
		}
		else printf("2)5V error, value:%f\n",levels->level25);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f930 	bl	8000428 <__aeabi_f2d>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	484a      	ldr	r0, [pc, #296]	@ (80012f8 <compare+0x2d0>)
 80011ce:	f006 fa1b 	bl	8007608 <iprintf>
	if((levels->level30<=1.05*comp->level30)&&(levels->level30>=0.95*comp->level30)){
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f926 	bl	8000428 <__aeabi_f2d>
 80011dc:	4604      	mov	r4, r0
 80011de:	460d      	mov	r5, r1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f91f 	bl	8000428 <__aeabi_f2d>
 80011ea:	a33b      	add	r3, pc, #236	@ (adr r3, 80012d8 <compare+0x2b0>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff f972 	bl	80004d8 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4620      	mov	r0, r4
 80011fa:	4629      	mov	r1, r5
 80011fc:	f7ff fbe8 	bl	80009d0 <__aeabi_dcmple>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d01d      	beq.n	8001242 <compare+0x21a>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f90c 	bl	8000428 <__aeabi_f2d>
 8001210:	4604      	mov	r4, r0
 8001212:	460d      	mov	r5, r1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f905 	bl	8000428 <__aeabi_f2d>
 800121e:	a32c      	add	r3, pc, #176	@ (adr r3, 80012d0 <compare+0x2a8>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f7ff f958 	bl	80004d8 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4620      	mov	r0, r4
 800122e:	4629      	mov	r1, r5
 8001230:	f7ff fbd8 	bl	80009e4 <__aeabi_dcmpge>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <compare+0x21a>
			printf("3V ok\n");
 800123a:	4830      	ldr	r0, [pc, #192]	@ (80012fc <compare+0x2d4>)
 800123c:	f006 fa54 	bl	80076e8 <puts>
 8001240:	e009      	b.n	8001256 <compare+0x22e>
		}
		else printf("3V error, value:%f\n",levels->level30);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f8ee 	bl	8000428 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	482b      	ldr	r0, [pc, #172]	@ (8001300 <compare+0x2d8>)
 8001252:	f006 f9d9 	bl	8007608 <iprintf>
	if((levels->level28<=1.05*comp->level28)&&(levels->level28>=0.95*comp->level28)){
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f8e4 	bl	8000428 <__aeabi_f2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f8dd 	bl	8000428 <__aeabi_f2d>
 800126e:	a31a      	add	r3, pc, #104	@ (adr r3, 80012d8 <compare+0x2b0>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f930 	bl	80004d8 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff fba6 	bl	80009d0 <__aeabi_dcmple>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d03e      	beq.n	8001308 <compare+0x2e0>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f8ca 	bl	8000428 <__aeabi_f2d>
 8001294:	4604      	mov	r4, r0
 8001296:	460d      	mov	r5, r1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f8c3 	bl	8000428 <__aeabi_f2d>
 80012a2:	a30b      	add	r3, pc, #44	@ (adr r3, 80012d0 <compare+0x2a8>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	f7ff f916 	bl	80004d8 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4620      	mov	r0, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	f7ff fb96 	bl	80009e4 <__aeabi_dcmpge>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d024      	beq.n	8001308 <compare+0x2e0>
			printf("2,8V ok\n");
 80012be:	4811      	ldr	r0, [pc, #68]	@ (8001304 <compare+0x2dc>)
 80012c0:	f006 fa12 	bl	80076e8 <puts>
 80012c4:	e02a      	b.n	800131c <compare+0x2f4>
 80012c6:	bf00      	nop
 80012c8:	9999999a 	.word	0x9999999a
 80012cc:	3ff19999 	.word	0x3ff19999
 80012d0:	66666666 	.word	0x66666666
 80012d4:	3fee6666 	.word	0x3fee6666
 80012d8:	cccccccd 	.word	0xcccccccd
 80012dc:	3ff0cccc 	.word	0x3ff0cccc
 80012e0:	08009710 	.word	0x08009710
 80012e4:	08009718 	.word	0x08009718
 80012e8:	08009720 	.word	0x08009720
 80012ec:	08009738 	.word	0x08009738
 80012f0:	08009740 	.word	0x08009740
 80012f4:	08009758 	.word	0x08009758
 80012f8:	08009760 	.word	0x08009760
 80012fc:	08009778 	.word	0x08009778
 8001300:	08009780 	.word	0x08009780
 8001304:	08009794 	.word	0x08009794
		}
		else printf("2,8V error, value:%f\n",levels->level28);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f88b 	bl	8000428 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	486c      	ldr	r0, [pc, #432]	@ (80014c8 <compare+0x4a0>)
 8001318:	f006 f976 	bl	8007608 <iprintf>
	if((levels->level178<=1.05*comp->level178)&&(levels->level178>=0.95*comp->level178)){
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f881 	bl	8000428 <__aeabi_f2d>
 8001326:	4604      	mov	r4, r0
 8001328:	460d      	mov	r5, r1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f87a 	bl	8000428 <__aeabi_f2d>
 8001334:	a360      	add	r3, pc, #384	@ (adr r3, 80014b8 <compare+0x490>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff f8cd 	bl	80004d8 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7ff fb43 	bl	80009d0 <__aeabi_dcmple>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01d      	beq.n	800138c <compare+0x364>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f867 	bl	8000428 <__aeabi_f2d>
 800135a:	4604      	mov	r4, r0
 800135c:	460d      	mov	r5, r1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f860 	bl	8000428 <__aeabi_f2d>
 8001368:	a355      	add	r3, pc, #340	@ (adr r3, 80014c0 <compare+0x498>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff f8b3 	bl	80004d8 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4620      	mov	r0, r4
 8001378:	4629      	mov	r1, r5
 800137a:	f7ff fb33 	bl	80009e4 <__aeabi_dcmpge>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <compare+0x364>
			printf("1,78V ok\n");
 8001384:	4851      	ldr	r0, [pc, #324]	@ (80014cc <compare+0x4a4>)
 8001386:	f006 f9af 	bl	80076e8 <puts>
 800138a:	e009      	b.n	80013a0 <compare+0x378>
		}
		else printf("1,78V error, value:%f\n",levels->level178);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f849 	bl	8000428 <__aeabi_f2d>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	484d      	ldr	r0, [pc, #308]	@ (80014d0 <compare+0x4a8>)
 800139c:	f006 f934 	bl	8007608 <iprintf>
	if((levels->level18<=1.05*comp->level18)&&(levels->level18>=0.95*comp->level18)){
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f83f 	bl	8000428 <__aeabi_f2d>
 80013aa:	4604      	mov	r4, r0
 80013ac:	460d      	mov	r5, r1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f838 	bl	8000428 <__aeabi_f2d>
 80013b8:	a33f      	add	r3, pc, #252	@ (adr r3, 80014b8 <compare+0x490>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7ff f88b 	bl	80004d8 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4620      	mov	r0, r4
 80013c8:	4629      	mov	r1, r5
 80013ca:	f7ff fb01 	bl	80009d0 <__aeabi_dcmple>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d01d      	beq.n	8001410 <compare+0x3e8>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f825 	bl	8000428 <__aeabi_f2d>
 80013de:	4604      	mov	r4, r0
 80013e0:	460d      	mov	r5, r1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f81e 	bl	8000428 <__aeabi_f2d>
 80013ec:	a334      	add	r3, pc, #208	@ (adr r3, 80014c0 <compare+0x498>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f871 	bl	80004d8 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f7ff faf1 	bl	80009e4 <__aeabi_dcmpge>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <compare+0x3e8>
			printf("1,8V ok\n");
 8001408:	4832      	ldr	r0, [pc, #200]	@ (80014d4 <compare+0x4ac>)
 800140a:	f006 f96d 	bl	80076e8 <puts>
 800140e:	e009      	b.n	8001424 <compare+0x3fc>
		}
		else printf("1,8V error, value:%f\n",levels->level18);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f807 	bl	8000428 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	482e      	ldr	r0, [pc, #184]	@ (80014d8 <compare+0x4b0>)
 8001420:	f006 f8f2 	bl	8007608 <iprintf>
	if((levels->level42<=1.05*comp->level42)&&(levels->level42>=0.95*comp->level42)){
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fffd 	bl	8000428 <__aeabi_f2d>
 800142e:	4604      	mov	r4, r0
 8001430:	460d      	mov	r5, r1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe fff6 	bl	8000428 <__aeabi_f2d>
 800143c:	a31e      	add	r3, pc, #120	@ (adr r3, 80014b8 <compare+0x490>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f849 	bl	80004d8 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4620      	mov	r0, r4
 800144c:	4629      	mov	r1, r5
 800144e:	f7ff fabf 	bl	80009d0 <__aeabi_dcmple>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d01d      	beq.n	8001494 <compare+0x46c>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe ffe3 	bl	8000428 <__aeabi_f2d>
 8001462:	4604      	mov	r4, r0
 8001464:	460d      	mov	r5, r1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe ffdc 	bl	8000428 <__aeabi_f2d>
 8001470:	a313      	add	r3, pc, #76	@ (adr r3, 80014c0 <compare+0x498>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff f82f 	bl	80004d8 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7ff faaf 	bl	80009e4 <__aeabi_dcmpge>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <compare+0x46c>
			printf("4,2V ok\n");
 800148c:	4813      	ldr	r0, [pc, #76]	@ (80014dc <compare+0x4b4>)
 800148e:	f006 f92b 	bl	80076e8 <puts>
 8001492:	e009      	b.n	80014a8 <compare+0x480>
		}
		else printf("4,2V error, value:%f\n",levels->level42);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe ffc5 	bl	8000428 <__aeabi_f2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	480f      	ldr	r0, [pc, #60]	@ (80014e0 <compare+0x4b8>)
 80014a4:	f006 f8b0 	bl	8007608 <iprintf>
	printf("*************************\n");
 80014a8:	480e      	ldr	r0, [pc, #56]	@ (80014e4 <compare+0x4bc>)
 80014aa:	f006 f91d 	bl	80076e8 <puts>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bdb0      	pop	{r4, r5, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	cccccccd 	.word	0xcccccccd
 80014bc:	3ff0cccc 	.word	0x3ff0cccc
 80014c0:	66666666 	.word	0x66666666
 80014c4:	3fee6666 	.word	0x3fee6666
 80014c8:	0800979c 	.word	0x0800979c
 80014cc:	080097b4 	.word	0x080097b4
 80014d0:	080097c0 	.word	0x080097c0
 80014d4:	080097d8 	.word	0x080097d8
 80014d8:	080097e0 	.word	0x080097e0
 80014dc:	080097f8 	.word	0x080097f8
 80014e0:	08009800 	.word	0x08009800
 80014e4:	08009818 	.word	0x08009818

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ec:	f000 fefa 	bl	80022e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f0:	f000 f82c 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f4:	f000 f942 	bl	800177c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014f8:	f000 f8ec 	bl	80016d4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80014fc:	f000 f8c0 	bl	8001680 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001500:	f000 f880 	bl	8001604 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001504:	f000 f910 	bl	8001728 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001508:	f002 fe24 	bl	8004154 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of testing */
  testingHandle = osThreadNew(Test, NULL, &testing_attributes);
 800150c:	4a09      	ldr	r2, [pc, #36]	@ (8001534 <main+0x4c>)
 800150e:	2100      	movs	r1, #0
 8001510:	4809      	ldr	r0, [pc, #36]	@ (8001538 <main+0x50>)
 8001512:	f002 fe85 	bl	8004220 <osThreadNew>
 8001516:	4603      	mov	r3, r0
 8001518:	4a08      	ldr	r2, [pc, #32]	@ (800153c <main+0x54>)
 800151a:	6013      	str	r3, [r2, #0]

  /* creation of UARTcom */
  UARTcomHandle = osThreadNew(Uartcom, NULL, &UARTcom_attributes);
 800151c:	4a08      	ldr	r2, [pc, #32]	@ (8001540 <main+0x58>)
 800151e:	2100      	movs	r1, #0
 8001520:	4808      	ldr	r0, [pc, #32]	@ (8001544 <main+0x5c>)
 8001522:	f002 fe7d 	bl	8004220 <osThreadNew>
 8001526:	4603      	mov	r3, r0
 8001528:	4a07      	ldr	r2, [pc, #28]	@ (8001548 <main+0x60>)
 800152a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800152c:	f002 fe44 	bl	80041b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <main+0x48>
 8001534:	08009898 	.word	0x08009898
 8001538:	08001859 	.word	0x08001859
 800153c:	200002fc 	.word	0x200002fc
 8001540:	080098bc 	.word	0x080098bc
 8001544:	08001da1 	.word	0x08001da1
 8001548:	20000300 	.word	0x20000300

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b094      	sub	sp, #80	@ 0x50
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001556:	2228      	movs	r2, #40	@ 0x28
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f006 f8cc 	bl	80076f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800157c:	2301      	movs	r3, #1
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001580:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158a:	2301      	movs	r3, #1
 800158c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158e:	2302      	movs	r3, #2
 8001590:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001592:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001596:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001598:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800159c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 fdf8 	bl	8003198 <HAL_RCC_OscConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015ae:	f000 fc1f 	bl	8001df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b2:	230f      	movs	r3, #15
 80015b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2101      	movs	r1, #1
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 f864 	bl	800369c <HAL_RCC_ClockConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015da:	f000 fc09 	bl	8001df0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015de:	2302      	movs	r3, #2
 80015e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80015e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 f9e4 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015f6:	f000 fbfb 	bl	8001df0 <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3750      	adds	r7, #80	@ 0x50
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <MX_ADC1_Init+0x74>)
 8001616:	4a19      	ldr	r2, [pc, #100]	@ (800167c <MX_ADC1_Init+0x78>)
 8001618:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <MX_ADC1_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001620:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <MX_ADC1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001626:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <MX_ADC1_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <MX_ADC1_Init+0x74>)
 800162e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001632:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001634:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <MX_ADC1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800163a:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <MX_ADC1_Init+0x74>)
 800163c:	2201      	movs	r2, #1
 800163e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001640:	480d      	ldr	r0, [pc, #52]	@ (8001678 <MX_ADC1_Init+0x74>)
 8001642:	f000 feb1 	bl	80023a8 <HAL_ADC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800164c:	f000 fbd0 	bl	8001df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001650:	2301      	movs	r3, #1
 8001652:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001654:	2301      	movs	r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_ADC1_Init+0x74>)
 8001662:	f001 f939 	bl	80028d8 <HAL_ADC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800166c:	f000 fbc0 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200001f4 	.word	0x200001f4
 800167c:	40012400 	.word	0x40012400

08001680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 8001686:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <MX_USART1_UART_Init+0x50>)
 8001688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_USART1_UART_Init+0x4c>)
 80016b8:	f002 faea 	bl	8003c90 <HAL_UART_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016c2:	f000 fb95 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000224 	.word	0x20000224
 80016d0:	40013800 	.word	0x40013800

080016d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_USART2_UART_Init+0x4c>)
 80016da:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <MX_USART2_UART_Init+0x50>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <MX_USART2_UART_Init+0x4c>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <MX_USART2_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <MX_USART2_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <MX_USART2_UART_Init+0x4c>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <MX_USART2_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_USART2_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_USART2_UART_Init+0x4c>)
 800170c:	f002 fac0 	bl	8003c90 <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001716:	f000 fb6b 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000026c 	.word	0x2000026c
 8001724:	40004400 	.word	0x40004400

08001728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <MX_USART3_UART_Init+0x4c>)
 800172e:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <MX_USART3_UART_Init+0x50>)
 8001730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <MX_USART3_UART_Init+0x4c>)
 8001734:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_USART3_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <MX_USART3_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <MX_USART3_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <MX_USART3_UART_Init+0x4c>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <MX_USART3_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <MX_USART3_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <MX_USART3_UART_Init+0x4c>)
 8001760:	f002 fa96 	bl	8003c90 <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800176a:	f000 fb41 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200002b4 	.word	0x200002b4
 8001778:	40004800 	.word	0x40004800

0800177c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001790:	4b2d      	ldr	r3, [pc, #180]	@ (8001848 <MX_GPIO_Init+0xcc>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a2c      	ldr	r2, [pc, #176]	@ (8001848 <MX_GPIO_Init+0xcc>)
 8001796:	f043 0310 	orr.w	r3, r3, #16
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b2a      	ldr	r3, [pc, #168]	@ (8001848 <MX_GPIO_Init+0xcc>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a8:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <MX_GPIO_Init+0xcc>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a26      	ldr	r2, [pc, #152]	@ (8001848 <MX_GPIO_Init+0xcc>)
 80017ae:	f043 0320 	orr.w	r3, r3, #32
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <MX_GPIO_Init+0xcc>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <MX_GPIO_Init+0xcc>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a20      	ldr	r2, [pc, #128]	@ (8001848 <MX_GPIO_Init+0xcc>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <MX_GPIO_Init+0xcc>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <MX_GPIO_Init+0xcc>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001848 <MX_GPIO_Init+0xcc>)
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <MX_GPIO_Init+0xcc>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2120      	movs	r1, #32
 80017f4:	4815      	ldr	r0, [pc, #84]	@ (800184c <MX_GPIO_Init+0xd0>)
 80017f6:	f001 fc95 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001800:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <MX_GPIO_Init+0xd4>)
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	4811      	ldr	r0, [pc, #68]	@ (8001854 <MX_GPIO_Init+0xd8>)
 8001810:	f001 fb04 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001814:	2320      	movs	r3, #32
 8001816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2302      	movs	r3, #2
 8001822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	4808      	ldr	r0, [pc, #32]	@ (800184c <MX_GPIO_Init+0xd0>)
 800182c:	f001 faf6 	bl	8002e1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2105      	movs	r1, #5
 8001834:	2028      	movs	r0, #40	@ 0x28
 8001836:	f001 faba 	bl	8002dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800183a:	2028      	movs	r0, #40	@ 0x28
 800183c:	f001 fad3 	bl	8002de6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001840:	bf00      	nop
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000
 800184c:	40010800 	.word	0x40010800
 8001850:	10110000 	.word	0x10110000
 8001854:	40011000 	.word	0x40011000

08001858 <Test>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Test */
void Test(void *argument)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 800185e:	af00      	add	r7, sp, #0
 8001860:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001864:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001868:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	VoltageLevels toComp;
	strcpy(toComp.test,"com");
 800186a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800186e:	4ad7      	ldr	r2, [pc, #860]	@ (8001bcc <Test+0x374>)
 8001870:	601a      	str	r2, [r3, #0]
	toComp.level11=1.1;
 8001872:	4bd7      	ldr	r3, [pc, #860]	@ (8001bd0 <Test+0x378>)
 8001874:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
	toComp.level15=5.0;
 8001878:	4bd6      	ldr	r3, [pc, #856]	@ (8001bd4 <Test+0x37c>)
 800187a:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
	toComp.level25=5.0;
 800187e:	4bd5      	ldr	r3, [pc, #852]	@ (8001bd4 <Test+0x37c>)
 8001880:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
	toComp.level30=3.0;
 8001884:	4bd4      	ldr	r3, [pc, #848]	@ (8001bd8 <Test+0x380>)
 8001886:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
	toComp.level28=2.8;
 800188a:	4bd4      	ldr	r3, [pc, #848]	@ (8001bdc <Test+0x384>)
 800188c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
	toComp.level178=1.78;
 8001890:	4bd3      	ldr	r3, [pc, #844]	@ (8001be0 <Test+0x388>)
 8001892:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
	toComp.level18=1.8;
 8001896:	4bd3      	ldr	r3, [pc, #844]	@ (8001be4 <Test+0x38c>)
 8001898:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
	toComp.level42=4.2;
 800189c:	4bd2      	ldr	r3, [pc, #840]	@ (8001be8 <Test+0x390>)
 800189e:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
	VoltageLevels levels45;
	strcpy(levels45.test,"4,5");
 80018a2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80018a6:	4ad1      	ldr	r2, [pc, #836]	@ (8001bec <Test+0x394>)
 80018a8:	601a      	str	r2, [r3, #0]
	VoltageLevels levels5;
	strcpy(levels5.test,"5");
 80018aa:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80018ae:	2235      	movs	r2, #53	@ 0x35
 80018b0:	801a      	strh	r2, [r3, #0]
	VoltageLevels levels6;
	strcpy(levels6.test,"6");
 80018b2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80018b6:	2236      	movs	r2, #54	@ 0x36
 80018b8:	801a      	strh	r2, [r3, #0]
	VoltageLevels levels7;
	strcpy(levels7.test,"7");
 80018ba:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80018be:	2237      	movs	r2, #55	@ 0x37
 80018c0:	801a      	strh	r2, [r3, #0]
	VoltageLevels levels8;
	strcpy(levels8.test,"8");
 80018c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018c6:	2238      	movs	r2, #56	@ 0x38
 80018c8:	801a      	strh	r2, [r3, #0]
	VoltageLevels levels9;
	strcpy(levels9.test,"9");
 80018ca:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80018ce:	2239      	movs	r2, #57	@ 0x39
 80018d0:	801a      	strh	r2, [r3, #0]
	VoltageLevels levels10;
	strcpy(levels10.test,"10");
 80018d2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80018d6:	4ac6      	ldr	r2, [pc, #792]	@ (8001bf0 <Test+0x398>)
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	4611      	mov	r1, r2
 80018dc:	8019      	strh	r1, [r3, #0]
 80018de:	3302      	adds	r3, #2
 80018e0:	0c12      	lsrs	r2, r2, #16
 80018e2:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels11;
	strcpy(levels11.test,"11");
 80018e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018e8:	4ac2      	ldr	r2, [pc, #776]	@ (8001bf4 <Test+0x39c>)
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	4611      	mov	r1, r2
 80018ee:	8019      	strh	r1, [r3, #0]
 80018f0:	3302      	adds	r3, #2
 80018f2:	0c12      	lsrs	r2, r2, #16
 80018f4:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels12;
	strcpy(levels12.test,"12");
 80018f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018fa:	4abf      	ldr	r2, [pc, #764]	@ (8001bf8 <Test+0x3a0>)
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	4611      	mov	r1, r2
 8001900:	8019      	strh	r1, [r3, #0]
 8001902:	3302      	adds	r3, #2
 8001904:	0c12      	lsrs	r2, r2, #16
 8001906:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels13;
	strcpy(levels13.test,"13");
 8001908:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800190c:	4abb      	ldr	r2, [pc, #748]	@ (8001bfc <Test+0x3a4>)
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4611      	mov	r1, r2
 8001912:	8019      	strh	r1, [r3, #0]
 8001914:	3302      	adds	r3, #2
 8001916:	0c12      	lsrs	r2, r2, #16
 8001918:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels14;
	strcpy(levels14.test,"14");
 800191a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800191e:	4ab8      	ldr	r2, [pc, #736]	@ (8001c00 <Test+0x3a8>)
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	4611      	mov	r1, r2
 8001924:	8019      	strh	r1, [r3, #0]
 8001926:	3302      	adds	r3, #2
 8001928:	0c12      	lsrs	r2, r2, #16
 800192a:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels15;
	strcpy(levels15.test,"15");
 800192c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001930:	4ab4      	ldr	r2, [pc, #720]	@ (8001c04 <Test+0x3ac>)
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	4611      	mov	r1, r2
 8001936:	8019      	strh	r1, [r3, #0]
 8001938:	3302      	adds	r3, #2
 800193a:	0c12      	lsrs	r2, r2, #16
 800193c:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels16;
	strcpy(levels16.test,"16");
 800193e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001942:	4ab1      	ldr	r2, [pc, #708]	@ (8001c08 <Test+0x3b0>)
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	4611      	mov	r1, r2
 8001948:	8019      	strh	r1, [r3, #0]
 800194a:	3302      	adds	r3, #2
 800194c:	0c12      	lsrs	r2, r2, #16
 800194e:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels17;
	strcpy(levels17.test,"17");
 8001950:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001954:	4aad      	ldr	r2, [pc, #692]	@ (8001c0c <Test+0x3b4>)
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	4611      	mov	r1, r2
 800195a:	8019      	strh	r1, [r3, #0]
 800195c:	3302      	adds	r3, #2
 800195e:	0c12      	lsrs	r2, r2, #16
 8001960:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels175;
	strcpy(levels175.test,"17,5");
 8001962:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001966:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800196a:	4aa9      	ldr	r2, [pc, #676]	@ (8001c10 <Test+0x3b8>)
 800196c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001970:	6018      	str	r0, [r3, #0]
 8001972:	3304      	adds	r3, #4
 8001974:	7019      	strb	r1, [r3, #0]
	VoltageLevels levels18;
	strcpy(levels18.test,"18");
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	4aa6      	ldr	r2, [pc, #664]	@ (8001c14 <Test+0x3bc>)
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	4611      	mov	r1, r2
 8001980:	8019      	strh	r1, [r3, #0]
 8001982:	3302      	adds	r3, #2
 8001984:	0c12      	lsrs	r2, r2, #16
 8001986:	701a      	strb	r2, [r3, #0]

  HAL_ADC_Start(&hadc1);
 8001988:	48a3      	ldr	r0, [pc, #652]	@ (8001c18 <Test+0x3c0>)
 800198a:	f000 fde5 	bl	8002558 <HAL_ADC_Start>
  /* Infinite loop */

  //while(1){


	  HAL_UART_Transmit(&huart2, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800198e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001992:	2201      	movs	r2, #1
 8001994:	49a1      	ldr	r1, [pc, #644]	@ (8001c1c <Test+0x3c4>)
 8001996:	48a2      	ldr	r0, [pc, #648]	@ (8001c20 <Test+0x3c8>)
 8001998:	f002 f9ca 	bl	8003d30 <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019a0:	2207      	movs	r2, #7
 80019a2:	49a0      	ldr	r1, [pc, #640]	@ (8001c24 <Test+0x3cc>)
 80019a4:	489e      	ldr	r0, [pc, #632]	@ (8001c20 <Test+0x3c8>)
 80019a6:	f002 f9c3 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(1000);
 80019aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ae:	f002 fce1 	bl	8004374 <osDelay>
	  performTest(&levels45);
 80019b2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fa1a 	bl	8000df0 <performTest>
	  osDelay(1000);
 80019bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019c0:	f002 fcd8 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019c8:	2207      	movs	r2, #7
 80019ca:	4996      	ldr	r1, [pc, #600]	@ (8001c24 <Test+0x3cc>)
 80019cc:	4894      	ldr	r0, [pc, #592]	@ (8001c20 <Test+0x3c8>)
 80019ce:	f002 f9af 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(100);
 80019d2:	2064      	movs	r0, #100	@ 0x64
 80019d4:	f002 fcce 	bl	8004374 <osDelay>
	  performTest(&levels5);
 80019d8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fa07 	bl	8000df0 <performTest>
	  osDelay(1000);
 80019e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e6:	f002 fcc5 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ee:	2207      	movs	r2, #7
 80019f0:	498c      	ldr	r1, [pc, #560]	@ (8001c24 <Test+0x3cc>)
 80019f2:	488b      	ldr	r0, [pc, #556]	@ (8001c20 <Test+0x3c8>)
 80019f4:	f002 f99c 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(1000);
 80019f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019fc:	f002 fcba 	bl	8004374 <osDelay>
	  performTest(&levels6);
 8001a00:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff f9f3 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001a0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a0e:	f002 fcb1 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a16:	2207      	movs	r2, #7
 8001a18:	4982      	ldr	r1, [pc, #520]	@ (8001c24 <Test+0x3cc>)
 8001a1a:	4881      	ldr	r0, [pc, #516]	@ (8001c20 <Test+0x3c8>)
 8001a1c:	f002 f988 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(1000);
 8001a20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a24:	f002 fca6 	bl	8004374 <osDelay>
	  performTest(&levels7);
 8001a28:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff f9df 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001a32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a36:	f002 fc9d 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a3e:	2207      	movs	r2, #7
 8001a40:	4978      	ldr	r1, [pc, #480]	@ (8001c24 <Test+0x3cc>)
 8001a42:	4877      	ldr	r0, [pc, #476]	@ (8001c20 <Test+0x3c8>)
 8001a44:	f002 f974 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(1000);
 8001a48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a4c:	f002 fc92 	bl	8004374 <osDelay>
	  performTest(&levels8);
 8001a50:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f9cb 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001a5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a5e:	f002 fc89 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a66:	2207      	movs	r2, #7
 8001a68:	496e      	ldr	r1, [pc, #440]	@ (8001c24 <Test+0x3cc>)
 8001a6a:	486d      	ldr	r0, [pc, #436]	@ (8001c20 <Test+0x3c8>)
 8001a6c:	f002 f960 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(1000);
 8001a70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a74:	f002 fc7e 	bl	8004374 <osDelay>
	  performTest(&levels9);
 8001a78:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff f9b7 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001a82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a86:	f002 fc75 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a8e:	2207      	movs	r2, #7
 8001a90:	4964      	ldr	r1, [pc, #400]	@ (8001c24 <Test+0x3cc>)
 8001a92:	4863      	ldr	r0, [pc, #396]	@ (8001c20 <Test+0x3c8>)
 8001a94:	f002 f94c 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(100);
 8001a98:	2064      	movs	r0, #100	@ 0x64
 8001a9a:	f002 fc6b 	bl	8004374 <osDelay>
	  performTest(&levels10);
 8001a9e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f9a4 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001aa8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aac:	f002 fc62 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	495b      	ldr	r1, [pc, #364]	@ (8001c24 <Test+0x3cc>)
 8001ab8:	4859      	ldr	r0, [pc, #356]	@ (8001c20 <Test+0x3c8>)
 8001aba:	f002 f939 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(100);
 8001abe:	2064      	movs	r0, #100	@ 0x64
 8001ac0:	f002 fc58 	bl	8004374 <osDelay>
	  performTest(&levels11);
 8001ac4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff f991 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001ace:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ad2:	f002 fc4f 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ada:	2207      	movs	r2, #7
 8001adc:	4951      	ldr	r1, [pc, #324]	@ (8001c24 <Test+0x3cc>)
 8001ade:	4850      	ldr	r0, [pc, #320]	@ (8001c20 <Test+0x3c8>)
 8001ae0:	f002 f926 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(100);
 8001ae4:	2064      	movs	r0, #100	@ 0x64
 8001ae6:	f002 fc45 	bl	8004374 <osDelay>
	  performTest(&levels12);
 8001aea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f97e 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001af4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001af8:	f002 fc3c 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b00:	2207      	movs	r2, #7
 8001b02:	4948      	ldr	r1, [pc, #288]	@ (8001c24 <Test+0x3cc>)
 8001b04:	4846      	ldr	r0, [pc, #280]	@ (8001c20 <Test+0x3c8>)
 8001b06:	f002 f913 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(100);
 8001b0a:	2064      	movs	r0, #100	@ 0x64
 8001b0c:	f002 fc32 	bl	8004374 <osDelay>
	  performTest(&levels13);
 8001b10:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f96b 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001b1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b1e:	f002 fc29 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b26:	2207      	movs	r2, #7
 8001b28:	493e      	ldr	r1, [pc, #248]	@ (8001c24 <Test+0x3cc>)
 8001b2a:	483d      	ldr	r0, [pc, #244]	@ (8001c20 <Test+0x3c8>)
 8001b2c:	f002 f900 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(100);
 8001b30:	2064      	movs	r0, #100	@ 0x64
 8001b32:	f002 fc1f 	bl	8004374 <osDelay>
	  performTest(&levels14);
 8001b36:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f958 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001b40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b44:	f002 fc16 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	4935      	ldr	r1, [pc, #212]	@ (8001c24 <Test+0x3cc>)
 8001b50:	4833      	ldr	r0, [pc, #204]	@ (8001c20 <Test+0x3c8>)
 8001b52:	f002 f8ed 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(100);
 8001b56:	2064      	movs	r0, #100	@ 0x64
 8001b58:	f002 fc0c 	bl	8004374 <osDelay>
	  performTest(&levels15);
 8001b5c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f945 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001b66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b6a:	f002 fc03 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b72:	2207      	movs	r2, #7
 8001b74:	492b      	ldr	r1, [pc, #172]	@ (8001c24 <Test+0x3cc>)
 8001b76:	482a      	ldr	r0, [pc, #168]	@ (8001c20 <Test+0x3c8>)
 8001b78:	f002 f8da 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(100);
 8001b7c:	2064      	movs	r0, #100	@ 0x64
 8001b7e:	f002 fbf9 	bl	8004374 <osDelay>
	  performTest(&levels16);
 8001b82:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f932 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001b8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b90:	f002 fbf0 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b98:	2207      	movs	r2, #7
 8001b9a:	4922      	ldr	r1, [pc, #136]	@ (8001c24 <Test+0x3cc>)
 8001b9c:	4820      	ldr	r0, [pc, #128]	@ (8001c20 <Test+0x3c8>)
 8001b9e:	f002 f8c7 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(100);
 8001ba2:	2064      	movs	r0, #100	@ 0x64
 8001ba4:	f002 fbe6 	bl	8004374 <osDelay>
	  performTest(&levels17);
 8001ba8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f91f 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001bb2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bb6:	f002 fbdd 	bl	8004374 <osDelay>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	4918      	ldr	r1, [pc, #96]	@ (8001c24 <Test+0x3cc>)
 8001bc2:	4817      	ldr	r0, [pc, #92]	@ (8001c20 <Test+0x3c8>)
 8001bc4:	f002 f8b4 	bl	8003d30 <HAL_UART_Transmit>
 8001bc8:	e02e      	b.n	8001c28 <Test+0x3d0>
 8001bca:	bf00      	nop
 8001bcc:	006d6f63 	.word	0x006d6f63
 8001bd0:	3f8ccccd 	.word	0x3f8ccccd
 8001bd4:	40a00000 	.word	0x40a00000
 8001bd8:	40400000 	.word	0x40400000
 8001bdc:	40333333 	.word	0x40333333
 8001be0:	3fe3d70a 	.word	0x3fe3d70a
 8001be4:	3fe66666 	.word	0x3fe66666
 8001be8:	40866666 	.word	0x40866666
 8001bec:	00352c34 	.word	0x00352c34
 8001bf0:	08009834 	.word	0x08009834
 8001bf4:	08009838 	.word	0x08009838
 8001bf8:	0800983c 	.word	0x0800983c
 8001bfc:	08009840 	.word	0x08009840
 8001c00:	08009844 	.word	0x08009844
 8001c04:	08009848 	.word	0x08009848
 8001c08:	0800984c 	.word	0x0800984c
 8001c0c:	08009850 	.word	0x08009850
 8001c10:	08009854 	.word	0x08009854
 8001c14:	0800985c 	.word	0x0800985c
 8001c18:	200001f4 	.word	0x200001f4
 8001c1c:	08009860 	.word	0x08009860
 8001c20:	2000026c 	.word	0x2000026c
 8001c24:	08009864 	.word	0x08009864
	  osDelay(100);
 8001c28:	2064      	movs	r0, #100	@ 0x64
 8001c2a:	f002 fba3 	bl	8004374 <osDelay>
	  performTest(&levels175);
 8001c2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f8dc 	bl	8000df0 <performTest>
	  osDelay(1000);
 8001c38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c3c:	f002 fb9a 	bl	8004374 <osDelay>


	  HAL_UART_Transmit(&huart2, (uint8_t *)"CHANGE\n", 7, HAL_MAX_DELAY);
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c44:	2207      	movs	r2, #7
 8001c46:	4950      	ldr	r1, [pc, #320]	@ (8001d88 <Test+0x530>)
 8001c48:	4850      	ldr	r0, [pc, #320]	@ (8001d8c <Test+0x534>)
 8001c4a:	f002 f871 	bl	8003d30 <HAL_UART_Transmit>
	  osDelay(1000);
 8001c4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c52:	f002 fb8f 	bl	8004374 <osDelay>

	  compare(&toComp,&levels45);
 8001c56:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8001c5a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f9e1 	bl	8001028 <compare>
	  compare(&toComp,&levels5);
 8001c66:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001c6a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f9d9 	bl	8001028 <compare>
	  compare(&toComp,&levels6);
 8001c76:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8001c7a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f9d1 	bl	8001028 <compare>
	  compare(&toComp,&levels7);
 8001c86:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 8001c8a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f9c9 	bl	8001028 <compare>
	  compare(&toComp,&levels8);
 8001c96:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8001c9a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f9c1 	bl	8001028 <compare>
	  compare(&toComp,&levels9);
 8001ca6:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8001caa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f9b9 	bl	8001028 <compare>
	  compare(&toComp,&levels10);
 8001cb6:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8001cba:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f9b1 	bl	8001028 <compare>
	  compare(&toComp,&levels11);
 8001cc6:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8001cca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f9a9 	bl	8001028 <compare>
	  compare(&toComp,&levels12);
 8001cd6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001cda:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f9a1 	bl	8001028 <compare>
	  compare(&toComp,&levels13);
 8001ce6:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8001cea:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff f999 	bl	8001028 <compare>
	  compare(&toComp,&levels14);
 8001cf6:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8001cfa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f991 	bl	8001028 <compare>
	  compare(&toComp,&levels15);
 8001d06:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001d0a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff f989 	bl	8001028 <compare>
	  compare(&toComp,&levels16);
 8001d16:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8001d1a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f981 	bl	8001028 <compare>
	  compare(&toComp,&levels17);
 8001d26:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001d2a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f979 	bl	8001028 <compare>
	  compare(&toComp,&levels175);
 8001d36:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001d3a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff f971 	bl	8001028 <compare>

	  HAL_UART_Transmit(&huart2, "somUART\n", 8, HAL_MAX_DELAY);
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	4910      	ldr	r1, [pc, #64]	@ (8001d90 <Test+0x538>)
 8001d4e:	480f      	ldr	r0, [pc, #60]	@ (8001d8c <Test+0x534>)
 8001d50:	f001 ffee 	bl	8003d30 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, &uart3_buffer, sizeof(znakrx1), HAL_MAX_DELAY);
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d58:	2201      	movs	r2, #1
 8001d5a:	490e      	ldr	r1, [pc, #56]	@ (8001d94 <Test+0x53c>)
 8001d5c:	480b      	ldr	r0, [pc, #44]	@ (8001d8c <Test+0x534>)
 8001d5e:	f001 ffe7 	bl	8003d30 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, "\n", 1, HAL_MAX_DELAY);
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d66:	2201      	movs	r2, #1
 8001d68:	490b      	ldr	r1, [pc, #44]	@ (8001d98 <Test+0x540>)
 8001d6a:	4808      	ldr	r0, [pc, #32]	@ (8001d8c <Test+0x534>)
 8001d6c:	f001 ffe0 	bl	8003d30 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, "END\n", 4, HAL_MAX_DELAY);
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d74:	2204      	movs	r2, #4
 8001d76:	4909      	ldr	r1, [pc, #36]	@ (8001d9c <Test+0x544>)
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <Test+0x534>)
 8001d7a:	f001 ffd9 	bl	8003d30 <HAL_UART_Transmit>

 }
 8001d7e:	bf00      	nop
 8001d80:	f507 772c 	add.w	r7, r7, #688	@ 0x2b0
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	08009864 	.word	0x08009864
 8001d8c:	2000026c 	.word	0x2000026c
 8001d90:	0800986c 	.word	0x0800986c
 8001d94:	20000308 	.word	0x20000308
 8001d98:	08009860 	.word	0x08009860
 8001d9c:	08009878 	.word	0x08009878

08001da0 <Uartcom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uartcom */
void Uartcom(void *argument)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Uartcom */
  /* Infinite loop */
HAL_StatusTypeDef status;
int buffer_index1=0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  for(;;)
  {

    status=HAL_UART_Receive(&huart1, (uint8_t *)&znakrx1,1,0xFFFF);
 8001dac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001db0:	2201      	movs	r2, #1
 8001db2:	490b      	ldr	r1, [pc, #44]	@ (8001de0 <Uartcom+0x40>)
 8001db4:	480b      	ldr	r0, [pc, #44]	@ (8001de4 <Uartcom+0x44>)
 8001db6:	f002 f83e 	bl	8003e36 <HAL_UART_Receive>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	72fb      	strb	r3, [r7, #11]

    //if(status==HAL_OK){
    	if (buffer_index < BUFFER_SIZE - 1)
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <Uartcom+0x48>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d8f0      	bhi.n	8001dac <Uartcom+0xc>
    	                {
    	                    uart3_buffer[buffer_index1] = znakrx1;
 8001dca:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <Uartcom+0x40>)
 8001dcc:	7819      	ldrb	r1, [r3, #0]
 8001dce:	4a07      	ldr	r2, [pc, #28]	@ (8001dec <Uartcom+0x4c>)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	701a      	strb	r2, [r3, #0]
    	                    //uart3_buffer[buffer_index1++] = '\0';
    	                    ++buffer_index1;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
    status=HAL_UART_Receive(&huart1, (uint8_t *)&znakrx1,1,0xFFFF);
 8001dde:	e7e5      	b.n	8001dac <Uartcom+0xc>
 8001de0:	20000304 	.word	0x20000304
 8001de4:	20000224 	.word	0x20000224
 8001de8:	20000708 	.word	0x20000708
 8001dec:	20000308 	.word	0x20000308

08001df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <Error_Handler+0x8>

08001dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e02:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_MspInit+0x68>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <HAL_MspInit+0x68>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6193      	str	r3, [r2, #24]
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_MspInit+0x68>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_MspInit+0x68>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <HAL_MspInit+0x68>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <HAL_MspInit+0x68>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	210f      	movs	r1, #15
 8001e36:	f06f 0001 	mvn.w	r0, #1
 8001e3a:	f000 ffb8 	bl	8002dae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <HAL_MspInit+0x6c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <HAL_MspInit+0x6c>)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010000 	.word	0x40010000

08001e6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	@ 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0318 	add.w	r3, r7, #24
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2a      	ldr	r2, [pc, #168]	@ (8001f30 <HAL_ADC_MspInit+0xc4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d14d      	bne.n	8001f28 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e8c:	4b29      	ldr	r3, [pc, #164]	@ (8001f34 <HAL_ADC_MspInit+0xc8>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4a28      	ldr	r2, [pc, #160]	@ (8001f34 <HAL_ADC_MspInit+0xc8>)
 8001e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e96:	6193      	str	r3, [r2, #24]
 8001e98:	4b26      	ldr	r3, [pc, #152]	@ (8001f34 <HAL_ADC_MspInit+0xc8>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea4:	4b23      	ldr	r3, [pc, #140]	@ (8001f34 <HAL_ADC_MspInit+0xc8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a22      	ldr	r2, [pc, #136]	@ (8001f34 <HAL_ADC_MspInit+0xc8>)
 8001eaa:	f043 0310 	orr.w	r3, r3, #16
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b20      	ldr	r3, [pc, #128]	@ (8001f34 <HAL_ADC_MspInit+0xc8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <HAL_ADC_MspInit+0xc8>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f34 <HAL_ADC_MspInit+0xc8>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6193      	str	r3, [r2, #24]
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <HAL_ADC_MspInit+0xc8>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed4:	4b17      	ldr	r3, [pc, #92]	@ (8001f34 <HAL_ADC_MspInit+0xc8>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	4a16      	ldr	r2, [pc, #88]	@ (8001f34 <HAL_ADC_MspInit+0xc8>)
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	6193      	str	r3, [r2, #24]
 8001ee0:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <HAL_ADC_MspInit+0xc8>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = VIN42_Pin|VIN25_Pin|Vin15_Pin;
 8001eec:	2323      	movs	r3, #35	@ 0x23
 8001eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef4:	f107 0318 	add.w	r3, r7, #24
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480f      	ldr	r0, [pc, #60]	@ (8001f38 <HAL_ADC_MspInit+0xcc>)
 8001efc:	f000 ff8e 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VIN28_Pin|VIN18_Pin|VIN30_Pin|VIN11_Pin;
 8001f00:	23d2      	movs	r3, #210	@ 0xd2
 8001f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f04:	2303      	movs	r3, #3
 8001f06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 0318 	add.w	r3, r7, #24
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	480b      	ldr	r0, [pc, #44]	@ (8001f3c <HAL_ADC_MspInit+0xd0>)
 8001f10:	f000 ff84 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VIN178_Pin;
 8001f14:	2301      	movs	r3, #1
 8001f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VIN178_GPIO_Port, &GPIO_InitStruct);
 8001f1c:	f107 0318 	add.w	r3, r7, #24
 8001f20:	4619      	mov	r1, r3
 8001f22:	4807      	ldr	r0, [pc, #28]	@ (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001f24:	f000 ff7a 	bl	8002e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	@ 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40012400 	.word	0x40012400
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40011000 	.word	0x40011000
 8001f3c:	40010800 	.word	0x40010800
 8001f40:	40010c00 	.word	0x40010c00

08001f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	@ 0x30
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0320 	add.w	r3, r7, #32
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a4d      	ldr	r2, [pc, #308]	@ (8002094 <HAL_UART_MspInit+0x150>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d132      	bne.n	8001fca <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f64:	4b4c      	ldr	r3, [pc, #304]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a4b      	ldr	r2, [pc, #300]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8001f6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b49      	ldr	r3, [pc, #292]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b46      	ldr	r3, [pc, #280]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a45      	ldr	r2, [pc, #276]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b43      	ldr	r3, [pc, #268]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f107 0320 	add.w	r3, r7, #32
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	483c      	ldr	r0, [pc, #240]	@ (800209c <HAL_UART_MspInit+0x158>)
 8001faa:	f000 ff37 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4836      	ldr	r0, [pc, #216]	@ (800209c <HAL_UART_MspInit+0x158>)
 8001fc4:	f000 ff2a 	bl	8002e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fc8:	e060      	b.n	800208c <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART2)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a34      	ldr	r2, [pc, #208]	@ (80020a0 <HAL_UART_MspInit+0x15c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d124      	bne.n	800201e <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fd4:	4b30      	ldr	r3, [pc, #192]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	4a2f      	ldr	r2, [pc, #188]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8001fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fde:	61d3      	str	r3, [r2, #28]
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a29      	ldr	r2, [pc, #164]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b27      	ldr	r3, [pc, #156]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002004:	230c      	movs	r3, #12
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2302      	movs	r3, #2
 800200e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 0320 	add.w	r3, r7, #32
 8002014:	4619      	mov	r1, r3
 8002016:	4821      	ldr	r0, [pc, #132]	@ (800209c <HAL_UART_MspInit+0x158>)
 8002018:	f000 ff00 	bl	8002e1c <HAL_GPIO_Init>
}
 800201c:	e036      	b.n	800208c <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a20      	ldr	r2, [pc, #128]	@ (80020a4 <HAL_UART_MspInit+0x160>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d131      	bne.n	800208c <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002028:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <HAL_UART_MspInit+0x154>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	4a1a      	ldr	r2, [pc, #104]	@ (8002098 <HAL_UART_MspInit+0x154>)
 800202e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002032:	61d3      	str	r3, [r2, #28]
 8002034:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002040:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <HAL_UART_MspInit+0x154>)
 8002046:	f043 0308 	orr.w	r3, r3, #8
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_UART_MspInit+0x154>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800205c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 0320 	add.w	r3, r7, #32
 800206a:	4619      	mov	r1, r3
 800206c:	480e      	ldr	r0, [pc, #56]	@ (80020a8 <HAL_UART_MspInit+0x164>)
 800206e:	f000 fed5 	bl	8002e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002072:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002080:	f107 0320 	add.w	r3, r7, #32
 8002084:	4619      	mov	r1, r3
 8002086:	4808      	ldr	r0, [pc, #32]	@ (80020a8 <HAL_UART_MspInit+0x164>)
 8002088:	f000 fec8 	bl	8002e1c <HAL_GPIO_Init>
}
 800208c:	bf00      	nop
 800208e:	3730      	adds	r7, #48	@ 0x30
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40013800 	.word	0x40013800
 8002098:	40021000 	.word	0x40021000
 800209c:	40010800 	.word	0x40010800
 80020a0:	40004400 	.word	0x40004400
 80020a4:	40004800 	.word	0x40004800
 80020a8:	40010c00 	.word	0x40010c00

080020ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <NMI_Handler+0x4>

080020b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <HardFault_Handler+0x4>

080020bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <MemManage_Handler+0x4>

080020c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <BusFault_Handler+0x4>

080020cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <UsageFault_Handler+0x4>

080020d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e4:	f000 f944 	bl	8002370 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020e8:	f003 fd9e 	bl	8005c28 <xTaskGetSchedulerState>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020f2:	f004 fb09 	bl	8006708 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}

080020fa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020fe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002102:	f001 f827 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}

0800210a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  return 1;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <_kill>:

int _kill(int pid, int sig)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002122:	f005 fb4b 	bl	80077bc <__errno>
 8002126:	4603      	mov	r3, r0
 8002128:	2216      	movs	r2, #22
 800212a:	601a      	str	r2, [r3, #0]
  return -1;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_exit>:

void _exit (int status)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002140:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ffe7 	bl	8002118 <_kill>
  while (1) {}    /* Make sure we hang here */
 800214a:	bf00      	nop
 800214c:	e7fd      	b.n	800214a <_exit+0x12>

0800214e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e00a      	b.n	8002176 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002160:	f3af 8000 	nop.w
 8002164:	4601      	mov	r1, r0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	60ba      	str	r2, [r7, #8]
 800216c:	b2ca      	uxtb	r2, r1
 800216e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3301      	adds	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	dbf0      	blt.n	8002160 <_read+0x12>
  }

  return len;
 800217e:	687b      	ldr	r3, [r7, #4]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e009      	b.n	80021ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	60ba      	str	r2, [r7, #8]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fdce 	bl	8000d44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3301      	adds	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dbf1      	blt.n	800219a <_write+0x12>
  }
  return len;
 80021b6:	687b      	ldr	r3, [r7, #4]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_close>:

int _close(int file)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021e6:	605a      	str	r2, [r3, #4]
  return 0;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <_isatty>:

int _isatty(int file)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	@ (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f005 fab4 	bl	80077bc <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20005000 	.word	0x20005000
 8002280:	00000400 	.word	0x00000400
 8002284:	2000070c 	.word	0x2000070c
 8002288:	20002240 	.word	0x20002240

0800228c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002298:	f7ff fff8 	bl	800228c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800229c:	480b      	ldr	r0, [pc, #44]	@ (80022cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800229e:	490c      	ldr	r1, [pc, #48]	@ (80022d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022a0:	4a0c      	ldr	r2, [pc, #48]	@ (80022d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022b4:	4c09      	ldr	r4, [pc, #36]	@ (80022dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022c2:	f005 fa81 	bl	80077c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022c6:	f7ff f90f 	bl	80014e8 <main>
  bx lr
 80022ca:	4770      	bx	lr
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80022d4:	08009ca0 	.word	0x08009ca0
  ldr r2, =_sbss
 80022d8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80022dc:	20002240 	.word	0x20002240

080022e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC1_2_IRQHandler>
	...

080022e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e8:	4b08      	ldr	r3, [pc, #32]	@ (800230c <HAL_Init+0x28>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a07      	ldr	r2, [pc, #28]	@ (800230c <HAL_Init+0x28>)
 80022ee:	f043 0310 	orr.w	r3, r3, #16
 80022f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f000 fd4f 	bl	8002d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fa:	200f      	movs	r0, #15
 80022fc:	f000 f808 	bl	8002310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002300:	f7ff fd7c 	bl	8001dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40022000 	.word	0x40022000

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002318:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <HAL_InitTick+0x54>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <HAL_InitTick+0x58>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fd67 	bl	8002e02 <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800234c:	f000 fd2f 	bl	8002dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	@ (800236c <HAL_InitTick+0x5c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000000 	.word	0x20000000
 8002368:	20000008 	.word	0x20000008
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b05      	ldr	r3, [pc, #20]	@ (800238c <HAL_IncTick+0x1c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_IncTick+0x20>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a03      	ldr	r2, [pc, #12]	@ (8002390 <HAL_IncTick+0x20>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	20000008 	.word	0x20000008
 8002390:	20000710 	.word	0x20000710

08002394 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b02      	ldr	r3, [pc, #8]	@ (80023a4 <HAL_GetTick+0x10>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	20000710 	.word	0x20000710

080023a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0be      	b.n	8002548 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fd40 	bl	8001e6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fbc5 	bl	8002b7c <ADC_ConversionStop_Disable>
 80023f2:	4603      	mov	r3, r0
 80023f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 8099 	bne.w	8002536 <HAL_ADC_Init+0x18e>
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f040 8095 	bne.w	8002536 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002414:	f023 0302 	bic.w	r3, r3, #2
 8002418:	f043 0202 	orr.w	r2, r3, #2
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002428:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7b1b      	ldrb	r3, [r3, #12]
 800242e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002430:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4313      	orrs	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002440:	d003      	beq.n	800244a <HAL_ADC_Init+0xa2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <HAL_ADC_Init+0xa8>
 800244a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800244e:	e000      	b.n	8002452 <HAL_ADC_Init+0xaa>
 8002450:	2300      	movs	r3, #0
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7d1b      	ldrb	r3, [r3, #20]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d119      	bne.n	8002494 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7b1b      	ldrb	r3, [r3, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	3b01      	subs	r3, #1
 800246e:	035a      	lsls	r2, r3, #13
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	e00b      	b.n	8002494 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	4b28      	ldr	r3, [pc, #160]	@ (8002550 <HAL_ADC_Init+0x1a8>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024c4:	d003      	beq.n	80024ce <HAL_ADC_Init+0x126>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d104      	bne.n	80024d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	051b      	lsls	r3, r3, #20
 80024d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024de:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	4b18      	ldr	r3, [pc, #96]	@ (8002554 <HAL_ADC_Init+0x1ac>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d10b      	bne.n	8002514 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002506:	f023 0303 	bic.w	r3, r3, #3
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002512:	e018      	b.n	8002546 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	f023 0312 	bic.w	r3, r3, #18
 800251c:	f043 0210 	orr.w	r2, r3, #16
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002534:	e007      	b.n	8002546 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253a:	f043 0210 	orr.w	r2, r3, #16
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002546:	7dfb      	ldrb	r3, [r7, #23]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	ffe1f7fd 	.word	0xffe1f7fd
 8002554:	ff1f0efe 	.word	0xff1f0efe

08002558 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Start+0x1a>
 800256e:	2302      	movs	r3, #2
 8002570:	e098      	b.n	80026a4 <HAL_ADC_Start+0x14c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 faa4 	bl	8002ac8 <ADC_Enable>
 8002580:	4603      	mov	r3, r0
 8002582:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 8087 	bne.w	800269a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a41      	ldr	r2, [pc, #260]	@ (80026ac <HAL_ADC_Start+0x154>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d105      	bne.n	80025b6 <HAL_ADC_Start+0x5e>
 80025aa:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <HAL_ADC_Start+0x158>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d115      	bne.n	80025e2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d026      	beq.n	800261e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025e0:	e01d      	b.n	800261e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2f      	ldr	r2, [pc, #188]	@ (80026b0 <HAL_ADC_Start+0x158>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <HAL_ADC_Start+0xaa>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2b      	ldr	r2, [pc, #172]	@ (80026ac <HAL_ADC_Start+0x154>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10d      	bne.n	800261e <HAL_ADC_Start+0xc6>
 8002602:	4b2b      	ldr	r3, [pc, #172]	@ (80026b0 <HAL_ADC_Start+0x158>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002612:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002616:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002622:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	f023 0206 	bic.w	r2, r3, #6
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002636:	e002      	b.n	800263e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f06f 0202 	mvn.w	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800265a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800265e:	d113      	bne.n	8002688 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002664:	4a11      	ldr	r2, [pc, #68]	@ (80026ac <HAL_ADC_Start+0x154>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d105      	bne.n	8002676 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800266a:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <HAL_ADC_Start+0x158>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002672:	2b00      	cmp	r3, #0
 8002674:	d108      	bne.n	8002688 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	e00c      	b.n	80026a2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	e003      	b.n	80026a2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40012800 	.word	0x40012800
 80026b0:	40012400 	.word	0x40012400

080026b4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80026ca:	f7ff fe63 	bl	8002394 <HAL_GetTick>
 80026ce:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00b      	beq.n	80026f6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	f043 0220 	orr.w	r2, r3, #32
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0d3      	b.n	800289e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d131      	bne.n	8002768 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800270e:	2b00      	cmp	r3, #0
 8002710:	d12a      	bne.n	8002768 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002712:	e021      	b.n	8002758 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800271a:	d01d      	beq.n	8002758 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_ADC_PollForConversion+0x7e>
 8002722:	f7ff fe37 	bl	8002394 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d212      	bcs.n	8002758 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10b      	bne.n	8002758 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	f043 0204 	orr.w	r2, r3, #4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0a2      	b.n	800289e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0d6      	beq.n	8002714 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002766:	e070      	b.n	800284a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002768:	4b4f      	ldr	r3, [pc, #316]	@ (80028a8 <HAL_ADC_PollForConversion+0x1f4>)
 800276a:	681c      	ldr	r4, [r3, #0]
 800276c:	2002      	movs	r0, #2
 800276e:	f001 f9d9 	bl	8003b24 <HAL_RCCEx_GetPeriphCLKFreq>
 8002772:	4603      	mov	r3, r0
 8002774:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6919      	ldr	r1, [r3, #16]
 800277e:	4b4b      	ldr	r3, [pc, #300]	@ (80028ac <HAL_ADC_PollForConversion+0x1f8>)
 8002780:	400b      	ands	r3, r1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d118      	bne.n	80027b8 <HAL_ADC_PollForConversion+0x104>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68d9      	ldr	r1, [r3, #12]
 800278c:	4b48      	ldr	r3, [pc, #288]	@ (80028b0 <HAL_ADC_PollForConversion+0x1fc>)
 800278e:	400b      	ands	r3, r1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d111      	bne.n	80027b8 <HAL_ADC_PollForConversion+0x104>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6919      	ldr	r1, [r3, #16]
 800279a:	4b46      	ldr	r3, [pc, #280]	@ (80028b4 <HAL_ADC_PollForConversion+0x200>)
 800279c:	400b      	ands	r3, r1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d108      	bne.n	80027b4 <HAL_ADC_PollForConversion+0x100>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68d9      	ldr	r1, [r3, #12]
 80027a8:	4b43      	ldr	r3, [pc, #268]	@ (80028b8 <HAL_ADC_PollForConversion+0x204>)
 80027aa:	400b      	ands	r3, r1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_PollForConversion+0x100>
 80027b0:	2314      	movs	r3, #20
 80027b2:	e020      	b.n	80027f6 <HAL_ADC_PollForConversion+0x142>
 80027b4:	2329      	movs	r3, #41	@ 0x29
 80027b6:	e01e      	b.n	80027f6 <HAL_ADC_PollForConversion+0x142>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6919      	ldr	r1, [r3, #16]
 80027be:	4b3d      	ldr	r3, [pc, #244]	@ (80028b4 <HAL_ADC_PollForConversion+0x200>)
 80027c0:	400b      	ands	r3, r1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_ADC_PollForConversion+0x120>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68d9      	ldr	r1, [r3, #12]
 80027cc:	4b3a      	ldr	r3, [pc, #232]	@ (80028b8 <HAL_ADC_PollForConversion+0x204>)
 80027ce:	400b      	ands	r3, r1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <HAL_ADC_PollForConversion+0x13c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6919      	ldr	r1, [r3, #16]
 80027da:	4b38      	ldr	r3, [pc, #224]	@ (80028bc <HAL_ADC_PollForConversion+0x208>)
 80027dc:	400b      	ands	r3, r1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d108      	bne.n	80027f4 <HAL_ADC_PollForConversion+0x140>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68d9      	ldr	r1, [r3, #12]
 80027e8:	4b34      	ldr	r3, [pc, #208]	@ (80028bc <HAL_ADC_PollForConversion+0x208>)
 80027ea:	400b      	ands	r3, r1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_PollForConversion+0x140>
 80027f0:	2354      	movs	r3, #84	@ 0x54
 80027f2:	e000      	b.n	80027f6 <HAL_ADC_PollForConversion+0x142>
 80027f4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027fc:	e021      	b.n	8002842 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002804:	d01a      	beq.n	800283c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_ADC_PollForConversion+0x168>
 800280c:	f7ff fdc2 	bl	8002394 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d20f      	bcs.n	800283c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	429a      	cmp	r2, r3
 8002822:	d90b      	bls.n	800283c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	f043 0204 	orr.w	r2, r3, #4
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e030      	b.n	800289e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3301      	adds	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	429a      	cmp	r2, r3
 8002848:	d8d9      	bhi.n	80027fe <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f06f 0212 	mvn.w	r2, #18
 8002852:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800286a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800286e:	d115      	bne.n	800289c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002874:	2b00      	cmp	r3, #0
 8002876:	d111      	bne.n	800289c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002888:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002894:	f043 0201 	orr.w	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000000 	.word	0x20000000
 80028ac:	24924924 	.word	0x24924924
 80028b0:	00924924 	.word	0x00924924
 80028b4:	12492492 	.word	0x12492492
 80028b8:	00492492 	.word	0x00492492
 80028bc:	00249249 	.word	0x00249249

080028c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x20>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e0dc      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x1da>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b06      	cmp	r3, #6
 8002906:	d81c      	bhi.n	8002942 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	3b05      	subs	r3, #5
 800291a:	221f      	movs	r2, #31
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	4019      	ands	r1, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3b05      	subs	r3, #5
 8002934:	fa00 f203 	lsl.w	r2, r0, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002940:	e03c      	b.n	80029bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b0c      	cmp	r3, #12
 8002948:	d81c      	bhi.n	8002984 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	3b23      	subs	r3, #35	@ 0x23
 800295c:	221f      	movs	r2, #31
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	4019      	ands	r1, r3
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	3b23      	subs	r3, #35	@ 0x23
 8002976:	fa00 f203 	lsl.w	r2, r0, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	631a      	str	r2, [r3, #48]	@ 0x30
 8002982:	e01b      	b.n	80029bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	3b41      	subs	r3, #65	@ 0x41
 8002996:	221f      	movs	r2, #31
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	4019      	ands	r1, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	3b41      	subs	r3, #65	@ 0x41
 80029b0:	fa00 f203 	lsl.w	r2, r0, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b09      	cmp	r3, #9
 80029c2:	d91c      	bls.n	80029fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68d9      	ldr	r1, [r3, #12]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	3b1e      	subs	r3, #30
 80029d6:	2207      	movs	r2, #7
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	4019      	ands	r1, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6898      	ldr	r0, [r3, #8]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	3b1e      	subs	r3, #30
 80029f0:	fa00 f203 	lsl.w	r2, r0, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	e019      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6919      	ldr	r1, [r3, #16]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	2207      	movs	r2, #7
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	4019      	ands	r1, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	6898      	ldr	r0, [r3, #8]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	fa00 f203 	lsl.w	r2, r0, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d003      	beq.n	8002a42 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a3e:	2b11      	cmp	r3, #17
 8002a40:	d132      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1d      	ldr	r2, [pc, #116]	@ (8002abc <HAL_ADC_ConfigChannel+0x1e4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d125      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d126      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002a68:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d11a      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a72:	4b13      	ldr	r3, [pc, #76]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a13      	ldr	r2, [pc, #76]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a78:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7c:	0c9a      	lsrs	r2, r3, #18
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a88:	e002      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f9      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x1b2>
 8002a96:	e007      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	40012400 	.word	0x40012400
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	431bde83 	.word	0x431bde83

08002ac8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d040      	beq.n	8002b68 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002af6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <ADC_Enable+0xac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1f      	ldr	r2, [pc, #124]	@ (8002b78 <ADC_Enable+0xb0>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	0c9b      	lsrs	r3, r3, #18
 8002b02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b04:	e002      	b.n	8002b0c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f9      	bne.n	8002b06 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b12:	f7ff fc3f 	bl	8002394 <HAL_GetTick>
 8002b16:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b18:	e01f      	b.n	8002b5a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b1a:	f7ff fc3b 	bl	8002394 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d918      	bls.n	8002b5a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d011      	beq.n	8002b5a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3a:	f043 0210 	orr.w	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e007      	b.n	8002b6a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d1d8      	bne.n	8002b1a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000000 	.word	0x20000000
 8002b78:	431bde83 	.word	0x431bde83

08002b7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d12e      	bne.n	8002bf4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ba6:	f7ff fbf5 	bl	8002394 <HAL_GetTick>
 8002baa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bac:	e01b      	b.n	8002be6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bae:	f7ff fbf1 	bl	8002394 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d914      	bls.n	8002be6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10d      	bne.n	8002be6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d0dc      	beq.n	8002bae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c10:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c32:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	60d3      	str	r3, [r2, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c4c:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <__NVIC_GetPriorityGrouping+0x18>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f003 0307 	and.w	r3, r3, #7
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	db0b      	blt.n	8002c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	f003 021f 	and.w	r2, r3, #31
 8002c7c:	4906      	ldr	r1, [pc, #24]	@ (8002c98 <__NVIC_EnableIRQ+0x34>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	2001      	movs	r0, #1
 8002c86:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	e000e100 	.word	0xe000e100

08002c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	db0a      	blt.n	8002cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	490c      	ldr	r1, [pc, #48]	@ (8002ce8 <__NVIC_SetPriority+0x4c>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	0112      	lsls	r2, r2, #4
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc4:	e00a      	b.n	8002cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4908      	ldr	r1, [pc, #32]	@ (8002cec <__NVIC_SetPriority+0x50>)
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	3b04      	subs	r3, #4
 8002cd4:	0112      	lsls	r2, r2, #4
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	440b      	add	r3, r1
 8002cda:	761a      	strb	r2, [r3, #24]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000e100 	.word	0xe000e100
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	@ 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f1c3 0307 	rsb	r3, r3, #7
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	bf28      	it	cs
 8002d0e:	2304      	movcs	r3, #4
 8002d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d902      	bls.n	8002d20 <NVIC_EncodePriority+0x30>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3b03      	subs	r3, #3
 8002d1e:	e000      	b.n	8002d22 <NVIC_EncodePriority+0x32>
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	401a      	ands	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	43d9      	mvns	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	4313      	orrs	r3, r2
         );
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	@ 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d64:	d301      	bcc.n	8002d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00f      	b.n	8002d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d94 <SysTick_Config+0x40>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d72:	210f      	movs	r1, #15
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d78:	f7ff ff90 	bl	8002c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d7c:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <SysTick_Config+0x40>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d82:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <SysTick_Config+0x40>)
 8002d84:	2207      	movs	r2, #7
 8002d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	e000e010 	.word	0xe000e010

08002d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff2d 	bl	8002c00 <__NVIC_SetPriorityGrouping>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc0:	f7ff ff42 	bl	8002c48 <__NVIC_GetPriorityGrouping>
 8002dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f7ff ff90 	bl	8002cf0 <NVIC_EncodePriority>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff5f 	bl	8002c9c <__NVIC_SetPriority>
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff35 	bl	8002c64 <__NVIC_EnableIRQ>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ffa2 	bl	8002d54 <SysTick_Config>
 8002e10:	4603      	mov	r3, r0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b08b      	sub	sp, #44	@ 0x2c
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2e:	e169      	b.n	8003104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e30:	2201      	movs	r2, #1
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f040 8158 	bne.w	80030fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4a9a      	ldr	r2, [pc, #616]	@ (80030bc <HAL_GPIO_Init+0x2a0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d05e      	beq.n	8002f16 <HAL_GPIO_Init+0xfa>
 8002e58:	4a98      	ldr	r2, [pc, #608]	@ (80030bc <HAL_GPIO_Init+0x2a0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d875      	bhi.n	8002f4a <HAL_GPIO_Init+0x12e>
 8002e5e:	4a98      	ldr	r2, [pc, #608]	@ (80030c0 <HAL_GPIO_Init+0x2a4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d058      	beq.n	8002f16 <HAL_GPIO_Init+0xfa>
 8002e64:	4a96      	ldr	r2, [pc, #600]	@ (80030c0 <HAL_GPIO_Init+0x2a4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d86f      	bhi.n	8002f4a <HAL_GPIO_Init+0x12e>
 8002e6a:	4a96      	ldr	r2, [pc, #600]	@ (80030c4 <HAL_GPIO_Init+0x2a8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d052      	beq.n	8002f16 <HAL_GPIO_Init+0xfa>
 8002e70:	4a94      	ldr	r2, [pc, #592]	@ (80030c4 <HAL_GPIO_Init+0x2a8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d869      	bhi.n	8002f4a <HAL_GPIO_Init+0x12e>
 8002e76:	4a94      	ldr	r2, [pc, #592]	@ (80030c8 <HAL_GPIO_Init+0x2ac>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d04c      	beq.n	8002f16 <HAL_GPIO_Init+0xfa>
 8002e7c:	4a92      	ldr	r2, [pc, #584]	@ (80030c8 <HAL_GPIO_Init+0x2ac>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d863      	bhi.n	8002f4a <HAL_GPIO_Init+0x12e>
 8002e82:	4a92      	ldr	r2, [pc, #584]	@ (80030cc <HAL_GPIO_Init+0x2b0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d046      	beq.n	8002f16 <HAL_GPIO_Init+0xfa>
 8002e88:	4a90      	ldr	r2, [pc, #576]	@ (80030cc <HAL_GPIO_Init+0x2b0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d85d      	bhi.n	8002f4a <HAL_GPIO_Init+0x12e>
 8002e8e:	2b12      	cmp	r3, #18
 8002e90:	d82a      	bhi.n	8002ee8 <HAL_GPIO_Init+0xcc>
 8002e92:	2b12      	cmp	r3, #18
 8002e94:	d859      	bhi.n	8002f4a <HAL_GPIO_Init+0x12e>
 8002e96:	a201      	add	r2, pc, #4	@ (adr r2, 8002e9c <HAL_GPIO_Init+0x80>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002f17 	.word	0x08002f17
 8002ea0:	08002ef1 	.word	0x08002ef1
 8002ea4:	08002f03 	.word	0x08002f03
 8002ea8:	08002f45 	.word	0x08002f45
 8002eac:	08002f4b 	.word	0x08002f4b
 8002eb0:	08002f4b 	.word	0x08002f4b
 8002eb4:	08002f4b 	.word	0x08002f4b
 8002eb8:	08002f4b 	.word	0x08002f4b
 8002ebc:	08002f4b 	.word	0x08002f4b
 8002ec0:	08002f4b 	.word	0x08002f4b
 8002ec4:	08002f4b 	.word	0x08002f4b
 8002ec8:	08002f4b 	.word	0x08002f4b
 8002ecc:	08002f4b 	.word	0x08002f4b
 8002ed0:	08002f4b 	.word	0x08002f4b
 8002ed4:	08002f4b 	.word	0x08002f4b
 8002ed8:	08002f4b 	.word	0x08002f4b
 8002edc:	08002f4b 	.word	0x08002f4b
 8002ee0:	08002ef9 	.word	0x08002ef9
 8002ee4:	08002f0d 	.word	0x08002f0d
 8002ee8:	4a79      	ldr	r2, [pc, #484]	@ (80030d0 <HAL_GPIO_Init+0x2b4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002eee:	e02c      	b.n	8002f4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	623b      	str	r3, [r7, #32]
          break;
 8002ef6:	e029      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	3304      	adds	r3, #4
 8002efe:	623b      	str	r3, [r7, #32]
          break;
 8002f00:	e024      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	3308      	adds	r3, #8
 8002f08:	623b      	str	r3, [r7, #32]
          break;
 8002f0a:	e01f      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	330c      	adds	r3, #12
 8002f12:	623b      	str	r3, [r7, #32]
          break;
 8002f14:	e01a      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d102      	bne.n	8002f24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f1e:	2304      	movs	r3, #4
 8002f20:	623b      	str	r3, [r7, #32]
          break;
 8002f22:	e013      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d105      	bne.n	8002f38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	611a      	str	r2, [r3, #16]
          break;
 8002f36:	e009      	b.n	8002f4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f38:	2308      	movs	r3, #8
 8002f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	615a      	str	r2, [r3, #20]
          break;
 8002f42:	e003      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f44:	2300      	movs	r3, #0
 8002f46:	623b      	str	r3, [r7, #32]
          break;
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          break;
 8002f4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2bff      	cmp	r3, #255	@ 0xff
 8002f50:	d801      	bhi.n	8002f56 <HAL_GPIO_Init+0x13a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	e001      	b.n	8002f5a <HAL_GPIO_Init+0x13e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2bff      	cmp	r3, #255	@ 0xff
 8002f60:	d802      	bhi.n	8002f68 <HAL_GPIO_Init+0x14c>
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	e002      	b.n	8002f6e <HAL_GPIO_Init+0x152>
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	3b08      	subs	r3, #8
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	210f      	movs	r1, #15
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	6a39      	ldr	r1, [r7, #32]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80b1 	beq.w	80030fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f9c:	4b4d      	ldr	r3, [pc, #308]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4a4c      	ldr	r2, [pc, #304]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6193      	str	r3, [r2, #24]
 8002fa8:	4b4a      	ldr	r3, [pc, #296]	@ (80030d4 <HAL_GPIO_Init+0x2b8>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fb4:	4a48      	ldr	r2, [pc, #288]	@ (80030d8 <HAL_GPIO_Init+0x2bc>)
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	220f      	movs	r2, #15
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a40      	ldr	r2, [pc, #256]	@ (80030dc <HAL_GPIO_Init+0x2c0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d013      	beq.n	8003008 <HAL_GPIO_Init+0x1ec>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a3f      	ldr	r2, [pc, #252]	@ (80030e0 <HAL_GPIO_Init+0x2c4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00d      	beq.n	8003004 <HAL_GPIO_Init+0x1e8>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a3e      	ldr	r2, [pc, #248]	@ (80030e4 <HAL_GPIO_Init+0x2c8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <HAL_GPIO_Init+0x1e4>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a3d      	ldr	r2, [pc, #244]	@ (80030e8 <HAL_GPIO_Init+0x2cc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <HAL_GPIO_Init+0x1e0>
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e006      	b.n	800300a <HAL_GPIO_Init+0x1ee>
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	e004      	b.n	800300a <HAL_GPIO_Init+0x1ee>
 8003000:	2302      	movs	r3, #2
 8003002:	e002      	b.n	800300a <HAL_GPIO_Init+0x1ee>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <HAL_GPIO_Init+0x1ee>
 8003008:	2300      	movs	r3, #0
 800300a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800300c:	f002 0203 	and.w	r2, r2, #3
 8003010:	0092      	lsls	r2, r2, #2
 8003012:	4093      	lsls	r3, r2
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800301a:	492f      	ldr	r1, [pc, #188]	@ (80030d8 <HAL_GPIO_Init+0x2bc>)
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	3302      	adds	r3, #2
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d006      	beq.n	8003042 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003034:	4b2d      	ldr	r3, [pc, #180]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	492c      	ldr	r1, [pc, #176]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]
 8003040:	e006      	b.n	8003050 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003042:	4b2a      	ldr	r3, [pc, #168]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	43db      	mvns	r3, r3
 800304a:	4928      	ldr	r1, [pc, #160]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 800304c:	4013      	ands	r3, r2
 800304e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d006      	beq.n	800306a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800305c:	4b23      	ldr	r3, [pc, #140]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	4922      	ldr	r1, [pc, #136]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	60cb      	str	r3, [r1, #12]
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800306a:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	43db      	mvns	r3, r3
 8003072:	491e      	ldr	r1, [pc, #120]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 8003074:	4013      	ands	r3, r2
 8003076:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d006      	beq.n	8003092 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003084:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	4918      	ldr	r1, [pc, #96]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
 8003090:	e006      	b.n	80030a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003092:	4b16      	ldr	r3, [pc, #88]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	43db      	mvns	r3, r3
 800309a:	4914      	ldr	r1, [pc, #80]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 800309c:	4013      	ands	r3, r2
 800309e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d021      	beq.n	80030f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030ac:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	490e      	ldr	r1, [pc, #56]	@ (80030ec <HAL_GPIO_Init+0x2d0>)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]
 80030b8:	e021      	b.n	80030fe <HAL_GPIO_Init+0x2e2>
 80030ba:	bf00      	nop
 80030bc:	10320000 	.word	0x10320000
 80030c0:	10310000 	.word	0x10310000
 80030c4:	10220000 	.word	0x10220000
 80030c8:	10210000 	.word	0x10210000
 80030cc:	10120000 	.word	0x10120000
 80030d0:	10110000 	.word	0x10110000
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40010000 	.word	0x40010000
 80030dc:	40010800 	.word	0x40010800
 80030e0:	40010c00 	.word	0x40010c00
 80030e4:	40011000 	.word	0x40011000
 80030e8:	40011400 	.word	0x40011400
 80030ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_GPIO_Init+0x304>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	4909      	ldr	r1, [pc, #36]	@ (8003120 <HAL_GPIO_Init+0x304>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	3301      	adds	r3, #1
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	fa22 f303 	lsr.w	r3, r2, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	f47f ae8e 	bne.w	8002e30 <HAL_GPIO_Init+0x14>
  }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	372c      	adds	r7, #44	@ 0x2c
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	40010400 	.word	0x40010400

08003124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
 8003130:	4613      	mov	r3, r2
 8003132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003134:	787b      	ldrb	r3, [r7, #1]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003140:	e003      	b.n	800314a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003142:	887b      	ldrh	r3, [r7, #2]
 8003144:	041a      	lsls	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	611a      	str	r2, [r3, #16]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800315e:	4b08      	ldr	r3, [pc, #32]	@ (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800316a:	4a05      	ldr	r2, [pc, #20]	@ (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f806 	bl	8003184 <HAL_GPIO_EXTI_Callback>
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e272      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8087 	beq.w	80032c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b8:	4b92      	ldr	r3, [pc, #584]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d00c      	beq.n	80031de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031c4:	4b8f      	ldr	r3, [pc, #572]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d112      	bne.n	80031f6 <HAL_RCC_OscConfig+0x5e>
 80031d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031dc:	d10b      	bne.n	80031f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031de:	4b89      	ldr	r3, [pc, #548]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d06c      	beq.n	80032c4 <HAL_RCC_OscConfig+0x12c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d168      	bne.n	80032c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e24c      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x76>
 8003200:	4b80      	ldr	r3, [pc, #512]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a7f      	ldr	r2, [pc, #508]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	e02e      	b.n	800326c <HAL_RCC_OscConfig+0xd4>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x98>
 8003216:	4b7b      	ldr	r3, [pc, #492]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7a      	ldr	r2, [pc, #488]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800321c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b78      	ldr	r3, [pc, #480]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a77      	ldr	r2, [pc, #476]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003228:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xd4>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0xbc>
 800323a:	4b72      	ldr	r3, [pc, #456]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a71      	ldr	r2, [pc, #452]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b6f      	ldr	r3, [pc, #444]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6e      	ldr	r2, [pc, #440]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xd4>
 8003254:	4b6b      	ldr	r3, [pc, #428]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6a      	ldr	r2, [pc, #424]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b68      	ldr	r3, [pc, #416]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a67      	ldr	r2, [pc, #412]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800326a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7ff f88e 	bl	8002394 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7ff f88a 	bl	8002394 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	@ 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e200      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b5d      	ldr	r3, [pc, #372]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xe4>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7ff f87a 	bl	8002394 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7ff f876 	bl	8002394 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	@ 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1ec      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	4b53      	ldr	r3, [pc, #332]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x10c>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d063      	beq.n	800339a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032de:	4b49      	ldr	r3, [pc, #292]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d11c      	bne.n	8003324 <HAL_RCC_OscConfig+0x18c>
 80032ea:	4b46      	ldr	r3, [pc, #280]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	4b43      	ldr	r3, [pc, #268]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_RCC_OscConfig+0x176>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1c0      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330e:	4b3d      	ldr	r3, [pc, #244]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4939      	ldr	r1, [pc, #228]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e03a      	b.n	800339a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332c:	4b36      	ldr	r3, [pc, #216]	@ (8003408 <HAL_RCC_OscConfig+0x270>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7ff f82f 	bl	8002394 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333a:	f7ff f82b 	bl	8002394 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e1a1      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	4b2d      	ldr	r3, [pc, #180]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b2a      	ldr	r3, [pc, #168]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4927      	ldr	r1, [pc, #156]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b26      	ldr	r3, [pc, #152]	@ (8003408 <HAL_RCC_OscConfig+0x270>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7ff f80e 	bl	8002394 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337c:	f7ff f80a 	bl	8002394 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e180      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	4b1d      	ldr	r3, [pc, #116]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d03a      	beq.n	800341c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d019      	beq.n	80033e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b17      	ldr	r3, [pc, #92]	@ (800340c <HAL_RCC_OscConfig+0x274>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b4:	f7fe ffee 	bl	8002394 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fe ffea 	bl	8002394 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e160      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033da:	2001      	movs	r0, #1
 80033dc:	f000 face 	bl	800397c <RCC_Delay>
 80033e0:	e01c      	b.n	800341c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e2:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_RCC_OscConfig+0x274>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7fe ffd4 	bl	8002394 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ee:	e00f      	b.n	8003410 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fe ffd0 	bl	8002394 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d908      	bls.n	8003410 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e146      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	42420000 	.word	0x42420000
 800340c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	4b92      	ldr	r3, [pc, #584]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e9      	bne.n	80033f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80a6 	beq.w	8003576 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342e:	4b8b      	ldr	r3, [pc, #556]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	4b88      	ldr	r3, [pc, #544]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	4a87      	ldr	r2, [pc, #540]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003444:	61d3      	str	r3, [r2, #28]
 8003446:	4b85      	ldr	r3, [pc, #532]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b82      	ldr	r3, [pc, #520]	@ (8003660 <HAL_RCC_OscConfig+0x4c8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d118      	bne.n	8003494 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003462:	4b7f      	ldr	r3, [pc, #508]	@ (8003660 <HAL_RCC_OscConfig+0x4c8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7e      	ldr	r2, [pc, #504]	@ (8003660 <HAL_RCC_OscConfig+0x4c8>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800346c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346e:	f7fe ff91 	bl	8002394 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003476:	f7fe ff8d 	bl	8002394 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b64      	cmp	r3, #100	@ 0x64
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e103      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	4b75      	ldr	r3, [pc, #468]	@ (8003660 <HAL_RCC_OscConfig+0x4c8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x312>
 800349c:	4b6f      	ldr	r3, [pc, #444]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a6e      	ldr	r2, [pc, #440]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6213      	str	r3, [r2, #32]
 80034a8:	e02d      	b.n	8003506 <HAL_RCC_OscConfig+0x36e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x334>
 80034b2:	4b6a      	ldr	r3, [pc, #424]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4a69      	ldr	r2, [pc, #420]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	6213      	str	r3, [r2, #32]
 80034be:	4b67      	ldr	r3, [pc, #412]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4a66      	ldr	r2, [pc, #408]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	6213      	str	r3, [r2, #32]
 80034ca:	e01c      	b.n	8003506 <HAL_RCC_OscConfig+0x36e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b05      	cmp	r3, #5
 80034d2:	d10c      	bne.n	80034ee <HAL_RCC_OscConfig+0x356>
 80034d4:	4b61      	ldr	r3, [pc, #388]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4a60      	ldr	r2, [pc, #384]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034da:	f043 0304 	orr.w	r3, r3, #4
 80034de:	6213      	str	r3, [r2, #32]
 80034e0:	4b5e      	ldr	r3, [pc, #376]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4a5d      	ldr	r2, [pc, #372]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6213      	str	r3, [r2, #32]
 80034ec:	e00b      	b.n	8003506 <HAL_RCC_OscConfig+0x36e>
 80034ee:	4b5b      	ldr	r3, [pc, #364]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4a5a      	ldr	r2, [pc, #360]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	6213      	str	r3, [r2, #32]
 80034fa:	4b58      	ldr	r3, [pc, #352]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4a57      	ldr	r2, [pc, #348]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d015      	beq.n	800353a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7fe ff41 	bl	8002394 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003514:	e00a      	b.n	800352c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003516:	f7fe ff3d 	bl	8002394 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003524:	4293      	cmp	r3, r2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e0b1      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352c:	4b4b      	ldr	r3, [pc, #300]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ee      	beq.n	8003516 <HAL_RCC_OscConfig+0x37e>
 8003538:	e014      	b.n	8003564 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353a:	f7fe ff2b 	bl	8002394 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fe ff27 	bl	8002394 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003550:	4293      	cmp	r3, r2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e09b      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003558:	4b40      	ldr	r3, [pc, #256]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ee      	bne.n	8003542 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d105      	bne.n	8003576 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356a:	4b3c      	ldr	r3, [pc, #240]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4a3b      	ldr	r2, [pc, #236]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003574:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8087 	beq.w	800368e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003580:	4b36      	ldr	r3, [pc, #216]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b08      	cmp	r3, #8
 800358a:	d061      	beq.n	8003650 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d146      	bne.n	8003622 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003594:	4b33      	ldr	r3, [pc, #204]	@ (8003664 <HAL_RCC_OscConfig+0x4cc>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe fefb 	bl	8002394 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a2:	f7fe fef7 	bl	8002394 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e06d      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b4:	4b29      	ldr	r3, [pc, #164]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f0      	bne.n	80035a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	d108      	bne.n	80035dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ca:	4b24      	ldr	r3, [pc, #144]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	4921      	ldr	r1, [pc, #132]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035dc:	4b1f      	ldr	r3, [pc, #124]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a19      	ldr	r1, [r3, #32]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	430b      	orrs	r3, r1
 80035ee:	491b      	ldr	r1, [pc, #108]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <HAL_RCC_OscConfig+0x4cc>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7fe fecb 	bl	8002394 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fe fec7 	bl	8002394 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e03d      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003614:	4b11      	ldr	r3, [pc, #68]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x46a>
 8003620:	e035      	b.n	800368e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003622:	4b10      	ldr	r3, [pc, #64]	@ (8003664 <HAL_RCC_OscConfig+0x4cc>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe feb4 	bl	8002394 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7fe feb0 	bl	8002394 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e026      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003642:	4b06      	ldr	r3, [pc, #24]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x498>
 800364e:	e01e      	b.n	800368e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e019      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
 8003664:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <HAL_RCC_OscConfig+0x500>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	429a      	cmp	r2, r3
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000

0800369c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0d0      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b6a      	ldr	r3, [pc, #424]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d910      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b67      	ldr	r3, [pc, #412]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	4965      	ldr	r1, [pc, #404]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a58      	ldr	r2, [pc, #352]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003702:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a52      	ldr	r2, [pc, #328]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800371a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d040      	beq.n	80037bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d115      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375a:	4b41      	ldr	r3, [pc, #260]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e073      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	4b3d      	ldr	r3, [pc, #244]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06b      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377a:	4b39      	ldr	r3, [pc, #228]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f023 0203 	bic.w	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4936      	ldr	r1, [pc, #216]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800378c:	f7fe fe02 	bl	8002394 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	e00a      	b.n	80037aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003794:	f7fe fdfe 	bl	8002394 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e053      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 020c 	and.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d1eb      	bne.n	8003794 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037bc:	4b27      	ldr	r3, [pc, #156]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d210      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b24      	ldr	r3, [pc, #144]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 0207 	bic.w	r2, r3, #7
 80037d2:	4922      	ldr	r1, [pc, #136]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003816:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	490a      	ldr	r1, [pc, #40]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	@ (8003868 <HAL_RCC_ClockConfig+0x1cc>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	@ (800386c <HAL_RCC_ClockConfig+0x1d0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fd60 	bl	8002310 <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40022000 	.word	0x40022000
 8003860:	40021000 	.word	0x40021000
 8003864:	080098e0 	.word	0x080098e0
 8003868:	20000000 	.word	0x20000000
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800388a:	4b1e      	ldr	r3, [pc, #120]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x94>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b04      	cmp	r3, #4
 8003898:	d002      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x30>
 800389a:	2b08      	cmp	r3, #8
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0x36>
 800389e:	e027      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a0:	4b19      	ldr	r3, [pc, #100]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x98>)
 80038a2:	613b      	str	r3, [r7, #16]
      break;
 80038a4:	e027      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	0c9b      	lsrs	r3, r3, #18
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	4a17      	ldr	r2, [pc, #92]	@ (800390c <HAL_RCC_GetSysClockFreq+0x9c>)
 80038b0:	5cd3      	ldrb	r3, [r2, r3]
 80038b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038be:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x94>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	0c5b      	lsrs	r3, r3, #17
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	4a11      	ldr	r2, [pc, #68]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038ca:	5cd3      	ldrb	r3, [r2, r3]
 80038cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x98>)
 80038d2:	fb03 f202 	mul.w	r2, r3, r2
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e004      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038e4:	fb02 f303 	mul.w	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	613b      	str	r3, [r7, #16]
      break;
 80038ee:	e002      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x98>)
 80038f2:	613b      	str	r3, [r7, #16]
      break;
 80038f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f6:	693b      	ldr	r3, [r7, #16]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	007a1200 	.word	0x007a1200
 800390c:	080098f8 	.word	0x080098f8
 8003910:	08009908 	.word	0x08009908
 8003914:	003d0900 	.word	0x003d0900

08003918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800391c:	4b02      	ldr	r3, [pc, #8]	@ (8003928 <HAL_RCC_GetHCLKFreq+0x10>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	20000000 	.word	0x20000000

0800392c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003930:	f7ff fff2 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	@ (800394c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	@ (8003950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000
 8003950:	080098f0 	.word	0x080098f0

08003954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003958:	f7ff ffde 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	0adb      	lsrs	r3, r3, #11
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4903      	ldr	r1, [pc, #12]	@ (8003978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	080098f0 	.word	0x080098f0

0800397c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003984:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <RCC_Delay+0x34>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a0a      	ldr	r2, [pc, #40]	@ (80039b4 <RCC_Delay+0x38>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	0a5b      	lsrs	r3, r3, #9
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003998:	bf00      	nop
  }
  while (Delay --);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1e5a      	subs	r2, r3, #1
 800399e:	60fa      	str	r2, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f9      	bne.n	8003998 <RCC_Delay+0x1c>
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	20000000 	.word	0x20000000
 80039b4:	10624dd3 	.word	0x10624dd3

080039b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d07d      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039d4:	2300      	movs	r3, #0
 80039d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10d      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	61d3      	str	r3, [r2, #28]
 80039f0:	4b49      	ldr	r3, [pc, #292]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fc:	2301      	movs	r3, #1
 80039fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	4b46      	ldr	r3, [pc, #280]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d118      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0c:	4b43      	ldr	r3, [pc, #268]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a42      	ldr	r2, [pc, #264]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a18:	f7fe fcbc 	bl	8002394 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	e008      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a20:	f7fe fcb8 	bl	8002394 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	@ 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e06d      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	4b3a      	ldr	r3, [pc, #232]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a3e:	4b36      	ldr	r3, [pc, #216]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d02e      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d027      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a66:	4b2e      	ldr	r3, [pc, #184]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a72:	4a29      	ldr	r2, [pc, #164]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d014      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fe fc87 	bl	8002394 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fe fc83 	bl	8002394 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e036      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0ee      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aac:	4b1a      	ldr	r3, [pc, #104]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4917      	ldr	r1, [pc, #92]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac4:	4b14      	ldr	r3, [pc, #80]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	4a13      	ldr	r2, [pc, #76]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003adc:	4b0e      	ldr	r3, [pc, #56]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	490b      	ldr	r1, [pc, #44]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003afa:	4b07      	ldr	r3, [pc, #28]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	4904      	ldr	r1, [pc, #16]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	42420440 	.word	0x42420440

08003b24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	f200 808a 	bhi.w	8003c62 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d045      	beq.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d075      	beq.n	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b5a:	e082      	b.n	8003c62 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003b5c:	4b46      	ldr	r3, [pc, #280]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b62:	4b45      	ldr	r3, [pc, #276]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d07b      	beq.n	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	0c9b      	lsrs	r3, r3, #18
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	4a41      	ldr	r2, [pc, #260]	@ (8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003b78:	5cd3      	ldrb	r3, [r2, r3]
 8003b7a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d015      	beq.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b86:	4b3c      	ldr	r3, [pc, #240]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	0c5b      	lsrs	r3, r3, #17
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	4a3b      	ldr	r2, [pc, #236]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003b92:	5cd3      	ldrb	r3, [r2, r3]
 8003b94:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00d      	beq.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ba0:	4a38      	ldr	r2, [pc, #224]	@ (8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	e004      	b.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4a34      	ldr	r2, [pc, #208]	@ (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bc8:	d102      	bne.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	61bb      	str	r3, [r7, #24]
      break;
 8003bce:	e04a      	b.n	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	61bb      	str	r3, [r7, #24]
      break;
 8003bde:	e042      	b.n	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003be0:	4b25      	ldr	r3, [pc, #148]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf0:	d108      	bne.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003bfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	e01f      	b.n	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c0e:	d109      	bne.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c10:	4b19      	ldr	r3, [pc, #100]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003c1c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	e00f      	b.n	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c2e:	d11c      	bne.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c30:	4b11      	ldr	r3, [pc, #68]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d016      	beq.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003c3c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003c40:	61bb      	str	r3, [r7, #24]
      break;
 8003c42:	e012      	b.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c44:	e011      	b.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c46:	f7ff fe85 	bl	8003954 <HAL_RCC_GetPCLK2Freq>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	0b9b      	lsrs	r3, r3, #14
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	3301      	adds	r3, #1
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5e:	61bb      	str	r3, [r7, #24]
      break;
 8003c60:	e004      	b.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c62:	bf00      	nop
 8003c64:	e002      	b.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c66:	bf00      	nop
 8003c68:	e000      	b.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c6a:	bf00      	nop
    }
  }
  return (frequency);
 8003c6c:	69bb      	ldr	r3, [r7, #24]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	0800990c 	.word	0x0800990c
 8003c80:	0800991c 	.word	0x0800991c
 8003c84:	007a1200 	.word	0x007a1200
 8003c88:	003d0900 	.word	0x003d0900
 8003c8c:	aaaaaaab 	.word	0xaaaaaaab

08003c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e042      	b.n	8003d28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fe f944 	bl	8001f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2224      	movs	r2, #36	@ 0x24
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f9af 	bl	8004038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	@ 0x28
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d16d      	bne.n	8003e2c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_UART_Transmit+0x2c>
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e066      	b.n	8003e2e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2221      	movs	r2, #33	@ 0x21
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d6e:	f7fe fb11 	bl	8002394 <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	88fa      	ldrh	r2, [r7, #6]
 8003d78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d88:	d108      	bne.n	8003d9c <HAL_UART_Transmit+0x6c>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d104      	bne.n	8003d9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	e003      	b.n	8003da4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003da4:	e02a      	b.n	8003dfc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2200      	movs	r2, #0
 8003dae:	2180      	movs	r1, #128	@ 0x80
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f8d2 	bl	8003f5a <UART_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e036      	b.n	8003e2e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	3302      	adds	r3, #2
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	e007      	b.n	8003dee <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	781a      	ldrb	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	3301      	adds	r3, #1
 8003dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1cf      	bne.n	8003da6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2140      	movs	r1, #64	@ 0x40
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f8a2 	bl	8003f5a <UART_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e006      	b.n	8003e2e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e000      	b.n	8003e2e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b08a      	sub	sp, #40	@ 0x28
 8003e3a:	af02      	add	r7, sp, #8
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d17c      	bne.n	8003f50 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_UART_Receive+0x2c>
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e075      	b.n	8003f52 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2222      	movs	r2, #34	@ 0x22
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e7a:	f7fe fa8b 	bl	8002394 <HAL_GetTick>
 8003e7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e94:	d108      	bne.n	8003ea8 <HAL_UART_Receive+0x72>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d104      	bne.n	8003ea8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	e003      	b.n	8003eb0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003eb0:	e043      	b.n	8003f3a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2120      	movs	r1, #32
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f84c 	bl	8003f5a <UART_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e042      	b.n	8003f52 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10c      	bne.n	8003eec <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	e01f      	b.n	8003f2c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef4:	d007      	beq.n	8003f06 <HAL_UART_Receive+0xd0>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <HAL_UART_Receive+0xde>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	e008      	b.n	8003f26 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1b6      	bne.n	8003eb2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e000      	b.n	8003f52 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
  }
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b090      	sub	sp, #64	@ 0x40
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6a:	e050      	b.n	800400e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f72:	d04c      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f7a:	f7fe fa0b 	bl	8002394 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d241      	bcs.n	800400e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003faa:	637a      	str	r2, [r7, #52]	@ 0x34
 8003fac:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e5      	bne.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3314      	adds	r3, #20
 8003fdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fde:	623a      	str	r2, [r7, #32]
 8003fe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	69f9      	ldr	r1, [r7, #28]
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e5      	bne.n	8003fbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e00f      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4013      	ands	r3, r2
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	429a      	cmp	r2, r3
 800402a:	d09f      	beq.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3740      	adds	r7, #64	@ 0x40
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004072:	f023 030c 	bic.w	r3, r3, #12
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	430b      	orrs	r3, r1
 800407e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2c      	ldr	r2, [pc, #176]	@ (800414c <UART_SetConfig+0x114>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d103      	bne.n	80040a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7ff fc58 	bl	8003954 <HAL_RCC_GetPCLK2Freq>
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	e002      	b.n	80040ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040a8:	f7ff fc40 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 80040ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009a      	lsls	r2, r3, #2
 80040b8:	441a      	add	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	4a22      	ldr	r2, [pc, #136]	@ (8004150 <UART_SetConfig+0x118>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	0119      	lsls	r1, r3, #4
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009a      	lsls	r2, r3, #2
 80040d8:	441a      	add	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004150 <UART_SetConfig+0x118>)
 80040e6:	fba3 0302 	umull	r0, r3, r3, r2
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	2064      	movs	r0, #100	@ 0x64
 80040ee:	fb00 f303 	mul.w	r3, r0, r3
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	3332      	adds	r3, #50	@ 0x32
 80040f8:	4a15      	ldr	r2, [pc, #84]	@ (8004150 <UART_SetConfig+0x118>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004104:	4419      	add	r1, r3
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009a      	lsls	r2, r3, #2
 8004110:	441a      	add	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	fbb2 f2f3 	udiv	r2, r2, r3
 800411c:	4b0c      	ldr	r3, [pc, #48]	@ (8004150 <UART_SetConfig+0x118>)
 800411e:	fba3 0302 	umull	r0, r3, r3, r2
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	2064      	movs	r0, #100	@ 0x64
 8004126:	fb00 f303 	mul.w	r3, r0, r3
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	3332      	adds	r3, #50	@ 0x32
 8004130:	4a07      	ldr	r2, [pc, #28]	@ (8004150 <UART_SetConfig+0x118>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	f003 020f 	and.w	r2, r3, #15
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	440a      	add	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40013800 	.word	0x40013800
 8004150:	51eb851f 	.word	0x51eb851f

08004154 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800415a:	f3ef 8305 	mrs	r3, IPSR
 800415e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004160:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004166:	f3ef 8310 	mrs	r3, PRIMASK
 800416a:	607b      	str	r3, [r7, #4]
  return(result);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <osKernelInitialize+0x32>
 8004172:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <osKernelInitialize+0x60>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d109      	bne.n	800418e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800417a:	f3ef 8311 	mrs	r3, BASEPRI
 800417e:	603b      	str	r3, [r7, #0]
  return(result);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004186:	f06f 0305 	mvn.w	r3, #5
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e00c      	b.n	80041a8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800418e:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <osKernelInitialize+0x60>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d105      	bne.n	80041a2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004196:	4b07      	ldr	r3, [pc, #28]	@ (80041b4 <osKernelInitialize+0x60>)
 8004198:	2201      	movs	r2, #1
 800419a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e002      	b.n	80041a8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80041a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041a8:	68fb      	ldr	r3, [r7, #12]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	20000714 	.word	0x20000714

080041b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041be:	f3ef 8305 	mrs	r3, IPSR
 80041c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80041c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10f      	bne.n	80041ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ca:	f3ef 8310 	mrs	r3, PRIMASK
 80041ce:	607b      	str	r3, [r7, #4]
  return(result);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <osKernelStart+0x32>
 80041d6:	4b11      	ldr	r3, [pc, #68]	@ (800421c <osKernelStart+0x64>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d109      	bne.n	80041f2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041de:	f3ef 8311 	mrs	r3, BASEPRI
 80041e2:	603b      	str	r3, [r7, #0]
  return(result);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80041ea:	f06f 0305 	mvn.w	r3, #5
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	e00e      	b.n	8004210 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80041f2:	4b0a      	ldr	r3, [pc, #40]	@ (800421c <osKernelStart+0x64>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d107      	bne.n	800420a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80041fa:	4b08      	ldr	r3, [pc, #32]	@ (800421c <osKernelStart+0x64>)
 80041fc:	2202      	movs	r2, #2
 80041fe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004200:	f001 f8a8 	bl	8005354 <vTaskStartScheduler>
      stat = osOK;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	e002      	b.n	8004210 <osKernelStart+0x58>
    } else {
      stat = osError;
 800420a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800420e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004210:	68fb      	ldr	r3, [r7, #12]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000714 	.word	0x20000714

08004220 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b092      	sub	sp, #72	@ 0x48
 8004224:	af04      	add	r7, sp, #16
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004230:	f3ef 8305 	mrs	r3, IPSR
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004238:	2b00      	cmp	r3, #0
 800423a:	f040 8094 	bne.w	8004366 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800423e:	f3ef 8310 	mrs	r3, PRIMASK
 8004242:	623b      	str	r3, [r7, #32]
  return(result);
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	2b00      	cmp	r3, #0
 8004248:	f040 808d 	bne.w	8004366 <osThreadNew+0x146>
 800424c:	4b48      	ldr	r3, [pc, #288]	@ (8004370 <osThreadNew+0x150>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d106      	bne.n	8004262 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004254:	f3ef 8311 	mrs	r3, BASEPRI
 8004258:	61fb      	str	r3, [r7, #28]
  return(result);
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f040 8082 	bne.w	8004366 <osThreadNew+0x146>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d07e      	beq.n	8004366 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004268:	2380      	movs	r3, #128	@ 0x80
 800426a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800426c:	2318      	movs	r3, #24
 800426e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004270:	2300      	movs	r3, #0
 8004272:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004274:	f107 031b 	add.w	r3, r7, #27
 8004278:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800427a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800427e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d045      	beq.n	8004312 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <osThreadNew+0x74>
        name = attr->name;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <osThreadNew+0x9a>
 80042a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042aa:	2b38      	cmp	r3, #56	@ 0x38
 80042ac:	d805      	bhi.n	80042ba <osThreadNew+0x9a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <osThreadNew+0x9e>
        return (NULL);
 80042ba:	2300      	movs	r3, #0
 80042bc:	e054      	b.n	8004368 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	089b      	lsrs	r3, r3, #2
 80042cc:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00e      	beq.n	80042f4 <osThreadNew+0xd4>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2ba7      	cmp	r3, #167	@ 0xa7
 80042dc:	d90a      	bls.n	80042f4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d006      	beq.n	80042f4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <osThreadNew+0xd4>
        mem = 1;
 80042ee:	2301      	movs	r3, #1
 80042f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042f2:	e010      	b.n	8004316 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10c      	bne.n	8004316 <osThreadNew+0xf6>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d108      	bne.n	8004316 <osThreadNew+0xf6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d104      	bne.n	8004316 <osThreadNew+0xf6>
          mem = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004310:	e001      	b.n	8004316 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8004316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004318:	2b01      	cmp	r3, #1
 800431a:	d110      	bne.n	800433e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004324:	9202      	str	r2, [sp, #8]
 8004326:	9301      	str	r3, [sp, #4]
 8004328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004330:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fe24 	bl	8004f80 <xTaskCreateStatic>
 8004338:	4603      	mov	r3, r0
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e013      	b.n	8004366 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	d110      	bne.n	8004366 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004346:	b29a      	uxth	r2, r3
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fe71 	bl	800503e <xTaskCreate>
 800435c:	4603      	mov	r3, r0
 800435e:	2b01      	cmp	r3, #1
 8004360:	d001      	beq.n	8004366 <osThreadNew+0x146>
          hTask = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004366:	697b      	ldr	r3, [r7, #20]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3738      	adds	r7, #56	@ 0x38
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000714 	.word	0x20000714

08004374 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800437c:	f3ef 8305 	mrs	r3, IPSR
 8004380:	613b      	str	r3, [r7, #16]
  return(result);
 8004382:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10f      	bne.n	80043a8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004388:	f3ef 8310 	mrs	r3, PRIMASK
 800438c:	60fb      	str	r3, [r7, #12]
  return(result);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d109      	bne.n	80043a8 <osDelay+0x34>
 8004394:	4b0d      	ldr	r3, [pc, #52]	@ (80043cc <osDelay+0x58>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d109      	bne.n	80043b0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800439c:	f3ef 8311 	mrs	r3, BASEPRI
 80043a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <osDelay+0x3c>
    stat = osErrorISR;
 80043a8:	f06f 0305 	mvn.w	r3, #5
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	e007      	b.n	80043c0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 ff94 	bl	80052e8 <vTaskDelay>
    }
  }

  return (stat);
 80043c0:	697b      	ldr	r3, [r7, #20]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000714 	.word	0x20000714

080043d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a06      	ldr	r2, [pc, #24]	@ (80043f8 <vApplicationGetIdleTaskMemory+0x28>)
 80043e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4a05      	ldr	r2, [pc, #20]	@ (80043fc <vApplicationGetIdleTaskMemory+0x2c>)
 80043e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2280      	movs	r2, #128	@ 0x80
 80043ec:	601a      	str	r2, [r3, #0]
}
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr
 80043f8:	20000718 	.word	0x20000718
 80043fc:	200007c0 	.word	0x200007c0

08004400 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a07      	ldr	r2, [pc, #28]	@ (800442c <vApplicationGetTimerTaskMemory+0x2c>)
 8004410:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4a06      	ldr	r2, [pc, #24]	@ (8004430 <vApplicationGetTimerTaskMemory+0x30>)
 8004416:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800441e:	601a      	str	r2, [r3, #0]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	200009c0 	.word	0x200009c0
 8004430:	20000a68 	.word	0x20000a68

08004434 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f103 0208 	add.w	r2, r3, #8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800444c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f103 0208 	add.w	r2, r3, #8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f103 0208 	add.w	r2, r3, #8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800448a:	b480      	push	{r7}
 800448c:	b085      	sub	sp, #20
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
}
 80044c6:	bf00      	nop
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044e6:	d103      	bne.n	80044f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	e00c      	b.n	800450a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3308      	adds	r3, #8
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	e002      	b.n	80044fe <vListInsert+0x2e>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	429a      	cmp	r2, r3
 8004508:	d2f6      	bcs.n	80044f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	601a      	str	r2, [r3, #0]
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6892      	ldr	r2, [r2, #8]
 8004556:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6852      	ldr	r2, [r2, #4]
 8004560:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	429a      	cmp	r2, r3
 800456a:	d103      	bne.n	8004574 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	1e5a      	subs	r2, r3, #1
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
	...

08004594 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045ba:	bf00      	nop
 80045bc:	bf00      	nop
 80045be:	e7fd      	b.n	80045bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80045c0:	f002 f824 	bl	800660c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045cc:	68f9      	ldr	r1, [r7, #12]
 80045ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	441a      	add	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f0:	3b01      	subs	r3, #1
 80045f2:	68f9      	ldr	r1, [r7, #12]
 80045f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	441a      	add	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	22ff      	movs	r2, #255	@ 0xff
 8004604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	22ff      	movs	r2, #255	@ 0xff
 800460c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d114      	bne.n	8004640 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01a      	beq.n	8004654 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3310      	adds	r3, #16
 8004622:	4618      	mov	r0, r3
 8004624:	f001 f936 	bl	8005894 <xTaskRemoveFromEventList>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d012      	beq.n	8004654 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800462e:	4b0d      	ldr	r3, [pc, #52]	@ (8004664 <xQueueGenericReset+0xd0>)
 8004630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	e009      	b.n	8004654 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3310      	adds	r3, #16
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff fef5 	bl	8004434 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3324      	adds	r3, #36	@ 0x24
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fef0 	bl	8004434 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004654:	f002 f80a 	bl	800666c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004658:	2301      	movs	r3, #1
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	e000ed04 	.word	0xe000ed04

08004668 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08e      	sub	sp, #56	@ 0x38
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800468e:	bf00      	nop
 8004690:	bf00      	nop
 8004692:	e7fd      	b.n	8004690 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10b      	bne.n	80046b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	e7fd      	b.n	80046ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <xQueueGenericCreateStatic+0x56>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <xQueueGenericCreateStatic+0x5a>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <xQueueGenericCreateStatic+0x5c>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10b      	bne.n	80046e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	623b      	str	r3, [r7, #32]
}
 80046da:	bf00      	nop
 80046dc:	bf00      	nop
 80046de:	e7fd      	b.n	80046dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <xQueueGenericCreateStatic+0x84>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <xQueueGenericCreateStatic+0x88>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <xQueueGenericCreateStatic+0x8a>
 80046f0:	2300      	movs	r3, #0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	61fb      	str	r3, [r7, #28]
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	e7fd      	b.n	800470a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800470e:	2350      	movs	r3, #80	@ 0x50
 8004710:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b50      	cmp	r3, #80	@ 0x50
 8004716:	d00b      	beq.n	8004730 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	61bb      	str	r3, [r7, #24]
}
 800472a:	bf00      	nop
 800472c:	bf00      	nop
 800472e:	e7fd      	b.n	800472c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00d      	beq.n	8004756 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800473a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004742:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	4613      	mov	r3, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f805 	bl	8004760 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004758:	4618      	mov	r0, r3
 800475a:	3730      	adds	r7, #48	@ 0x30
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d103      	bne.n	800477c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	e002      	b.n	8004782 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800478e:	2101      	movs	r1, #1
 8004790:	69b8      	ldr	r0, [r7, #24]
 8004792:	f7ff feff 	bl	8004594 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	78fa      	ldrb	r2, [r7, #3]
 800479a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08e      	sub	sp, #56	@ 0x38
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047b6:	2300      	movs	r3, #0
 80047b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80047be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <xQueueGenericSend+0x34>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <xQueueGenericSend+0x42>
 80047e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <xQueueGenericSend+0x46>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <xQueueGenericSend+0x48>
 80047ee:	2300      	movs	r3, #0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <xQueueGenericSend+0x64>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	e7fd      	b.n	8004808 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b02      	cmp	r3, #2
 8004810:	d103      	bne.n	800481a <xQueueGenericSend+0x72>
 8004812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <xQueueGenericSend+0x76>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <xQueueGenericSend+0x78>
 800481e:	2300      	movs	r3, #0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10b      	bne.n	800483c <xQueueGenericSend+0x94>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	623b      	str	r3, [r7, #32]
}
 8004836:	bf00      	nop
 8004838:	bf00      	nop
 800483a:	e7fd      	b.n	8004838 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800483c:	f001 f9f4 	bl	8005c28 <xTaskGetSchedulerState>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <xQueueGenericSend+0xa4>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <xQueueGenericSend+0xa8>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <xQueueGenericSend+0xaa>
 8004850:	2300      	movs	r3, #0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10b      	bne.n	800486e <xQueueGenericSend+0xc6>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	61fb      	str	r3, [r7, #28]
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	e7fd      	b.n	800486a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800486e:	f001 fecd 	bl	800660c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487a:	429a      	cmp	r2, r3
 800487c:	d302      	bcc.n	8004884 <xQueueGenericSend+0xdc>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b02      	cmp	r3, #2
 8004882:	d129      	bne.n	80048d8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800488a:	f000 fa0d 	bl	8004ca8 <prvCopyDataToQueue>
 800488e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	2b00      	cmp	r3, #0
 8004896:	d010      	beq.n	80048ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489a:	3324      	adds	r3, #36	@ 0x24
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fff9 	bl	8005894 <xTaskRemoveFromEventList>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d013      	beq.n	80048d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048a8:	4b3f      	ldr	r3, [pc, #252]	@ (80049a8 <xQueueGenericSend+0x200>)
 80048aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	e00a      	b.n	80048d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d007      	beq.n	80048d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048c0:	4b39      	ldr	r3, [pc, #228]	@ (80049a8 <xQueueGenericSend+0x200>)
 80048c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048d0:	f001 fecc 	bl	800666c <vPortExitCritical>
				return pdPASS;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e063      	b.n	80049a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d103      	bne.n	80048e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048de:	f001 fec5 	bl	800666c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e05c      	b.n	80049a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d106      	bne.n	80048fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048ec:	f107 0314 	add.w	r3, r7, #20
 80048f0:	4618      	mov	r0, r3
 80048f2:	f001 f833 	bl	800595c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048f6:	2301      	movs	r3, #1
 80048f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048fa:	f001 feb7 	bl	800666c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048fe:	f000 fd99 	bl	8005434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004902:	f001 fe83 	bl	800660c <vPortEnterCritical>
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800490c:	b25b      	sxtb	r3, r3
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004912:	d103      	bne.n	800491c <xQueueGenericSend+0x174>
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004922:	b25b      	sxtb	r3, r3
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004928:	d103      	bne.n	8004932 <xQueueGenericSend+0x18a>
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004932:	f001 fe9b 	bl	800666c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004936:	1d3a      	adds	r2, r7, #4
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	4611      	mov	r1, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f001 f822 	bl	8005988 <xTaskCheckForTimeOut>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d124      	bne.n	8004994 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800494a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800494c:	f000 faa4 	bl	8004e98 <prvIsQueueFull>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d018      	beq.n	8004988 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004958:	3310      	adds	r3, #16
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f000 ff46 	bl	80057f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004966:	f000 fa2f 	bl	8004dc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800496a:	f000 fd71 	bl	8005450 <xTaskResumeAll>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	f47f af7c 	bne.w	800486e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004976:	4b0c      	ldr	r3, [pc, #48]	@ (80049a8 <xQueueGenericSend+0x200>)
 8004978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	e772      	b.n	800486e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800498a:	f000 fa1d 	bl	8004dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800498e:	f000 fd5f 	bl	8005450 <xTaskResumeAll>
 8004992:	e76c      	b.n	800486e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004996:	f000 fa17 	bl	8004dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800499a:	f000 fd59 	bl	8005450 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800499e:	2300      	movs	r3, #0
		}
	}
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3738      	adds	r7, #56	@ 0x38
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	e000ed04 	.word	0xe000ed04

080049ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08e      	sub	sp, #56	@ 0x38
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
 80049da:	e7fd      	b.n	80049d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <xQueueGenericSendFromISR+0x3e>
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <xQueueGenericSendFromISR+0x42>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <xQueueGenericSendFromISR+0x44>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	623b      	str	r3, [r7, #32]
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d103      	bne.n	8004a1a <xQueueGenericSendFromISR+0x6e>
 8004a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <xQueueGenericSendFromISR+0x72>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <xQueueGenericSendFromISR+0x74>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10b      	bne.n	8004a3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	61fb      	str	r3, [r7, #28]
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	e7fd      	b.n	8004a38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a3c:	f001 fea8 	bl	8006790 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a40:	f3ef 8211 	mrs	r2, BASEPRI
 8004a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	61ba      	str	r2, [r7, #24]
 8004a56:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a58:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d302      	bcc.n	8004a6e <xQueueGenericSendFromISR+0xc2>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d12c      	bne.n	8004ac8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a7e:	f000 f913 	bl	8004ca8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a82:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a8a:	d112      	bne.n	8004ab2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d016      	beq.n	8004ac2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a96:	3324      	adds	r3, #36	@ 0x24
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fefb 	bl	8005894 <xTaskRemoveFromEventList>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00e      	beq.n	8004ac2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	e007      	b.n	8004ac2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ab2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	b25a      	sxtb	r2, r3
 8004abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004ac6:	e001      	b.n	8004acc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ace:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ad6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3738      	adds	r7, #56	@ 0x38
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08c      	sub	sp, #48	@ 0x30
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10b      	bne.n	8004b16 <xQueueReceive+0x32>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	623b      	str	r3, [r7, #32]
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	e7fd      	b.n	8004b12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d103      	bne.n	8004b24 <xQueueReceive+0x40>
 8004b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <xQueueReceive+0x44>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <xQueueReceive+0x46>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <xQueueReceive+0x62>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	61fb      	str	r3, [r7, #28]
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	e7fd      	b.n	8004b42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b46:	f001 f86f 	bl	8005c28 <xTaskGetSchedulerState>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <xQueueReceive+0x72>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <xQueueReceive+0x76>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <xQueueReceive+0x78>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10b      	bne.n	8004b78 <xQueueReceive+0x94>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	61bb      	str	r3, [r7, #24]
}
 8004b72:	bf00      	nop
 8004b74:	bf00      	nop
 8004b76:	e7fd      	b.n	8004b74 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b78:	f001 fd48 	bl	800660c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01f      	beq.n	8004bc8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b8c:	f000 f8f6 	bl	8004d7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	1e5a      	subs	r2, r3, #1
 8004b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00f      	beq.n	8004bc0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba2:	3310      	adds	r3, #16
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fe75 	bl	8005894 <xTaskRemoveFromEventList>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bb0:	4b3c      	ldr	r3, [pc, #240]	@ (8004ca4 <xQueueReceive+0x1c0>)
 8004bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bc0:	f001 fd54 	bl	800666c <vPortExitCritical>
				return pdPASS;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e069      	b.n	8004c9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bce:	f001 fd4d 	bl	800666c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e062      	b.n	8004c9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bdc:	f107 0310 	add.w	r3, r7, #16
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 febb 	bl	800595c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bea:	f001 fd3f 	bl	800666c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bee:	f000 fc21 	bl	8005434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bf2:	f001 fd0b 	bl	800660c <vPortEnterCritical>
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bfc:	b25b      	sxtb	r3, r3
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c02:	d103      	bne.n	8004c0c <xQueueReceive+0x128>
 8004c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c12:	b25b      	sxtb	r3, r3
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c18:	d103      	bne.n	8004c22 <xQueueReceive+0x13e>
 8004c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c22:	f001 fd23 	bl	800666c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c26:	1d3a      	adds	r2, r7, #4
 8004c28:	f107 0310 	add.w	r3, r7, #16
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 feaa 	bl	8005988 <xTaskCheckForTimeOut>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d123      	bne.n	8004c82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c3c:	f000 f916 	bl	8004e6c <prvIsQueueEmpty>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d017      	beq.n	8004c76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	3324      	adds	r3, #36	@ 0x24
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fdce 	bl	80057f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c56:	f000 f8b7 	bl	8004dc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c5a:	f000 fbf9 	bl	8005450 <xTaskResumeAll>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d189      	bne.n	8004b78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004c64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca4 <xQueueReceive+0x1c0>)
 8004c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	e780      	b.n	8004b78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c78:	f000 f8a6 	bl	8004dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c7c:	f000 fbe8 	bl	8005450 <xTaskResumeAll>
 8004c80:	e77a      	b.n	8004b78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c84:	f000 f8a0 	bl	8004dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c88:	f000 fbe2 	bl	8005450 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c8e:	f000 f8ed 	bl	8004e6c <prvIsQueueEmpty>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f43f af6f 	beq.w	8004b78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3730      	adds	r7, #48	@ 0x30
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10d      	bne.n	8004ce2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d14d      	bne.n	8004d6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 ffc6 	bl	8005c64 <xTaskPriorityDisinherit>
 8004cd8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	605a      	str	r2, [r3, #4]
 8004ce0:	e043      	b.n	8004d6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d119      	bne.n	8004d1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6898      	ldr	r0, [r3, #8]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	f002 fd9d 	bl	8007832 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	441a      	add	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d32b      	bcc.n	8004d6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	609a      	str	r2, [r3, #8]
 8004d1a:	e026      	b.n	8004d6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	68d8      	ldr	r0, [r3, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	461a      	mov	r2, r3
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	f002 fd83 	bl	8007832 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	425b      	negs	r3, r3
 8004d36:	441a      	add	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d207      	bcs.n	8004d58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d50:	425b      	negs	r3, r3
 8004d52:	441a      	add	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d105      	bne.n	8004d6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004d72:	697b      	ldr	r3, [r7, #20]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d018      	beq.n	8004dc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	441a      	add	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d303      	bcc.n	8004db0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68d9      	ldr	r1, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	461a      	mov	r2, r3
 8004dba:	6838      	ldr	r0, [r7, #0]
 8004dbc:	f002 fd39 	bl	8007832 <memcpy>
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004dd0:	f001 fc1c 	bl	800660c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ddc:	e011      	b.n	8004e02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d012      	beq.n	8004e0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3324      	adds	r3, #36	@ 0x24
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fd52 	bl	8005894 <xTaskRemoveFromEventList>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004df6:	f000 fe2b 	bl	8005a50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dce9      	bgt.n	8004dde <prvUnlockQueue+0x16>
 8004e0a:	e000      	b.n	8004e0e <prvUnlockQueue+0x46>
					break;
 8004e0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	22ff      	movs	r2, #255	@ 0xff
 8004e12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e16:	f001 fc29 	bl	800666c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e1a:	f001 fbf7 	bl	800660c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e26:	e011      	b.n	8004e4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d012      	beq.n	8004e56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3310      	adds	r3, #16
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fd2d 	bl	8005894 <xTaskRemoveFromEventList>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e40:	f000 fe06 	bl	8005a50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e44:	7bbb      	ldrb	r3, [r7, #14]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	dce9      	bgt.n	8004e28 <prvUnlockQueue+0x60>
 8004e54:	e000      	b.n	8004e58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	22ff      	movs	r2, #255	@ 0xff
 8004e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e60:	f001 fc04 	bl	800666c <vPortExitCritical>
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e74:	f001 fbca 	bl	800660c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e001      	b.n	8004e8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e8a:	f001 fbef 	bl	800666c <vPortExitCritical>

	return xReturn;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ea0:	f001 fbb4 	bl	800660c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d102      	bne.n	8004eb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e001      	b.n	8004eba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eba:	f001 fbd7 	bl	800666c <vPortExitCritical>

	return xReturn;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	e014      	b.n	8004f02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8004f14 <vQueueAddToRegistry+0x4c>)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10b      	bne.n	8004efc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ee4:	490b      	ldr	r1, [pc, #44]	@ (8004f14 <vQueueAddToRegistry+0x4c>)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004eee:	4a09      	ldr	r2, [pc, #36]	@ (8004f14 <vQueueAddToRegistry+0x4c>)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004efa:	e006      	b.n	8004f0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b07      	cmp	r3, #7
 8004f06:	d9e7      	bls.n	8004ed8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr
 8004f14:	20000e68 	.word	0x20000e68

08004f18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f28:	f001 fb70 	bl	800660c <vPortEnterCritical>
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f32:	b25b      	sxtb	r3, r3
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f38:	d103      	bne.n	8004f42 <vQueueWaitForMessageRestricted+0x2a>
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f48:	b25b      	sxtb	r3, r3
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f4e:	d103      	bne.n	8004f58 <vQueueWaitForMessageRestricted+0x40>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f58:	f001 fb88 	bl	800666c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d106      	bne.n	8004f72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	3324      	adds	r3, #36	@ 0x24
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fc65 	bl	800583c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f72:	6978      	ldr	r0, [r7, #20]
 8004f74:	f7ff ff28 	bl	8004dc8 <prvUnlockQueue>
	}
 8004f78:	bf00      	nop
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08e      	sub	sp, #56	@ 0x38
 8004f84:	af04      	add	r7, sp, #16
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <xTaskCreateStatic+0x2c>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	623b      	str	r3, [r7, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	e7fd      	b.n	8004fa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <xTaskCreateStatic+0x4a>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	61fb      	str	r3, [r7, #28]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fca:	23a8      	movs	r3, #168	@ 0xa8
 8004fcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2ba8      	cmp	r3, #168	@ 0xa8
 8004fd2:	d00b      	beq.n	8004fec <xTaskCreateStatic+0x6c>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	61bb      	str	r3, [r7, #24]
}
 8004fe6:	bf00      	nop
 8004fe8:	bf00      	nop
 8004fea:	e7fd      	b.n	8004fe8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01e      	beq.n	8005030 <xTaskCreateStatic+0xb0>
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01b      	beq.n	8005030 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffa:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	2202      	movs	r2, #2
 8005006:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800500a:	2300      	movs	r3, #0
 800500c:	9303      	str	r3, [sp, #12]
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	9302      	str	r3, [sp, #8]
 8005012:	f107 0314 	add.w	r3, r7, #20
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f850 	bl	80050c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005028:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800502a:	f000 f8ed 	bl	8005208 <prvAddNewTaskToReadyList>
 800502e:	e001      	b.n	8005034 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005034:	697b      	ldr	r3, [r7, #20]
	}
 8005036:	4618      	mov	r0, r3
 8005038:	3728      	adds	r7, #40	@ 0x28
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800503e:	b580      	push	{r7, lr}
 8005040:	b08c      	sub	sp, #48	@ 0x30
 8005042:	af04      	add	r7, sp, #16
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4618      	mov	r0, r3
 8005054:	f001 fbdc 	bl	8006810 <pvPortMalloc>
 8005058:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00e      	beq.n	800507e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005060:	20a8      	movs	r0, #168	@ 0xa8
 8005062:	f001 fbd5 	bl	8006810 <pvPortMalloc>
 8005066:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	631a      	str	r2, [r3, #48]	@ 0x30
 8005074:	e005      	b.n	8005082 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005076:	6978      	ldr	r0, [r7, #20]
 8005078:	f001 fc92 	bl	80069a0 <vPortFree>
 800507c:	e001      	b.n	8005082 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d017      	beq.n	80050b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	2300      	movs	r3, #0
 8005094:	9303      	str	r3, [sp, #12]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	9302      	str	r3, [sp, #8]
 800509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509c:	9301      	str	r3, [sp, #4]
 800509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f80e 	bl	80050c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ac:	69f8      	ldr	r0, [r7, #28]
 80050ae:	f000 f8ab 	bl	8005208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050b2:	2301      	movs	r3, #1
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	e002      	b.n	80050be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050be:	69bb      	ldr	r3, [r7, #24]
	}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	461a      	mov	r2, r3
 80050e0:	21a5      	movs	r1, #165	@ 0xa5
 80050e2:	f002 fb09 	bl	80076f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050f0:	3b01      	subs	r3, #1
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f023 0307 	bic.w	r3, r3, #7
 80050fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	617b      	str	r3, [r7, #20]
}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	e7fd      	b.n	800511e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	e012      	b.n	800514e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	7819      	ldrb	r1, [r3, #0]
 8005130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	3334      	adds	r3, #52	@ 0x34
 8005138:	460a      	mov	r2, r1
 800513a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d006      	beq.n	8005156 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	3301      	adds	r3, #1
 800514c:	61fb      	str	r3, [r7, #28]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	2b0f      	cmp	r3, #15
 8005152:	d9e9      	bls.n	8005128 <prvInitialiseNewTask+0x60>
 8005154:	e000      	b.n	8005158 <prvInitialiseNewTask+0x90>
		{
			break;
 8005156:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005162:	2b37      	cmp	r3, #55	@ 0x37
 8005164:	d901      	bls.n	800516a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005166:	2337      	movs	r3, #55	@ 0x37
 8005168:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800516a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800516e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005174:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	2200      	movs	r2, #0
 800517a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800517c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517e:	3304      	adds	r3, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff f976 	bl	8004472 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	3318      	adds	r3, #24
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff f971 	bl	8004472 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005194:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005198:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800519c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b8:	3354      	adds	r3, #84	@ 0x54
 80051ba:	224c      	movs	r2, #76	@ 0x4c
 80051bc:	2100      	movs	r1, #0
 80051be:	4618      	mov	r0, r3
 80051c0:	f002 fa9a 	bl	80076f8 <memset>
 80051c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c6:	4a0d      	ldr	r2, [pc, #52]	@ (80051fc <prvInitialiseNewTask+0x134>)
 80051c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	4a0c      	ldr	r2, [pc, #48]	@ (8005200 <prvInitialiseNewTask+0x138>)
 80051ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005204 <prvInitialiseNewTask+0x13c>)
 80051d4:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	68f9      	ldr	r1, [r7, #12]
 80051da:	69b8      	ldr	r0, [r7, #24]
 80051dc:	f001 f926 	bl	800642c <pxPortInitialiseStack>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80051e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051f2:	bf00      	nop
 80051f4:	3720      	adds	r7, #32
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	200020f4 	.word	0x200020f4
 8005200:	2000215c 	.word	0x2000215c
 8005204:	200021c4 	.word	0x200021c4

08005208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005210:	f001 f9fc 	bl	800660c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005214:	4b2d      	ldr	r3, [pc, #180]	@ (80052cc <prvAddNewTaskToReadyList+0xc4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3301      	adds	r3, #1
 800521a:	4a2c      	ldr	r2, [pc, #176]	@ (80052cc <prvAddNewTaskToReadyList+0xc4>)
 800521c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800521e:	4b2c      	ldr	r3, [pc, #176]	@ (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005226:	4a2a      	ldr	r2, [pc, #168]	@ (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800522c:	4b27      	ldr	r3, [pc, #156]	@ (80052cc <prvAddNewTaskToReadyList+0xc4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d110      	bne.n	8005256 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005234:	f000 fc30 	bl	8005a98 <prvInitialiseTaskLists>
 8005238:	e00d      	b.n	8005256 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800523a:	4b26      	ldr	r3, [pc, #152]	@ (80052d4 <prvAddNewTaskToReadyList+0xcc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005242:	4b23      	ldr	r3, [pc, #140]	@ (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	429a      	cmp	r2, r3
 800524e:	d802      	bhi.n	8005256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005250:	4a1f      	ldr	r2, [pc, #124]	@ (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005256:	4b20      	ldr	r3, [pc, #128]	@ (80052d8 <prvAddNewTaskToReadyList+0xd0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	4a1e      	ldr	r2, [pc, #120]	@ (80052d8 <prvAddNewTaskToReadyList+0xd0>)
 800525e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005260:	4b1d      	ldr	r3, [pc, #116]	@ (80052d8 <prvAddNewTaskToReadyList+0xd0>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800526c:	4b1b      	ldr	r3, [pc, #108]	@ (80052dc <prvAddNewTaskToReadyList+0xd4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d903      	bls.n	800527c <prvAddNewTaskToReadyList+0x74>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	4a18      	ldr	r2, [pc, #96]	@ (80052dc <prvAddNewTaskToReadyList+0xd4>)
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4a15      	ldr	r2, [pc, #84]	@ (80052e0 <prvAddNewTaskToReadyList+0xd8>)
 800528a:	441a      	add	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3304      	adds	r3, #4
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f7ff f8f9 	bl	800448a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005298:	f001 f9e8 	bl	800666c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800529c:	4b0d      	ldr	r3, [pc, #52]	@ (80052d4 <prvAddNewTaskToReadyList+0xcc>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00e      	beq.n	80052c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052a4:	4b0a      	ldr	r3, [pc, #40]	@ (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d207      	bcs.n	80052c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052b2:	4b0c      	ldr	r3, [pc, #48]	@ (80052e4 <prvAddNewTaskToReadyList+0xdc>)
 80052b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	2000137c 	.word	0x2000137c
 80052d0:	20000ea8 	.word	0x20000ea8
 80052d4:	20001388 	.word	0x20001388
 80052d8:	20001398 	.word	0x20001398
 80052dc:	20001384 	.word	0x20001384
 80052e0:	20000eac 	.word	0x20000eac
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d018      	beq.n	800532c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052fa:	4b14      	ldr	r3, [pc, #80]	@ (800534c <vTaskDelay+0x64>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <vTaskDelay+0x32>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	60bb      	str	r3, [r7, #8]
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	e7fd      	b.n	8005316 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800531a:	f000 f88b 	bl	8005434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800531e:	2100      	movs	r1, #0
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fd0f 	bl	8005d44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005326:	f000 f893 	bl	8005450 <xTaskResumeAll>
 800532a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d107      	bne.n	8005342 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005332:	4b07      	ldr	r3, [pc, #28]	@ (8005350 <vTaskDelay+0x68>)
 8005334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	200013a4 	.word	0x200013a4
 8005350:	e000ed04 	.word	0xe000ed04

08005354 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	@ 0x28
 8005358:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005362:	463a      	mov	r2, r7
 8005364:	1d39      	adds	r1, r7, #4
 8005366:	f107 0308 	add.w	r3, r7, #8
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff f830 	bl	80043d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	9202      	str	r2, [sp, #8]
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	2300      	movs	r3, #0
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	2300      	movs	r3, #0
 8005380:	460a      	mov	r2, r1
 8005382:	4924      	ldr	r1, [pc, #144]	@ (8005414 <vTaskStartScheduler+0xc0>)
 8005384:	4824      	ldr	r0, [pc, #144]	@ (8005418 <vTaskStartScheduler+0xc4>)
 8005386:	f7ff fdfb 	bl	8004f80 <xTaskCreateStatic>
 800538a:	4603      	mov	r3, r0
 800538c:	4a23      	ldr	r2, [pc, #140]	@ (800541c <vTaskStartScheduler+0xc8>)
 800538e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005390:	4b22      	ldr	r3, [pc, #136]	@ (800541c <vTaskStartScheduler+0xc8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005398:	2301      	movs	r3, #1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	e001      	b.n	80053a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d102      	bne.n	80053ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053a8:	f000 fd20 	bl	8005dec <xTimerCreateTimerTask>
 80053ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d11b      	bne.n	80053ec <vTaskStartScheduler+0x98>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	613b      	str	r3, [r7, #16]
}
 80053c6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053c8:	4b15      	ldr	r3, [pc, #84]	@ (8005420 <vTaskStartScheduler+0xcc>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3354      	adds	r3, #84	@ 0x54
 80053ce:	4a15      	ldr	r2, [pc, #84]	@ (8005424 <vTaskStartScheduler+0xd0>)
 80053d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053d2:	4b15      	ldr	r3, [pc, #84]	@ (8005428 <vTaskStartScheduler+0xd4>)
 80053d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053da:	4b14      	ldr	r3, [pc, #80]	@ (800542c <vTaskStartScheduler+0xd8>)
 80053dc:	2201      	movs	r2, #1
 80053de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80053e0:	4b13      	ldr	r3, [pc, #76]	@ (8005430 <vTaskStartScheduler+0xdc>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053e6:	f001 f89f 	bl	8006528 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053ea:	e00f      	b.n	800540c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053f2:	d10b      	bne.n	800540c <vTaskStartScheduler+0xb8>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	60fb      	str	r3, [r7, #12]
}
 8005406:	bf00      	nop
 8005408:	bf00      	nop
 800540a:	e7fd      	b.n	8005408 <vTaskStartScheduler+0xb4>
}
 800540c:	bf00      	nop
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	08009880 	.word	0x08009880
 8005418:	08005a69 	.word	0x08005a69
 800541c:	200013a0 	.word	0x200013a0
 8005420:	20000ea8 	.word	0x20000ea8
 8005424:	2000001c 	.word	0x2000001c
 8005428:	2000139c 	.word	0x2000139c
 800542c:	20001388 	.word	0x20001388
 8005430:	20001380 	.word	0x20001380

08005434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005438:	4b04      	ldr	r3, [pc, #16]	@ (800544c <vTaskSuspendAll+0x18>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	4a03      	ldr	r2, [pc, #12]	@ (800544c <vTaskSuspendAll+0x18>)
 8005440:	6013      	str	r3, [r2, #0]
}
 8005442:	bf00      	nop
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	200013a4 	.word	0x200013a4

08005450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800545a:	2300      	movs	r3, #0
 800545c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800545e:	4b42      	ldr	r3, [pc, #264]	@ (8005568 <xTaskResumeAll+0x118>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <xTaskResumeAll+0x2e>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	603b      	str	r3, [r7, #0]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800547e:	f001 f8c5 	bl	800660c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005482:	4b39      	ldr	r3, [pc, #228]	@ (8005568 <xTaskResumeAll+0x118>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3b01      	subs	r3, #1
 8005488:	4a37      	ldr	r2, [pc, #220]	@ (8005568 <xTaskResumeAll+0x118>)
 800548a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800548c:	4b36      	ldr	r3, [pc, #216]	@ (8005568 <xTaskResumeAll+0x118>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d162      	bne.n	800555a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005494:	4b35      	ldr	r3, [pc, #212]	@ (800556c <xTaskResumeAll+0x11c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d05e      	beq.n	800555a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800549c:	e02f      	b.n	80054fe <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800549e:	4b34      	ldr	r3, [pc, #208]	@ (8005570 <xTaskResumeAll+0x120>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3318      	adds	r3, #24
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff f848 	bl	8004540 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff f843 	bl	8004540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054be:	4b2d      	ldr	r3, [pc, #180]	@ (8005574 <xTaskResumeAll+0x124>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d903      	bls.n	80054ce <xTaskResumeAll+0x7e>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005574 <xTaskResumeAll+0x124>)
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4a27      	ldr	r2, [pc, #156]	@ (8005578 <xTaskResumeAll+0x128>)
 80054dc:	441a      	add	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3304      	adds	r3, #4
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f7fe ffd0 	bl	800448a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ee:	4b23      	ldr	r3, [pc, #140]	@ (800557c <xTaskResumeAll+0x12c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d302      	bcc.n	80054fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80054f8:	4b21      	ldr	r3, [pc, #132]	@ (8005580 <xTaskResumeAll+0x130>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005570 <xTaskResumeAll+0x120>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1cb      	bne.n	800549e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800550c:	f000 fb68 	bl	8005be0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005510:	4b1c      	ldr	r3, [pc, #112]	@ (8005584 <xTaskResumeAll+0x134>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d010      	beq.n	800553e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800551c:	f000 f844 	bl	80055a8 <xTaskIncrementTick>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005526:	4b16      	ldr	r3, [pc, #88]	@ (8005580 <xTaskResumeAll+0x130>)
 8005528:	2201      	movs	r2, #1
 800552a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3b01      	subs	r3, #1
 8005530:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1f1      	bne.n	800551c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005538:	4b12      	ldr	r3, [pc, #72]	@ (8005584 <xTaskResumeAll+0x134>)
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800553e:	4b10      	ldr	r3, [pc, #64]	@ (8005580 <xTaskResumeAll+0x130>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005546:	2301      	movs	r3, #1
 8005548:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800554a:	4b0f      	ldr	r3, [pc, #60]	@ (8005588 <xTaskResumeAll+0x138>)
 800554c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800555a:	f001 f887 	bl	800666c <vPortExitCritical>

	return xAlreadyYielded;
 800555e:	68bb      	ldr	r3, [r7, #8]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	200013a4 	.word	0x200013a4
 800556c:	2000137c 	.word	0x2000137c
 8005570:	2000133c 	.word	0x2000133c
 8005574:	20001384 	.word	0x20001384
 8005578:	20000eac 	.word	0x20000eac
 800557c:	20000ea8 	.word	0x20000ea8
 8005580:	20001390 	.word	0x20001390
 8005584:	2000138c 	.word	0x2000138c
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005592:	4b04      	ldr	r3, [pc, #16]	@ (80055a4 <xTaskGetTickCount+0x18>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005598:	687b      	ldr	r3, [r7, #4]
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr
 80055a4:	20001380 	.word	0x20001380

080055a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b2:	4b52      	ldr	r3, [pc, #328]	@ (80056fc <xTaskIncrementTick+0x154>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f040 808f 	bne.w	80056da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055bc:	4b50      	ldr	r3, [pc, #320]	@ (8005700 <xTaskIncrementTick+0x158>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3301      	adds	r3, #1
 80055c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055c4:	4a4e      	ldr	r2, [pc, #312]	@ (8005700 <xTaskIncrementTick+0x158>)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d121      	bne.n	8005614 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80055d0:	4b4c      	ldr	r3, [pc, #304]	@ (8005704 <xTaskIncrementTick+0x15c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	603b      	str	r3, [r7, #0]
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	e7fd      	b.n	80055ee <xTaskIncrementTick+0x46>
 80055f2:	4b44      	ldr	r3, [pc, #272]	@ (8005704 <xTaskIncrementTick+0x15c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	4b43      	ldr	r3, [pc, #268]	@ (8005708 <xTaskIncrementTick+0x160>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a41      	ldr	r2, [pc, #260]	@ (8005704 <xTaskIncrementTick+0x15c>)
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	4a41      	ldr	r2, [pc, #260]	@ (8005708 <xTaskIncrementTick+0x160>)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4b41      	ldr	r3, [pc, #260]	@ (800570c <xTaskIncrementTick+0x164>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3301      	adds	r3, #1
 800560c:	4a3f      	ldr	r2, [pc, #252]	@ (800570c <xTaskIncrementTick+0x164>)
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	f000 fae6 	bl	8005be0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005614:	4b3e      	ldr	r3, [pc, #248]	@ (8005710 <xTaskIncrementTick+0x168>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	429a      	cmp	r2, r3
 800561c:	d34e      	bcc.n	80056bc <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800561e:	4b39      	ldr	r3, [pc, #228]	@ (8005704 <xTaskIncrementTick+0x15c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <xTaskIncrementTick+0x84>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <xTaskIncrementTick+0x86>
 800562c:	2300      	movs	r3, #0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005632:	4b37      	ldr	r3, [pc, #220]	@ (8005710 <xTaskIncrementTick+0x168>)
 8005634:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005638:	601a      	str	r2, [r3, #0]
					break;
 800563a:	e03f      	b.n	80056bc <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800563c:	4b31      	ldr	r3, [pc, #196]	@ (8005704 <xTaskIncrementTick+0x15c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d203      	bcs.n	800565c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005654:	4a2e      	ldr	r2, [pc, #184]	@ (8005710 <xTaskIncrementTick+0x168>)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6013      	str	r3, [r2, #0]
						break;
 800565a:	e02f      	b.n	80056bc <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	3304      	adds	r3, #4
 8005660:	4618      	mov	r0, r3
 8005662:	f7fe ff6d 	bl	8004540 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	3318      	adds	r3, #24
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe ff64 	bl	8004540 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567c:	4b25      	ldr	r3, [pc, #148]	@ (8005714 <xTaskIncrementTick+0x16c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d903      	bls.n	800568c <xTaskIncrementTick+0xe4>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	4a22      	ldr	r2, [pc, #136]	@ (8005714 <xTaskIncrementTick+0x16c>)
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4a1f      	ldr	r2, [pc, #124]	@ (8005718 <xTaskIncrementTick+0x170>)
 800569a:	441a      	add	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	3304      	adds	r3, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f7fe fef1 	bl	800448a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ac:	4b1b      	ldr	r3, [pc, #108]	@ (800571c <xTaskIncrementTick+0x174>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d3b3      	bcc.n	800561e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80056b6:	2301      	movs	r3, #1
 80056b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ba:	e7b0      	b.n	800561e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056bc:	4b17      	ldr	r3, [pc, #92]	@ (800571c <xTaskIncrementTick+0x174>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c2:	4915      	ldr	r1, [pc, #84]	@ (8005718 <xTaskIncrementTick+0x170>)
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d907      	bls.n	80056e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e004      	b.n	80056e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056da:	4b11      	ldr	r3, [pc, #68]	@ (8005720 <xTaskIncrementTick+0x178>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3301      	adds	r3, #1
 80056e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005720 <xTaskIncrementTick+0x178>)
 80056e2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005724 <xTaskIncrementTick+0x17c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80056ec:	2301      	movs	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80056f0:	697b      	ldr	r3, [r7, #20]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	200013a4 	.word	0x200013a4
 8005700:	20001380 	.word	0x20001380
 8005704:	20001334 	.word	0x20001334
 8005708:	20001338 	.word	0x20001338
 800570c:	20001394 	.word	0x20001394
 8005710:	2000139c 	.word	0x2000139c
 8005714:	20001384 	.word	0x20001384
 8005718:	20000eac 	.word	0x20000eac
 800571c:	20000ea8 	.word	0x20000ea8
 8005720:	2000138c 	.word	0x2000138c
 8005724:	20001390 	.word	0x20001390

08005728 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800572e:	4b2a      	ldr	r3, [pc, #168]	@ (80057d8 <vTaskSwitchContext+0xb0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005736:	4b29      	ldr	r3, [pc, #164]	@ (80057dc <vTaskSwitchContext+0xb4>)
 8005738:	2201      	movs	r2, #1
 800573a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800573c:	e047      	b.n	80057ce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800573e:	4b27      	ldr	r3, [pc, #156]	@ (80057dc <vTaskSwitchContext+0xb4>)
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005744:	4b26      	ldr	r3, [pc, #152]	@ (80057e0 <vTaskSwitchContext+0xb8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	e011      	b.n	8005770 <vTaskSwitchContext+0x48>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <vTaskSwitchContext+0x42>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	607b      	str	r3, [r7, #4]
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	e7fd      	b.n	8005766 <vTaskSwitchContext+0x3e>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3b01      	subs	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	491c      	ldr	r1, [pc, #112]	@ (80057e4 <vTaskSwitchContext+0xbc>)
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0e3      	beq.n	800574c <vTaskSwitchContext+0x24>
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4a15      	ldr	r2, [pc, #84]	@ (80057e4 <vTaskSwitchContext+0xbc>)
 8005790:	4413      	add	r3, r2
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	3308      	adds	r3, #8
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d104      	bne.n	80057b4 <vTaskSwitchContext+0x8c>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	605a      	str	r2, [r3, #4]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	4a0b      	ldr	r2, [pc, #44]	@ (80057e8 <vTaskSwitchContext+0xc0>)
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	4a08      	ldr	r2, [pc, #32]	@ (80057e0 <vTaskSwitchContext+0xb8>)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057c4:	4b08      	ldr	r3, [pc, #32]	@ (80057e8 <vTaskSwitchContext+0xc0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3354      	adds	r3, #84	@ 0x54
 80057ca:	4a08      	ldr	r2, [pc, #32]	@ (80057ec <vTaskSwitchContext+0xc4>)
 80057cc:	6013      	str	r3, [r2, #0]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	200013a4 	.word	0x200013a4
 80057dc:	20001390 	.word	0x20001390
 80057e0:	20001384 	.word	0x20001384
 80057e4:	20000eac 	.word	0x20000eac
 80057e8:	20000ea8 	.word	0x20000ea8
 80057ec:	2000001c 	.word	0x2000001c

080057f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10b      	bne.n	8005818 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	60fb      	str	r3, [r7, #12]
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	e7fd      	b.n	8005814 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005818:	4b07      	ldr	r3, [pc, #28]	@ (8005838 <vTaskPlaceOnEventList+0x48>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3318      	adds	r3, #24
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7fe fe55 	bl	80044d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005826:	2101      	movs	r1, #1
 8005828:	6838      	ldr	r0, [r7, #0]
 800582a:	f000 fa8b 	bl	8005d44 <prvAddCurrentTaskToDelayedList>
}
 800582e:	bf00      	nop
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20000ea8 	.word	0x20000ea8

0800583c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10b      	bne.n	8005866 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	617b      	str	r3, [r7, #20]
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	e7fd      	b.n	8005862 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005866:	4b0a      	ldr	r3, [pc, #40]	@ (8005890 <vTaskPlaceOnEventListRestricted+0x54>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3318      	adds	r3, #24
 800586c:	4619      	mov	r1, r3
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f7fe fe0b 	bl	800448a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800587a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800587e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	68b8      	ldr	r0, [r7, #8]
 8005884:	f000 fa5e 	bl	8005d44 <prvAddCurrentTaskToDelayedList>
	}
 8005888:	bf00      	nop
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000ea8 	.word	0x20000ea8

08005894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10b      	bne.n	80058c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	60fb      	str	r3, [r7, #12]
}
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	e7fd      	b.n	80058be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	3318      	adds	r3, #24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe fe3a 	bl	8004540 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005944 <xTaskRemoveFromEventList+0xb0>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d11d      	bne.n	8005910 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe fe31 	bl	8004540 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e2:	4b19      	ldr	r3, [pc, #100]	@ (8005948 <xTaskRemoveFromEventList+0xb4>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d903      	bls.n	80058f2 <xTaskRemoveFromEventList+0x5e>
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	4a16      	ldr	r2, [pc, #88]	@ (8005948 <xTaskRemoveFromEventList+0xb4>)
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4a13      	ldr	r2, [pc, #76]	@ (800594c <xTaskRemoveFromEventList+0xb8>)
 8005900:	441a      	add	r2, r3
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	3304      	adds	r3, #4
 8005906:	4619      	mov	r1, r3
 8005908:	4610      	mov	r0, r2
 800590a:	f7fe fdbe 	bl	800448a <vListInsertEnd>
 800590e:	e005      	b.n	800591c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	3318      	adds	r3, #24
 8005914:	4619      	mov	r1, r3
 8005916:	480e      	ldr	r0, [pc, #56]	@ (8005950 <xTaskRemoveFromEventList+0xbc>)
 8005918:	f7fe fdb7 	bl	800448a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005920:	4b0c      	ldr	r3, [pc, #48]	@ (8005954 <xTaskRemoveFromEventList+0xc0>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	429a      	cmp	r2, r3
 8005928:	d905      	bls.n	8005936 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800592a:	2301      	movs	r3, #1
 800592c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800592e:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <xTaskRemoveFromEventList+0xc4>)
 8005930:	2201      	movs	r2, #1
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	e001      	b.n	800593a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800593a:	697b      	ldr	r3, [r7, #20]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	200013a4 	.word	0x200013a4
 8005948:	20001384 	.word	0x20001384
 800594c:	20000eac 	.word	0x20000eac
 8005950:	2000133c 	.word	0x2000133c
 8005954:	20000ea8 	.word	0x20000ea8
 8005958:	20001390 	.word	0x20001390

0800595c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005964:	4b06      	ldr	r3, [pc, #24]	@ (8005980 <vTaskInternalSetTimeOutState+0x24>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800596c:	4b05      	ldr	r3, [pc, #20]	@ (8005984 <vTaskInternalSetTimeOutState+0x28>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	605a      	str	r2, [r3, #4]
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	20001394 	.word	0x20001394
 8005984:	20001380 	.word	0x20001380

08005988 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10b      	bne.n	80059b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	613b      	str	r3, [r7, #16]
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10b      	bne.n	80059ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60fb      	str	r3, [r7, #12]
}
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	e7fd      	b.n	80059ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80059ce:	f000 fe1d 	bl	800660c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005a48 <xTaskCheckForTimeOut+0xc0>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059ea:	d102      	bne.n	80059f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e023      	b.n	8005a3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4b15      	ldr	r3, [pc, #84]	@ (8005a4c <xTaskCheckForTimeOut+0xc4>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d007      	beq.n	8005a0e <xTaskCheckForTimeOut+0x86>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d302      	bcc.n	8005a0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	e015      	b.n	8005a3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d20b      	bcs.n	8005a30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff ff99 	bl	800595c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61fb      	str	r3, [r7, #28]
 8005a2e:	e004      	b.n	8005a3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a36:	2301      	movs	r3, #1
 8005a38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a3a:	f000 fe17 	bl	800666c <vPortExitCritical>

	return xReturn;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3720      	adds	r7, #32
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20001380 	.word	0x20001380
 8005a4c:	20001394 	.word	0x20001394

08005a50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a54:	4b03      	ldr	r3, [pc, #12]	@ (8005a64 <vTaskMissedYield+0x14>)
 8005a56:	2201      	movs	r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
}
 8005a5a:	bf00      	nop
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20001390 	.word	0x20001390

08005a68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a70:	f000 f852 	bl	8005b18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a74:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <prvIdleTask+0x28>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d9f9      	bls.n	8005a70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a7c:	4b05      	ldr	r3, [pc, #20]	@ (8005a94 <prvIdleTask+0x2c>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a8c:	e7f0      	b.n	8005a70 <prvIdleTask+0x8>
 8005a8e:	bf00      	nop
 8005a90:	20000eac 	.word	0x20000eac
 8005a94:	e000ed04 	.word	0xe000ed04

08005a98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	607b      	str	r3, [r7, #4]
 8005aa2:	e00c      	b.n	8005abe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4a12      	ldr	r2, [pc, #72]	@ (8005af8 <prvInitialiseTaskLists+0x60>)
 8005ab0:	4413      	add	r3, r2
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fcbe 	bl	8004434 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3301      	adds	r3, #1
 8005abc:	607b      	str	r3, [r7, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b37      	cmp	r3, #55	@ 0x37
 8005ac2:	d9ef      	bls.n	8005aa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ac4:	480d      	ldr	r0, [pc, #52]	@ (8005afc <prvInitialiseTaskLists+0x64>)
 8005ac6:	f7fe fcb5 	bl	8004434 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005aca:	480d      	ldr	r0, [pc, #52]	@ (8005b00 <prvInitialiseTaskLists+0x68>)
 8005acc:	f7fe fcb2 	bl	8004434 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ad0:	480c      	ldr	r0, [pc, #48]	@ (8005b04 <prvInitialiseTaskLists+0x6c>)
 8005ad2:	f7fe fcaf 	bl	8004434 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ad6:	480c      	ldr	r0, [pc, #48]	@ (8005b08 <prvInitialiseTaskLists+0x70>)
 8005ad8:	f7fe fcac 	bl	8004434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005adc:	480b      	ldr	r0, [pc, #44]	@ (8005b0c <prvInitialiseTaskLists+0x74>)
 8005ade:	f7fe fca9 	bl	8004434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8005b10 <prvInitialiseTaskLists+0x78>)
 8005ae4:	4a05      	ldr	r2, [pc, #20]	@ (8005afc <prvInitialiseTaskLists+0x64>)
 8005ae6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b14 <prvInitialiseTaskLists+0x7c>)
 8005aea:	4a05      	ldr	r2, [pc, #20]	@ (8005b00 <prvInitialiseTaskLists+0x68>)
 8005aec:	601a      	str	r2, [r3, #0]
}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000eac 	.word	0x20000eac
 8005afc:	2000130c 	.word	0x2000130c
 8005b00:	20001320 	.word	0x20001320
 8005b04:	2000133c 	.word	0x2000133c
 8005b08:	20001350 	.word	0x20001350
 8005b0c:	20001368 	.word	0x20001368
 8005b10:	20001334 	.word	0x20001334
 8005b14:	20001338 	.word	0x20001338

08005b18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b1e:	e019      	b.n	8005b54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b20:	f000 fd74 	bl	800660c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b24:	4b10      	ldr	r3, [pc, #64]	@ (8005b68 <prvCheckTasksWaitingTermination+0x50>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fe fd05 	bl	8004540 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b36:	4b0d      	ldr	r3, [pc, #52]	@ (8005b6c <prvCheckTasksWaitingTermination+0x54>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8005b6c <prvCheckTasksWaitingTermination+0x54>)
 8005b3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b40:	4b0b      	ldr	r3, [pc, #44]	@ (8005b70 <prvCheckTasksWaitingTermination+0x58>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	4a0a      	ldr	r2, [pc, #40]	@ (8005b70 <prvCheckTasksWaitingTermination+0x58>)
 8005b48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b4a:	f000 fd8f 	bl	800666c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f810 	bl	8005b74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b54:	4b06      	ldr	r3, [pc, #24]	@ (8005b70 <prvCheckTasksWaitingTermination+0x58>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e1      	bne.n	8005b20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20001350 	.word	0x20001350
 8005b6c:	2000137c 	.word	0x2000137c
 8005b70:	20001364 	.word	0x20001364

08005b74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3354      	adds	r3, #84	@ 0x54
 8005b80:	4618      	mov	r0, r3
 8005b82:	f001 fdc5 	bl	8007710 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d108      	bne.n	8005ba2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 ff03 	bl	80069a0 <vPortFree>
				vPortFree( pxTCB );
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 ff00 	bl	80069a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ba0:	e019      	b.n	8005bd6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d103      	bne.n	8005bb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fef7 	bl	80069a0 <vPortFree>
	}
 8005bb2:	e010      	b.n	8005bd6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d00b      	beq.n	8005bd6 <prvDeleteTCB+0x62>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60fb      	str	r3, [r7, #12]
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	e7fd      	b.n	8005bd2 <prvDeleteTCB+0x5e>
	}
 8005bd6:	bf00      	nop
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005be6:	4b0e      	ldr	r3, [pc, #56]	@ (8005c20 <prvResetNextTaskUnblockTime+0x40>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <prvResetNextTaskUnblockTime+0x14>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <prvResetNextTaskUnblockTime+0x16>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8005c24 <prvResetNextTaskUnblockTime+0x44>)
 8005bfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c02:	e008      	b.n	8005c16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c04:	4b06      	ldr	r3, [pc, #24]	@ (8005c20 <prvResetNextTaskUnblockTime+0x40>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4a04      	ldr	r2, [pc, #16]	@ (8005c24 <prvResetNextTaskUnblockTime+0x44>)
 8005c14:	6013      	str	r3, [r2, #0]
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bc80      	pop	{r7}
 8005c1e:	4770      	bx	lr
 8005c20:	20001334 	.word	0x20001334
 8005c24:	2000139c 	.word	0x2000139c

08005c28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <xTaskGetSchedulerState+0x34>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c36:	2301      	movs	r3, #1
 8005c38:	607b      	str	r3, [r7, #4]
 8005c3a:	e008      	b.n	8005c4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c3c:	4b08      	ldr	r3, [pc, #32]	@ (8005c60 <xTaskGetSchedulerState+0x38>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d102      	bne.n	8005c4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c44:	2302      	movs	r3, #2
 8005c46:	607b      	str	r3, [r7, #4]
 8005c48:	e001      	b.n	8005c4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c4e:	687b      	ldr	r3, [r7, #4]
	}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20001388 	.word	0x20001388
 8005c60:	200013a4 	.word	0x200013a4

08005c64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d058      	beq.n	8005d2c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d38 <xTaskPriorityDisinherit+0xd4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d00b      	beq.n	8005c9c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	60fb      	str	r3, [r7, #12]
}
 8005c96:	bf00      	nop
 8005c98:	bf00      	nop
 8005c9a:	e7fd      	b.n	8005c98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	60bb      	str	r3, [r7, #8]
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	e7fd      	b.n	8005cb8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc0:	1e5a      	subs	r2, r3, #1
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d02c      	beq.n	8005d2c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d128      	bne.n	8005d2c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe fc2e 	bl	8004540 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d3c <xTaskPriorityDisinherit+0xd8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d903      	bls.n	8005d0c <xTaskPriorityDisinherit+0xa8>
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d08:	4a0c      	ldr	r2, [pc, #48]	@ (8005d3c <xTaskPriorityDisinherit+0xd8>)
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4a09      	ldr	r2, [pc, #36]	@ (8005d40 <xTaskPriorityDisinherit+0xdc>)
 8005d1a:	441a      	add	r2, r3
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4619      	mov	r1, r3
 8005d22:	4610      	mov	r0, r2
 8005d24:	f7fe fbb1 	bl	800448a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d2c:	697b      	ldr	r3, [r7, #20]
	}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000ea8 	.word	0x20000ea8
 8005d3c:	20001384 	.word	0x20001384
 8005d40:	20000eac 	.word	0x20000eac

08005d44 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d4e:	4b21      	ldr	r3, [pc, #132]	@ (8005dd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d54:	4b20      	ldr	r3, [pc, #128]	@ (8005dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe fbf0 	bl	8004540 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d66:	d10a      	bne.n	8005d7e <prvAddCurrentTaskToDelayedList+0x3a>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4619      	mov	r1, r3
 8005d76:	4819      	ldr	r0, [pc, #100]	@ (8005ddc <prvAddCurrentTaskToDelayedList+0x98>)
 8005d78:	f7fe fb87 	bl	800448a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d7c:	e026      	b.n	8005dcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d86:	4b14      	ldr	r3, [pc, #80]	@ (8005dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d209      	bcs.n	8005daa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d96:	4b12      	ldr	r3, [pc, #72]	@ (8005de0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	4619      	mov	r1, r3
 8005da2:	4610      	mov	r0, r2
 8005da4:	f7fe fb94 	bl	80044d0 <vListInsert>
}
 8005da8:	e010      	b.n	8005dcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005daa:	4b0e      	ldr	r3, [pc, #56]	@ (8005de4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4619      	mov	r1, r3
 8005db6:	4610      	mov	r0, r2
 8005db8:	f7fe fb8a 	bl	80044d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005de8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d202      	bcs.n	8005dcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005dc6:	4a08      	ldr	r2, [pc, #32]	@ (8005de8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	6013      	str	r3, [r2, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20001380 	.word	0x20001380
 8005dd8:	20000ea8 	.word	0x20000ea8
 8005ddc:	20001368 	.word	0x20001368
 8005de0:	20001338 	.word	0x20001338
 8005de4:	20001334 	.word	0x20001334
 8005de8:	2000139c 	.word	0x2000139c

08005dec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b08a      	sub	sp, #40	@ 0x28
 8005df0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005df6:	f000 fad9 	bl	80063ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8005e70 <xTimerCreateTimerTask+0x84>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d021      	beq.n	8005e46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e0a:	1d3a      	adds	r2, r7, #4
 8005e0c:	f107 0108 	add.w	r1, r7, #8
 8005e10:	f107 030c 	add.w	r3, r7, #12
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe faf3 	bl	8004400 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	9202      	str	r2, [sp, #8]
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	2302      	movs	r3, #2
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	460a      	mov	r2, r1
 8005e2c:	4911      	ldr	r1, [pc, #68]	@ (8005e74 <xTimerCreateTimerTask+0x88>)
 8005e2e:	4812      	ldr	r0, [pc, #72]	@ (8005e78 <xTimerCreateTimerTask+0x8c>)
 8005e30:	f7ff f8a6 	bl	8004f80 <xTaskCreateStatic>
 8005e34:	4603      	mov	r3, r0
 8005e36:	4a11      	ldr	r2, [pc, #68]	@ (8005e7c <xTimerCreateTimerTask+0x90>)
 8005e38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e3a:	4b10      	ldr	r3, [pc, #64]	@ (8005e7c <xTimerCreateTimerTask+0x90>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e42:	2301      	movs	r3, #1
 8005e44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10b      	bne.n	8005e64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	613b      	str	r3, [r7, #16]
}
 8005e5e:	bf00      	nop
 8005e60:	bf00      	nop
 8005e62:	e7fd      	b.n	8005e60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e64:	697b      	ldr	r3, [r7, #20]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	200013d8 	.word	0x200013d8
 8005e74:	08009888 	.word	0x08009888
 8005e78:	08005fa1 	.word	0x08005fa1
 8005e7c:	200013dc 	.word	0x200013dc

08005e80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	@ 0x28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10b      	bne.n	8005eb0 <xTimerGenericCommand+0x30>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	623b      	str	r3, [r7, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	bf00      	nop
 8005eae:	e7fd      	b.n	8005eac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005eb0:	4b19      	ldr	r3, [pc, #100]	@ (8005f18 <xTimerGenericCommand+0x98>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d02a      	beq.n	8005f0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	dc18      	bgt.n	8005efc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005eca:	f7ff fead 	bl	8005c28 <xTaskGetSchedulerState>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d109      	bne.n	8005ee8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ed4:	4b10      	ldr	r3, [pc, #64]	@ (8005f18 <xTimerGenericCommand+0x98>)
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	f107 0110 	add.w	r1, r7, #16
 8005edc:	2300      	movs	r3, #0
 8005ede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee0:	f7fe fc62 	bl	80047a8 <xQueueGenericSend>
 8005ee4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ee6:	e012      	b.n	8005f0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f18 <xTimerGenericCommand+0x98>)
 8005eea:	6818      	ldr	r0, [r3, #0]
 8005eec:	f107 0110 	add.w	r1, r7, #16
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f7fe fc58 	bl	80047a8 <xQueueGenericSend>
 8005ef8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005efa:	e008      	b.n	8005f0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005efc:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <xTimerGenericCommand+0x98>)
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	f107 0110 	add.w	r1, r7, #16
 8005f04:	2300      	movs	r3, #0
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	f7fe fd50 	bl	80049ac <xQueueGenericSendFromISR>
 8005f0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3728      	adds	r7, #40	@ 0x28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	200013d8 	.word	0x200013d8

08005f1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f26:	4b1d      	ldr	r3, [pc, #116]	@ (8005f9c <prvProcessExpiredTimer+0x80>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe fb03 	bl	8004540 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d123      	bne.n	8005f8a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	18d1      	adds	r1, r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	6978      	ldr	r0, [r7, #20]
 8005f50:	f000 f8cc 	bl	80060ec <prvInsertTimerInActiveList>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d017      	beq.n	8005f8a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	2100      	movs	r1, #0
 8005f64:	6978      	ldr	r0, [r7, #20]
 8005f66:	f7ff ff8b 	bl	8005e80 <xTimerGenericCommand>
 8005f6a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10b      	bne.n	8005f8a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60fb      	str	r3, [r7, #12]
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	e7fd      	b.n	8005f86 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	6978      	ldr	r0, [r7, #20]
 8005f90:	4798      	blx	r3
}
 8005f92:	bf00      	nop
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200013d0 	.word	0x200013d0

08005fa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fa8:	f107 0308 	add.w	r3, r7, #8
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 f859 	bl	8006064 <prvGetNextExpireTime>
 8005fb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f805 	bl	8005fc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005fbe:	f000 f8d7 	bl	8006170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fc2:	bf00      	nop
 8005fc4:	e7f0      	b.n	8005fa8 <prvTimerTask+0x8>
	...

08005fc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fd2:	f7ff fa2f 	bl	8005434 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fd6:	f107 0308 	add.w	r3, r7, #8
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 f866 	bl	80060ac <prvSampleTimeNow>
 8005fe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d130      	bne.n	800604a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <prvProcessTimerOrBlockTask+0x3c>
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d806      	bhi.n	8006004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ff6:	f7ff fa2b 	bl	8005450 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ffa:	68f9      	ldr	r1, [r7, #12]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ff8d 	bl	8005f1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006002:	e024      	b.n	800604e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d008      	beq.n	800601c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800600a:	4b13      	ldr	r3, [pc, #76]	@ (8006058 <prvProcessTimerOrBlockTask+0x90>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	bf0c      	ite	eq
 8006014:	2301      	moveq	r3, #1
 8006016:	2300      	movne	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800601c:	4b0f      	ldr	r3, [pc, #60]	@ (800605c <prvProcessTimerOrBlockTask+0x94>)
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	4619      	mov	r1, r3
 800602a:	f7fe ff75 	bl	8004f18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800602e:	f7ff fa0f 	bl	8005450 <xTaskResumeAll>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006038:	4b09      	ldr	r3, [pc, #36]	@ (8006060 <prvProcessTimerOrBlockTask+0x98>)
 800603a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	f3bf 8f6f 	isb	sy
}
 8006048:	e001      	b.n	800604e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800604a:	f7ff fa01 	bl	8005450 <xTaskResumeAll>
}
 800604e:	bf00      	nop
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	200013d4 	.word	0x200013d4
 800605c:	200013d8 	.word	0x200013d8
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800606c:	4b0e      	ldr	r3, [pc, #56]	@ (80060a8 <prvGetNextExpireTime+0x44>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	bf0c      	ite	eq
 8006076:	2301      	moveq	r3, #1
 8006078:	2300      	movne	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d105      	bne.n	8006096 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800608a:	4b07      	ldr	r3, [pc, #28]	@ (80060a8 <prvGetNextExpireTime+0x44>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	e001      	b.n	800609a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800609a:	68fb      	ldr	r3, [r7, #12]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc80      	pop	{r7}
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	200013d0 	.word	0x200013d0

080060ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060b4:	f7ff fa6a 	bl	800558c <xTaskGetTickCount>
 80060b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060ba:	4b0b      	ldr	r3, [pc, #44]	@ (80060e8 <prvSampleTimeNow+0x3c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d205      	bcs.n	80060d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060c4:	f000 f910 	bl	80062e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e002      	b.n	80060d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060d6:	4a04      	ldr	r2, [pc, #16]	@ (80060e8 <prvSampleTimeNow+0x3c>)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060dc:	68fb      	ldr	r3, [r7, #12]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200013e0 	.word	0x200013e0

080060ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	429a      	cmp	r2, r3
 8006110:	d812      	bhi.n	8006138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	1ad2      	subs	r2, r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	429a      	cmp	r2, r3
 800611e:	d302      	bcc.n	8006126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006120:	2301      	movs	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	e01b      	b.n	800615e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006126:	4b10      	ldr	r3, [pc, #64]	@ (8006168 <prvInsertTimerInActiveList+0x7c>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f7fe f9cd 	bl	80044d0 <vListInsert>
 8006136:	e012      	b.n	800615e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d206      	bcs.n	800614e <prvInsertTimerInActiveList+0x62>
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d302      	bcc.n	800614e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006148:	2301      	movs	r3, #1
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e007      	b.n	800615e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800614e:	4b07      	ldr	r3, [pc, #28]	@ (800616c <prvInsertTimerInActiveList+0x80>)
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3304      	adds	r3, #4
 8006156:	4619      	mov	r1, r3
 8006158:	4610      	mov	r0, r2
 800615a:	f7fe f9b9 	bl	80044d0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800615e:	697b      	ldr	r3, [r7, #20]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	200013d4 	.word	0x200013d4
 800616c:	200013d0 	.word	0x200013d0

08006170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08e      	sub	sp, #56	@ 0x38
 8006174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006176:	e0a5      	b.n	80062c4 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	da19      	bge.n	80061b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800617e:	1d3b      	adds	r3, r7, #4
 8006180:	3304      	adds	r3, #4
 8006182:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	61fb      	str	r3, [r7, #28]
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	e7fd      	b.n	800619e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061a8:	6850      	ldr	r0, [r2, #4]
 80061aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061ac:	6892      	ldr	r2, [r2, #8]
 80061ae:	4611      	mov	r1, r2
 80061b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f2c0 8085 	blt.w	80062c4 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c8:	3304      	adds	r3, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe f9b8 	bl	8004540 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061d0:	463b      	mov	r3, r7
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff ff6a 	bl	80060ac <prvSampleTimeNow>
 80061d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b09      	cmp	r3, #9
 80061de:	d86c      	bhi.n	80062ba <prvProcessReceivedCommands+0x14a>
 80061e0:	a201      	add	r2, pc, #4	@ (adr r2, 80061e8 <prvProcessReceivedCommands+0x78>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	08006211 	.word	0x08006211
 80061ec:	08006211 	.word	0x08006211
 80061f0:	08006211 	.word	0x08006211
 80061f4:	080062bb 	.word	0x080062bb
 80061f8:	0800626f 	.word	0x0800626f
 80061fc:	080062a9 	.word	0x080062a9
 8006200:	08006211 	.word	0x08006211
 8006204:	08006211 	.word	0x08006211
 8006208:	080062bb 	.word	0x080062bb
 800620c:	0800626f 	.word	0x0800626f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	18d1      	adds	r1, r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800621c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800621e:	f7ff ff65 	bl	80060ec <prvInsertTimerInActiveList>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d04a      	beq.n	80062be <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800622e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d142      	bne.n	80062be <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	441a      	add	r2, r3
 8006240:	2300      	movs	r3, #0
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	2300      	movs	r3, #0
 8006246:	2100      	movs	r1, #0
 8006248:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800624a:	f7ff fe19 	bl	8005e80 <xTimerGenericCommand>
 800624e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d133      	bne.n	80062be <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	61bb      	str	r3, [r7, #24]
}
 8006268:	bf00      	nop
 800626a:	bf00      	nop
 800626c:	e7fd      	b.n	800626a <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006272:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10b      	bne.n	8006294 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	617b      	str	r3, [r7, #20]
}
 800628e:	bf00      	nop
 8006290:	bf00      	nop
 8006292:	e7fd      	b.n	8006290 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006296:	699a      	ldr	r2, [r3, #24]
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	18d1      	adds	r1, r2, r3
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062a2:	f7ff ff23 	bl	80060ec <prvInsertTimerInActiveList>
					break;
 80062a6:	e00d      	b.n	80062c4 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80062a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d107      	bne.n	80062c2 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80062b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062b4:	f000 fb74 	bl	80069a0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062b8:	e003      	b.n	80062c2 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80062ba:	bf00      	nop
 80062bc:	e002      	b.n	80062c4 <prvProcessReceivedCommands+0x154>
					break;
 80062be:	bf00      	nop
 80062c0:	e000      	b.n	80062c4 <prvProcessReceivedCommands+0x154>
					break;
 80062c2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062c4:	4b07      	ldr	r3, [pc, #28]	@ (80062e4 <prvProcessReceivedCommands+0x174>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	1d39      	adds	r1, r7, #4
 80062ca:	2200      	movs	r2, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fe fc09 	bl	8004ae4 <xQueueReceive>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f47f af4f 	bne.w	8006178 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
 80062de:	3730      	adds	r7, #48	@ 0x30
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	200013d8 	.word	0x200013d8

080062e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062ee:	e046      	b.n	800637e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062f0:	4b2c      	ldr	r3, [pc, #176]	@ (80063a4 <prvSwitchTimerLists+0xbc>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062fa:	4b2a      	ldr	r3, [pc, #168]	@ (80063a4 <prvSwitchTimerLists+0xbc>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3304      	adds	r3, #4
 8006308:	4618      	mov	r0, r3
 800630a:	f7fe f919 	bl	8004540 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d12f      	bne.n	800637e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4413      	add	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	429a      	cmp	r2, r3
 800632e:	d90e      	bls.n	800634e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800633c:	4b19      	ldr	r3, [pc, #100]	@ (80063a4 <prvSwitchTimerLists+0xbc>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3304      	adds	r3, #4
 8006344:	4619      	mov	r1, r3
 8006346:	4610      	mov	r0, r2
 8006348:	f7fe f8c2 	bl	80044d0 <vListInsert>
 800634c:	e017      	b.n	800637e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800634e:	2300      	movs	r3, #0
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	2300      	movs	r3, #0
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	2100      	movs	r1, #0
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff fd91 	bl	8005e80 <xTimerGenericCommand>
 800635e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10b      	bne.n	800637e <prvSwitchTimerLists+0x96>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	603b      	str	r3, [r7, #0]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800637e:	4b09      	ldr	r3, [pc, #36]	@ (80063a4 <prvSwitchTimerLists+0xbc>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1b3      	bne.n	80062f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006388:	4b06      	ldr	r3, [pc, #24]	@ (80063a4 <prvSwitchTimerLists+0xbc>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800638e:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <prvSwitchTimerLists+0xc0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a04      	ldr	r2, [pc, #16]	@ (80063a4 <prvSwitchTimerLists+0xbc>)
 8006394:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006396:	4a04      	ldr	r2, [pc, #16]	@ (80063a8 <prvSwitchTimerLists+0xc0>)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	6013      	str	r3, [r2, #0]
}
 800639c:	bf00      	nop
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	200013d0 	.word	0x200013d0
 80063a8:	200013d4 	.word	0x200013d4

080063ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063b2:	f000 f92b 	bl	800660c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063b6:	4b15      	ldr	r3, [pc, #84]	@ (800640c <prvCheckForValidListAndQueue+0x60>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d120      	bne.n	8006400 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063be:	4814      	ldr	r0, [pc, #80]	@ (8006410 <prvCheckForValidListAndQueue+0x64>)
 80063c0:	f7fe f838 	bl	8004434 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063c4:	4813      	ldr	r0, [pc, #76]	@ (8006414 <prvCheckForValidListAndQueue+0x68>)
 80063c6:	f7fe f835 	bl	8004434 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063ca:	4b13      	ldr	r3, [pc, #76]	@ (8006418 <prvCheckForValidListAndQueue+0x6c>)
 80063cc:	4a10      	ldr	r2, [pc, #64]	@ (8006410 <prvCheckForValidListAndQueue+0x64>)
 80063ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063d0:	4b12      	ldr	r3, [pc, #72]	@ (800641c <prvCheckForValidListAndQueue+0x70>)
 80063d2:	4a10      	ldr	r2, [pc, #64]	@ (8006414 <prvCheckForValidListAndQueue+0x68>)
 80063d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063d6:	2300      	movs	r3, #0
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	4b11      	ldr	r3, [pc, #68]	@ (8006420 <prvCheckForValidListAndQueue+0x74>)
 80063dc:	4a11      	ldr	r2, [pc, #68]	@ (8006424 <prvCheckForValidListAndQueue+0x78>)
 80063de:	2110      	movs	r1, #16
 80063e0:	200a      	movs	r0, #10
 80063e2:	f7fe f941 	bl	8004668 <xQueueGenericCreateStatic>
 80063e6:	4603      	mov	r3, r0
 80063e8:	4a08      	ldr	r2, [pc, #32]	@ (800640c <prvCheckForValidListAndQueue+0x60>)
 80063ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063ec:	4b07      	ldr	r3, [pc, #28]	@ (800640c <prvCheckForValidListAndQueue+0x60>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063f4:	4b05      	ldr	r3, [pc, #20]	@ (800640c <prvCheckForValidListAndQueue+0x60>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	490b      	ldr	r1, [pc, #44]	@ (8006428 <prvCheckForValidListAndQueue+0x7c>)
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fd64 	bl	8004ec8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006400:	f000 f934 	bl	800666c <vPortExitCritical>
}
 8006404:	bf00      	nop
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	200013d8 	.word	0x200013d8
 8006410:	200013a8 	.word	0x200013a8
 8006414:	200013bc 	.word	0x200013bc
 8006418:	200013d0 	.word	0x200013d0
 800641c:	200013d4 	.word	0x200013d4
 8006420:	20001484 	.word	0x20001484
 8006424:	200013e4 	.word	0x200013e4
 8006428:	08009890 	.word	0x08009890

0800642c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3b04      	subs	r3, #4
 800643c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3b04      	subs	r3, #4
 800644a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f023 0201 	bic.w	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3b04      	subs	r3, #4
 800645a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800645c:	4a08      	ldr	r2, [pc, #32]	@ (8006480 <pxPortInitialiseStack+0x54>)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3b14      	subs	r3, #20
 8006466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3b20      	subs	r3, #32
 8006472:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006474:	68fb      	ldr	r3, [r7, #12]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr
 8006480:	08006485 	.word	0x08006485

08006484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800648a:	2300      	movs	r3, #0
 800648c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800648e:	4b12      	ldr	r3, [pc, #72]	@ (80064d8 <prvTaskExitError+0x54>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006496:	d00b      	beq.n	80064b0 <prvTaskExitError+0x2c>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	60fb      	str	r3, [r7, #12]
}
 80064aa:	bf00      	nop
 80064ac:	bf00      	nop
 80064ae:	e7fd      	b.n	80064ac <prvTaskExitError+0x28>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	60bb      	str	r3, [r7, #8]
}
 80064c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064c4:	bf00      	nop
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0fc      	beq.n	80064c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr
 80064d8:	2000000c 	.word	0x2000000c
 80064dc:	00000000 	.word	0x00000000

080064e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064e0:	4b07      	ldr	r3, [pc, #28]	@ (8006500 <pxCurrentTCBConst2>)
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	6808      	ldr	r0, [r1, #0]
 80064e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064ea:	f380 8809 	msr	PSP, r0
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f380 8811 	msr	BASEPRI, r0
 80064fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80064fe:	4770      	bx	lr

08006500 <pxCurrentTCBConst2>:
 8006500:	20000ea8 	.word	0x20000ea8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006508:	4806      	ldr	r0, [pc, #24]	@ (8006524 <prvPortStartFirstTask+0x1c>)
 800650a:	6800      	ldr	r0, [r0, #0]
 800650c:	6800      	ldr	r0, [r0, #0]
 800650e:	f380 8808 	msr	MSP, r0
 8006512:	b662      	cpsie	i
 8006514:	b661      	cpsie	f
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	df00      	svc	0
 8006520:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006522:	bf00      	nop
 8006524:	e000ed08 	.word	0xe000ed08

08006528 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800652e:	4b32      	ldr	r3, [pc, #200]	@ (80065f8 <xPortStartScheduler+0xd0>)
 8006530:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	22ff      	movs	r2, #255	@ 0xff
 800653e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006550:	b2da      	uxtb	r2, r3
 8006552:	4b2a      	ldr	r3, [pc, #168]	@ (80065fc <xPortStartScheduler+0xd4>)
 8006554:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006556:	4b2a      	ldr	r3, [pc, #168]	@ (8006600 <xPortStartScheduler+0xd8>)
 8006558:	2207      	movs	r2, #7
 800655a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800655c:	e009      	b.n	8006572 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800655e:	4b28      	ldr	r3, [pc, #160]	@ (8006600 <xPortStartScheduler+0xd8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3b01      	subs	r3, #1
 8006564:	4a26      	ldr	r2, [pc, #152]	@ (8006600 <xPortStartScheduler+0xd8>)
 8006566:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657a:	2b80      	cmp	r3, #128	@ 0x80
 800657c:	d0ef      	beq.n	800655e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800657e:	4b20      	ldr	r3, [pc, #128]	@ (8006600 <xPortStartScheduler+0xd8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f1c3 0307 	rsb	r3, r3, #7
 8006586:	2b04      	cmp	r3, #4
 8006588:	d00b      	beq.n	80065a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	60bb      	str	r3, [r7, #8]
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	e7fd      	b.n	800659e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065a2:	4b17      	ldr	r3, [pc, #92]	@ (8006600 <xPortStartScheduler+0xd8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	4a15      	ldr	r2, [pc, #84]	@ (8006600 <xPortStartScheduler+0xd8>)
 80065aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065ac:	4b14      	ldr	r3, [pc, #80]	@ (8006600 <xPortStartScheduler+0xd8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065b4:	4a12      	ldr	r2, [pc, #72]	@ (8006600 <xPortStartScheduler+0xd8>)
 80065b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065c0:	4b10      	ldr	r3, [pc, #64]	@ (8006604 <xPortStartScheduler+0xdc>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a0f      	ldr	r2, [pc, #60]	@ (8006604 <xPortStartScheduler+0xdc>)
 80065c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006604 <xPortStartScheduler+0xdc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006604 <xPortStartScheduler+0xdc>)
 80065d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80065d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065d8:	f000 f8b8 	bl	800674c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006608 <xPortStartScheduler+0xe0>)
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065e2:	f7ff ff91 	bl	8006508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065e6:	f7ff f89f 	bl	8005728 <vTaskSwitchContext>
	prvTaskExitError();
 80065ea:	f7ff ff4b 	bl	8006484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	e000e400 	.word	0xe000e400
 80065fc:	200014d4 	.word	0x200014d4
 8006600:	200014d8 	.word	0x200014d8
 8006604:	e000ed20 	.word	0xe000ed20
 8006608:	2000000c 	.word	0x2000000c

0800660c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	607b      	str	r3, [r7, #4]
}
 8006624:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006626:	4b0f      	ldr	r3, [pc, #60]	@ (8006664 <vPortEnterCritical+0x58>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3301      	adds	r3, #1
 800662c:	4a0d      	ldr	r2, [pc, #52]	@ (8006664 <vPortEnterCritical+0x58>)
 800662e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006630:	4b0c      	ldr	r3, [pc, #48]	@ (8006664 <vPortEnterCritical+0x58>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d110      	bne.n	800665a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006638:	4b0b      	ldr	r3, [pc, #44]	@ (8006668 <vPortEnterCritical+0x5c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00b      	beq.n	800665a <vPortEnterCritical+0x4e>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	603b      	str	r3, [r7, #0]
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop
 8006658:	e7fd      	b.n	8006656 <vPortEnterCritical+0x4a>
	}
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	bc80      	pop	{r7}
 8006662:	4770      	bx	lr
 8006664:	2000000c 	.word	0x2000000c
 8006668:	e000ed04 	.word	0xe000ed04

0800666c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006672:	4b12      	ldr	r3, [pc, #72]	@ (80066bc <vPortExitCritical+0x50>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10b      	bne.n	8006692 <vPortExitCritical+0x26>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	607b      	str	r3, [r7, #4]
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	e7fd      	b.n	800668e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006692:	4b0a      	ldr	r3, [pc, #40]	@ (80066bc <vPortExitCritical+0x50>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3b01      	subs	r3, #1
 8006698:	4a08      	ldr	r2, [pc, #32]	@ (80066bc <vPortExitCritical+0x50>)
 800669a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800669c:	4b07      	ldr	r3, [pc, #28]	@ (80066bc <vPortExitCritical+0x50>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d105      	bne.n	80066b0 <vPortExitCritical+0x44>
 80066a4:	2300      	movs	r3, #0
 80066a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f383 8811 	msr	BASEPRI, r3
}
 80066ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	2000000c 	.word	0x2000000c

080066c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066c0:	f3ef 8009 	mrs	r0, PSP
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006700 <pxCurrentTCBConst>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066d0:	6010      	str	r0, [r2, #0]
 80066d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80066d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80066da:	f380 8811 	msr	BASEPRI, r0
 80066de:	f7ff f823 	bl	8005728 <vTaskSwitchContext>
 80066e2:	f04f 0000 	mov.w	r0, #0
 80066e6:	f380 8811 	msr	BASEPRI, r0
 80066ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066ee:	6819      	ldr	r1, [r3, #0]
 80066f0:	6808      	ldr	r0, [r1, #0]
 80066f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066f6:	f380 8809 	msr	PSP, r0
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	4770      	bx	lr

08006700 <pxCurrentTCBConst>:
 8006700:	20000ea8 	.word	0x20000ea8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop

08006708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	607b      	str	r3, [r7, #4]
}
 8006720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006722:	f7fe ff41 	bl	80055a8 <xTaskIncrementTick>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800672c:	4b06      	ldr	r3, [pc, #24]	@ (8006748 <xPortSysTickHandler+0x40>)
 800672e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	2300      	movs	r3, #0
 8006736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f383 8811 	msr	BASEPRI, r3
}
 800673e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006750:	4b0a      	ldr	r3, [pc, #40]	@ (800677c <vPortSetupTimerInterrupt+0x30>)
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006756:	4b0a      	ldr	r3, [pc, #40]	@ (8006780 <vPortSetupTimerInterrupt+0x34>)
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800675c:	4b09      	ldr	r3, [pc, #36]	@ (8006784 <vPortSetupTimerInterrupt+0x38>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a09      	ldr	r2, [pc, #36]	@ (8006788 <vPortSetupTimerInterrupt+0x3c>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	099b      	lsrs	r3, r3, #6
 8006768:	4a08      	ldr	r2, [pc, #32]	@ (800678c <vPortSetupTimerInterrupt+0x40>)
 800676a:	3b01      	subs	r3, #1
 800676c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800676e:	4b03      	ldr	r3, [pc, #12]	@ (800677c <vPortSetupTimerInterrupt+0x30>)
 8006770:	2207      	movs	r2, #7
 8006772:	601a      	str	r2, [r3, #0]
}
 8006774:	bf00      	nop
 8006776:	46bd      	mov	sp, r7
 8006778:	bc80      	pop	{r7}
 800677a:	4770      	bx	lr
 800677c:	e000e010 	.word	0xe000e010
 8006780:	e000e018 	.word	0xe000e018
 8006784:	20000000 	.word	0x20000000
 8006788:	10624dd3 	.word	0x10624dd3
 800678c:	e000e014 	.word	0xe000e014

08006790 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006796:	f3ef 8305 	mrs	r3, IPSR
 800679a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b0f      	cmp	r3, #15
 80067a0:	d915      	bls.n	80067ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067a2:	4a17      	ldr	r2, [pc, #92]	@ (8006800 <vPortValidateInterruptPriority+0x70>)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067ac:	4b15      	ldr	r3, [pc, #84]	@ (8006804 <vPortValidateInterruptPriority+0x74>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	7afa      	ldrb	r2, [r7, #11]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d20b      	bcs.n	80067ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	607b      	str	r3, [r7, #4]
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	e7fd      	b.n	80067ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006808 <vPortValidateInterruptPriority+0x78>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80067d6:	4b0d      	ldr	r3, [pc, #52]	@ (800680c <vPortValidateInterruptPriority+0x7c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d90b      	bls.n	80067f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	603b      	str	r3, [r7, #0]
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop
 80067f4:	e7fd      	b.n	80067f2 <vPortValidateInterruptPriority+0x62>
	}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr
 8006800:	e000e3f0 	.word	0xe000e3f0
 8006804:	200014d4 	.word	0x200014d4
 8006808:	e000ed0c 	.word	0xe000ed0c
 800680c:	200014d8 	.word	0x200014d8

08006810 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08a      	sub	sp, #40	@ 0x28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006818:	2300      	movs	r3, #0
 800681a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800681c:	f7fe fe0a 	bl	8005434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006820:	4b5a      	ldr	r3, [pc, #360]	@ (800698c <pvPortMalloc+0x17c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006828:	f000 f916 	bl	8006a58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800682c:	4b58      	ldr	r3, [pc, #352]	@ (8006990 <pvPortMalloc+0x180>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4013      	ands	r3, r2
 8006834:	2b00      	cmp	r3, #0
 8006836:	f040 8090 	bne.w	800695a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d01e      	beq.n	800687e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006840:	2208      	movs	r2, #8
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4413      	add	r3, r2
 8006846:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	2b00      	cmp	r3, #0
 8006850:	d015      	beq.n	800687e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f023 0307 	bic.w	r3, r3, #7
 8006858:	3308      	adds	r3, #8
 800685a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00b      	beq.n	800687e <pvPortMalloc+0x6e>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	617b      	str	r3, [r7, #20]
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	e7fd      	b.n	800687a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d06a      	beq.n	800695a <pvPortMalloc+0x14a>
 8006884:	4b43      	ldr	r3, [pc, #268]	@ (8006994 <pvPortMalloc+0x184>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	429a      	cmp	r2, r3
 800688c:	d865      	bhi.n	800695a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800688e:	4b42      	ldr	r3, [pc, #264]	@ (8006998 <pvPortMalloc+0x188>)
 8006890:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006892:	4b41      	ldr	r3, [pc, #260]	@ (8006998 <pvPortMalloc+0x188>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006898:	e004      	b.n	80068a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d903      	bls.n	80068b6 <pvPortMalloc+0xa6>
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f1      	bne.n	800689a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068b6:	4b35      	ldr	r3, [pc, #212]	@ (800698c <pvPortMalloc+0x17c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068bc:	429a      	cmp	r2, r3
 80068be:	d04c      	beq.n	800695a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2208      	movs	r2, #8
 80068c6:	4413      	add	r3, r2
 80068c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	1ad2      	subs	r2, r2, r3
 80068da:	2308      	movs	r3, #8
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	429a      	cmp	r2, r3
 80068e0:	d920      	bls.n	8006924 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4413      	add	r3, r2
 80068e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <pvPortMalloc+0xfc>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	613b      	str	r3, [r7, #16]
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	e7fd      	b.n	8006908 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800691e:	69b8      	ldr	r0, [r7, #24]
 8006920:	f000 f8fc 	bl	8006b1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006924:	4b1b      	ldr	r3, [pc, #108]	@ (8006994 <pvPortMalloc+0x184>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	4a19      	ldr	r2, [pc, #100]	@ (8006994 <pvPortMalloc+0x184>)
 8006930:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006932:	4b18      	ldr	r3, [pc, #96]	@ (8006994 <pvPortMalloc+0x184>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	4b19      	ldr	r3, [pc, #100]	@ (800699c <pvPortMalloc+0x18c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d203      	bcs.n	8006946 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800693e:	4b15      	ldr	r3, [pc, #84]	@ (8006994 <pvPortMalloc+0x184>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a16      	ldr	r2, [pc, #88]	@ (800699c <pvPortMalloc+0x18c>)
 8006944:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	4b11      	ldr	r3, [pc, #68]	@ (8006990 <pvPortMalloc+0x180>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	431a      	orrs	r2, r3
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800695a:	f7fe fd79 	bl	8005450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <pvPortMalloc+0x170>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	60fb      	str	r3, [r7, #12]
}
 800697a:	bf00      	nop
 800697c:	bf00      	nop
 800697e:	e7fd      	b.n	800697c <pvPortMalloc+0x16c>
	return pvReturn;
 8006980:	69fb      	ldr	r3, [r7, #28]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3728      	adds	r7, #40	@ 0x28
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	200020e4 	.word	0x200020e4
 8006990:	200020f0 	.word	0x200020f0
 8006994:	200020e8 	.word	0x200020e8
 8006998:	200020dc 	.word	0x200020dc
 800699c:	200020ec 	.word	0x200020ec

080069a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d04a      	beq.n	8006a48 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069b2:	2308      	movs	r3, #8
 80069b4:	425b      	negs	r3, r3
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	4b22      	ldr	r3, [pc, #136]	@ (8006a50 <vPortFree+0xb0>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4013      	ands	r3, r2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10b      	bne.n	80069e6 <vPortFree+0x46>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	60fb      	str	r3, [r7, #12]
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	e7fd      	b.n	80069e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00b      	beq.n	8006a06 <vPortFree+0x66>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	60bb      	str	r3, [r7, #8]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	4b11      	ldr	r3, [pc, #68]	@ (8006a50 <vPortFree+0xb0>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d019      	beq.n	8006a48 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d115      	bne.n	8006a48 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	4b0b      	ldr	r3, [pc, #44]	@ (8006a50 <vPortFree+0xb0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	43db      	mvns	r3, r3
 8006a26:	401a      	ands	r2, r3
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a2c:	f7fe fd02 	bl	8005434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	4b07      	ldr	r3, [pc, #28]	@ (8006a54 <vPortFree+0xb4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4413      	add	r3, r2
 8006a3a:	4a06      	ldr	r2, [pc, #24]	@ (8006a54 <vPortFree+0xb4>)
 8006a3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a3e:	6938      	ldr	r0, [r7, #16]
 8006a40:	f000 f86c 	bl	8006b1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a44:	f7fe fd04 	bl	8005450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a48:	bf00      	nop
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	200020f0 	.word	0x200020f0
 8006a54:	200020e8 	.word	0x200020e8

08006a58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a5e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006a62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a64:	4b27      	ldr	r3, [pc, #156]	@ (8006b04 <prvHeapInit+0xac>)
 8006a66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00c      	beq.n	8006a8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3307      	adds	r3, #7
 8006a76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0307 	bic.w	r3, r3, #7
 8006a7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	4a1f      	ldr	r2, [pc, #124]	@ (8006b04 <prvHeapInit+0xac>)
 8006a88:	4413      	add	r3, r2
 8006a8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a90:	4a1d      	ldr	r2, [pc, #116]	@ (8006b08 <prvHeapInit+0xb0>)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a96:	4b1c      	ldr	r3, [pc, #112]	@ (8006b08 <prvHeapInit+0xb0>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	1a9b      	subs	r3, r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0307 	bic.w	r3, r3, #7
 8006ab2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4a15      	ldr	r2, [pc, #84]	@ (8006b0c <prvHeapInit+0xb4>)
 8006ab8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006aba:	4b14      	ldr	r3, [pc, #80]	@ (8006b0c <prvHeapInit+0xb4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ac2:	4b12      	ldr	r3, [pc, #72]	@ (8006b0c <prvHeapInit+0xb4>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	1ad2      	subs	r2, r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8006b0c <prvHeapInit+0xb4>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8006b10 <prvHeapInit+0xb8>)
 8006ae6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	4a09      	ldr	r2, [pc, #36]	@ (8006b14 <prvHeapInit+0xbc>)
 8006aee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006af0:	4b09      	ldr	r3, [pc, #36]	@ (8006b18 <prvHeapInit+0xc0>)
 8006af2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006af6:	601a      	str	r2, [r3, #0]
}
 8006af8:	bf00      	nop
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	200014dc 	.word	0x200014dc
 8006b08:	200020dc 	.word	0x200020dc
 8006b0c:	200020e4 	.word	0x200020e4
 8006b10:	200020ec 	.word	0x200020ec
 8006b14:	200020e8 	.word	0x200020e8
 8006b18:	200020f0 	.word	0x200020f0

08006b1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b24:	4b27      	ldr	r3, [pc, #156]	@ (8006bc4 <prvInsertBlockIntoFreeList+0xa8>)
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	e002      	b.n	8006b30 <prvInsertBlockIntoFreeList+0x14>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d8f7      	bhi.n	8006b2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	4413      	add	r3, r2
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d108      	bne.n	8006b5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	441a      	add	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	441a      	add	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d118      	bne.n	8006ba4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	4b14      	ldr	r3, [pc, #80]	@ (8006bc8 <prvInsertBlockIntoFreeList+0xac>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d00d      	beq.n	8006b9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	441a      	add	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	e008      	b.n	8006bac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc8 <prvInsertBlockIntoFreeList+0xac>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e003      	b.n	8006bac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d002      	beq.n	8006bba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bc80      	pop	{r7}
 8006bc2:	4770      	bx	lr
 8006bc4:	200020dc 	.word	0x200020dc
 8006bc8:	200020e4 	.word	0x200020e4

08006bcc <__cvt>:
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd2:	461d      	mov	r5, r3
 8006bd4:	bfbb      	ittet	lt
 8006bd6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006bda:	461d      	movlt	r5, r3
 8006bdc:	2300      	movge	r3, #0
 8006bde:	232d      	movlt	r3, #45	@ 0x2d
 8006be0:	b088      	sub	sp, #32
 8006be2:	4614      	mov	r4, r2
 8006be4:	bfb8      	it	lt
 8006be6:	4614      	movlt	r4, r2
 8006be8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006bea:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006bec:	7013      	strb	r3, [r2, #0]
 8006bee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006bf0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006bf4:	f023 0820 	bic.w	r8, r3, #32
 8006bf8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006bfc:	d005      	beq.n	8006c0a <__cvt+0x3e>
 8006bfe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006c02:	d100      	bne.n	8006c06 <__cvt+0x3a>
 8006c04:	3601      	adds	r6, #1
 8006c06:	2302      	movs	r3, #2
 8006c08:	e000      	b.n	8006c0c <__cvt+0x40>
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	aa07      	add	r2, sp, #28
 8006c0e:	9204      	str	r2, [sp, #16]
 8006c10:	aa06      	add	r2, sp, #24
 8006c12:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006c16:	e9cd 3600 	strd	r3, r6, [sp]
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	f000 fe9f 	bl	8007960 <_dtoa_r>
 8006c22:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006c26:	4607      	mov	r7, r0
 8006c28:	d119      	bne.n	8006c5e <__cvt+0x92>
 8006c2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c2c:	07db      	lsls	r3, r3, #31
 8006c2e:	d50e      	bpl.n	8006c4e <__cvt+0x82>
 8006c30:	eb00 0906 	add.w	r9, r0, r6
 8006c34:	2200      	movs	r2, #0
 8006c36:	2300      	movs	r3, #0
 8006c38:	4620      	mov	r0, r4
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	f7f9 feb4 	bl	80009a8 <__aeabi_dcmpeq>
 8006c40:	b108      	cbz	r0, 8006c46 <__cvt+0x7a>
 8006c42:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c46:	2230      	movs	r2, #48	@ 0x30
 8006c48:	9b07      	ldr	r3, [sp, #28]
 8006c4a:	454b      	cmp	r3, r9
 8006c4c:	d31e      	bcc.n	8006c8c <__cvt+0xc0>
 8006c4e:	4638      	mov	r0, r7
 8006c50:	9b07      	ldr	r3, [sp, #28]
 8006c52:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006c54:	1bdb      	subs	r3, r3, r7
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	b008      	add	sp, #32
 8006c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c62:	eb00 0906 	add.w	r9, r0, r6
 8006c66:	d1e5      	bne.n	8006c34 <__cvt+0x68>
 8006c68:	7803      	ldrb	r3, [r0, #0]
 8006c6a:	2b30      	cmp	r3, #48	@ 0x30
 8006c6c:	d10a      	bne.n	8006c84 <__cvt+0xb8>
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2300      	movs	r3, #0
 8006c72:	4620      	mov	r0, r4
 8006c74:	4629      	mov	r1, r5
 8006c76:	f7f9 fe97 	bl	80009a8 <__aeabi_dcmpeq>
 8006c7a:	b918      	cbnz	r0, 8006c84 <__cvt+0xb8>
 8006c7c:	f1c6 0601 	rsb	r6, r6, #1
 8006c80:	f8ca 6000 	str.w	r6, [sl]
 8006c84:	f8da 3000 	ldr.w	r3, [sl]
 8006c88:	4499      	add	r9, r3
 8006c8a:	e7d3      	b.n	8006c34 <__cvt+0x68>
 8006c8c:	1c59      	adds	r1, r3, #1
 8006c8e:	9107      	str	r1, [sp, #28]
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	e7d9      	b.n	8006c48 <__cvt+0x7c>

08006c94 <__exponent>:
 8006c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c96:	2900      	cmp	r1, #0
 8006c98:	bfb6      	itet	lt
 8006c9a:	232d      	movlt	r3, #45	@ 0x2d
 8006c9c:	232b      	movge	r3, #43	@ 0x2b
 8006c9e:	4249      	neglt	r1, r1
 8006ca0:	2909      	cmp	r1, #9
 8006ca2:	7002      	strb	r2, [r0, #0]
 8006ca4:	7043      	strb	r3, [r0, #1]
 8006ca6:	dd29      	ble.n	8006cfc <__exponent+0x68>
 8006ca8:	f10d 0307 	add.w	r3, sp, #7
 8006cac:	461d      	mov	r5, r3
 8006cae:	270a      	movs	r7, #10
 8006cb0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	fb07 1416 	mls	r4, r7, r6, r1
 8006cba:	3430      	adds	r4, #48	@ 0x30
 8006cbc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	2c63      	cmp	r4, #99	@ 0x63
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006cca:	dcf1      	bgt.n	8006cb0 <__exponent+0x1c>
 8006ccc:	3130      	adds	r1, #48	@ 0x30
 8006cce:	1e94      	subs	r4, r2, #2
 8006cd0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006cd4:	4623      	mov	r3, r4
 8006cd6:	1c41      	adds	r1, r0, #1
 8006cd8:	42ab      	cmp	r3, r5
 8006cda:	d30a      	bcc.n	8006cf2 <__exponent+0x5e>
 8006cdc:	f10d 0309 	add.w	r3, sp, #9
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	42ac      	cmp	r4, r5
 8006ce4:	bf88      	it	hi
 8006ce6:	2300      	movhi	r3, #0
 8006ce8:	3302      	adds	r3, #2
 8006cea:	4403      	add	r3, r0
 8006cec:	1a18      	subs	r0, r3, r0
 8006cee:	b003      	add	sp, #12
 8006cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006cf6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006cfa:	e7ed      	b.n	8006cd8 <__exponent+0x44>
 8006cfc:	2330      	movs	r3, #48	@ 0x30
 8006cfe:	3130      	adds	r1, #48	@ 0x30
 8006d00:	7083      	strb	r3, [r0, #2]
 8006d02:	70c1      	strb	r1, [r0, #3]
 8006d04:	1d03      	adds	r3, r0, #4
 8006d06:	e7f1      	b.n	8006cec <__exponent+0x58>

08006d08 <_printf_float>:
 8006d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0c:	b091      	sub	sp, #68	@ 0x44
 8006d0e:	460c      	mov	r4, r1
 8006d10:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006d14:	4616      	mov	r6, r2
 8006d16:	461f      	mov	r7, r3
 8006d18:	4605      	mov	r5, r0
 8006d1a:	f000 fcf5 	bl	8007708 <_localeconv_r>
 8006d1e:	6803      	ldr	r3, [r0, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	9308      	str	r3, [sp, #32]
 8006d24:	f7f9 fa14 	bl	8000150 <strlen>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d30:	9009      	str	r0, [sp, #36]	@ 0x24
 8006d32:	3307      	adds	r3, #7
 8006d34:	f023 0307 	bic.w	r3, r3, #7
 8006d38:	f103 0208 	add.w	r2, r3, #8
 8006d3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d40:	f8d4 b000 	ldr.w	fp, [r4]
 8006d44:	f8c8 2000 	str.w	r2, [r8]
 8006d48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d52:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006d56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006d62:	4b9c      	ldr	r3, [pc, #624]	@ (8006fd4 <_printf_float+0x2cc>)
 8006d64:	f7f9 fe52 	bl	8000a0c <__aeabi_dcmpun>
 8006d68:	bb70      	cbnz	r0, 8006dc8 <_printf_float+0xc0>
 8006d6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d72:	4b98      	ldr	r3, [pc, #608]	@ (8006fd4 <_printf_float+0x2cc>)
 8006d74:	f7f9 fe2c 	bl	80009d0 <__aeabi_dcmple>
 8006d78:	bb30      	cbnz	r0, 8006dc8 <_printf_float+0xc0>
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 fe1b 	bl	80009bc <__aeabi_dcmplt>
 8006d86:	b110      	cbz	r0, 8006d8e <_printf_float+0x86>
 8006d88:	232d      	movs	r3, #45	@ 0x2d
 8006d8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d8e:	4a92      	ldr	r2, [pc, #584]	@ (8006fd8 <_printf_float+0x2d0>)
 8006d90:	4b92      	ldr	r3, [pc, #584]	@ (8006fdc <_printf_float+0x2d4>)
 8006d92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d96:	bf94      	ite	ls
 8006d98:	4690      	movls	r8, r2
 8006d9a:	4698      	movhi	r8, r3
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	f04f 0900 	mov.w	r9, #0
 8006da2:	6123      	str	r3, [r4, #16]
 8006da4:	f02b 0304 	bic.w	r3, fp, #4
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	4633      	mov	r3, r6
 8006dac:	4621      	mov	r1, r4
 8006dae:	4628      	mov	r0, r5
 8006db0:	9700      	str	r7, [sp, #0]
 8006db2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006db4:	f000 f9d4 	bl	8007160 <_printf_common>
 8006db8:	3001      	adds	r0, #1
 8006dba:	f040 8090 	bne.w	8006ede <_printf_float+0x1d6>
 8006dbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006dc2:	b011      	add	sp, #68	@ 0x44
 8006dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc8:	4642      	mov	r2, r8
 8006dca:	464b      	mov	r3, r9
 8006dcc:	4640      	mov	r0, r8
 8006dce:	4649      	mov	r1, r9
 8006dd0:	f7f9 fe1c 	bl	8000a0c <__aeabi_dcmpun>
 8006dd4:	b148      	cbz	r0, 8006dea <_printf_float+0xe2>
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	bfb8      	it	lt
 8006ddc:	232d      	movlt	r3, #45	@ 0x2d
 8006dde:	4a80      	ldr	r2, [pc, #512]	@ (8006fe0 <_printf_float+0x2d8>)
 8006de0:	bfb8      	it	lt
 8006de2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006de6:	4b7f      	ldr	r3, [pc, #508]	@ (8006fe4 <_printf_float+0x2dc>)
 8006de8:	e7d3      	b.n	8006d92 <_printf_float+0x8a>
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	d13f      	bne.n	8006e74 <_printf_float+0x16c>
 8006df4:	2306      	movs	r3, #6
 8006df6:	6063      	str	r3, [r4, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	9206      	str	r2, [sp, #24]
 8006e02:	aa0e      	add	r2, sp, #56	@ 0x38
 8006e04:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006e08:	aa0d      	add	r2, sp, #52	@ 0x34
 8006e0a:	9203      	str	r2, [sp, #12]
 8006e0c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006e10:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006e14:	6863      	ldr	r3, [r4, #4]
 8006e16:	4642      	mov	r2, r8
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	464b      	mov	r3, r9
 8006e1e:	910a      	str	r1, [sp, #40]	@ 0x28
 8006e20:	f7ff fed4 	bl	8006bcc <__cvt>
 8006e24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e26:	4680      	mov	r8, r0
 8006e28:	2947      	cmp	r1, #71	@ 0x47
 8006e2a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006e2c:	d128      	bne.n	8006e80 <_printf_float+0x178>
 8006e2e:	1cc8      	adds	r0, r1, #3
 8006e30:	db02      	blt.n	8006e38 <_printf_float+0x130>
 8006e32:	6863      	ldr	r3, [r4, #4]
 8006e34:	4299      	cmp	r1, r3
 8006e36:	dd40      	ble.n	8006eba <_printf_float+0x1b2>
 8006e38:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e3c:	fa5f fa8a 	uxtb.w	sl, sl
 8006e40:	4652      	mov	r2, sl
 8006e42:	3901      	subs	r1, #1
 8006e44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e48:	910d      	str	r1, [sp, #52]	@ 0x34
 8006e4a:	f7ff ff23 	bl	8006c94 <__exponent>
 8006e4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e50:	4681      	mov	r9, r0
 8006e52:	1813      	adds	r3, r2, r0
 8006e54:	2a01      	cmp	r2, #1
 8006e56:	6123      	str	r3, [r4, #16]
 8006e58:	dc02      	bgt.n	8006e60 <_printf_float+0x158>
 8006e5a:	6822      	ldr	r2, [r4, #0]
 8006e5c:	07d2      	lsls	r2, r2, #31
 8006e5e:	d501      	bpl.n	8006e64 <_printf_float+0x15c>
 8006e60:	3301      	adds	r3, #1
 8006e62:	6123      	str	r3, [r4, #16]
 8006e64:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d09e      	beq.n	8006daa <_printf_float+0xa2>
 8006e6c:	232d      	movs	r3, #45	@ 0x2d
 8006e6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e72:	e79a      	b.n	8006daa <_printf_float+0xa2>
 8006e74:	2947      	cmp	r1, #71	@ 0x47
 8006e76:	d1bf      	bne.n	8006df8 <_printf_float+0xf0>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1bd      	bne.n	8006df8 <_printf_float+0xf0>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e7ba      	b.n	8006df6 <_printf_float+0xee>
 8006e80:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e84:	d9dc      	bls.n	8006e40 <_printf_float+0x138>
 8006e86:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006e8a:	d118      	bne.n	8006ebe <_printf_float+0x1b6>
 8006e8c:	2900      	cmp	r1, #0
 8006e8e:	6863      	ldr	r3, [r4, #4]
 8006e90:	dd0b      	ble.n	8006eaa <_printf_float+0x1a2>
 8006e92:	6121      	str	r1, [r4, #16]
 8006e94:	b913      	cbnz	r3, 8006e9c <_printf_float+0x194>
 8006e96:	6822      	ldr	r2, [r4, #0]
 8006e98:	07d0      	lsls	r0, r2, #31
 8006e9a:	d502      	bpl.n	8006ea2 <_printf_float+0x19a>
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	440b      	add	r3, r1
 8006ea0:	6123      	str	r3, [r4, #16]
 8006ea2:	f04f 0900 	mov.w	r9, #0
 8006ea6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ea8:	e7dc      	b.n	8006e64 <_printf_float+0x15c>
 8006eaa:	b913      	cbnz	r3, 8006eb2 <_printf_float+0x1aa>
 8006eac:	6822      	ldr	r2, [r4, #0]
 8006eae:	07d2      	lsls	r2, r2, #31
 8006eb0:	d501      	bpl.n	8006eb6 <_printf_float+0x1ae>
 8006eb2:	3302      	adds	r3, #2
 8006eb4:	e7f4      	b.n	8006ea0 <_printf_float+0x198>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e7f2      	b.n	8006ea0 <_printf_float+0x198>
 8006eba:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ec0:	4299      	cmp	r1, r3
 8006ec2:	db05      	blt.n	8006ed0 <_printf_float+0x1c8>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	6121      	str	r1, [r4, #16]
 8006ec8:	07d8      	lsls	r0, r3, #31
 8006eca:	d5ea      	bpl.n	8006ea2 <_printf_float+0x19a>
 8006ecc:	1c4b      	adds	r3, r1, #1
 8006ece:	e7e7      	b.n	8006ea0 <_printf_float+0x198>
 8006ed0:	2900      	cmp	r1, #0
 8006ed2:	bfcc      	ite	gt
 8006ed4:	2201      	movgt	r2, #1
 8006ed6:	f1c1 0202 	rsble	r2, r1, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	e7e0      	b.n	8006ea0 <_printf_float+0x198>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	055a      	lsls	r2, r3, #21
 8006ee2:	d407      	bmi.n	8006ef4 <_printf_float+0x1ec>
 8006ee4:	6923      	ldr	r3, [r4, #16]
 8006ee6:	4642      	mov	r2, r8
 8006ee8:	4631      	mov	r1, r6
 8006eea:	4628      	mov	r0, r5
 8006eec:	47b8      	blx	r7
 8006eee:	3001      	adds	r0, #1
 8006ef0:	d12b      	bne.n	8006f4a <_printf_float+0x242>
 8006ef2:	e764      	b.n	8006dbe <_printf_float+0xb6>
 8006ef4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ef8:	f240 80dc 	bls.w	80070b4 <_printf_float+0x3ac>
 8006efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f00:	2200      	movs	r2, #0
 8006f02:	2300      	movs	r3, #0
 8006f04:	f7f9 fd50 	bl	80009a8 <__aeabi_dcmpeq>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d033      	beq.n	8006f74 <_printf_float+0x26c>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	4a35      	ldr	r2, [pc, #212]	@ (8006fe8 <_printf_float+0x2e0>)
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	f43f af51 	beq.w	8006dbe <_printf_float+0xb6>
 8006f1c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006f20:	4543      	cmp	r3, r8
 8006f22:	db02      	blt.n	8006f2a <_printf_float+0x222>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	07d8      	lsls	r0, r3, #31
 8006f28:	d50f      	bpl.n	8006f4a <_printf_float+0x242>
 8006f2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	f43f af42 	beq.w	8006dbe <_printf_float+0xb6>
 8006f3a:	f04f 0900 	mov.w	r9, #0
 8006f3e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006f42:	f104 0a1a 	add.w	sl, r4, #26
 8006f46:	45c8      	cmp	r8, r9
 8006f48:	dc09      	bgt.n	8006f5e <_printf_float+0x256>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	079b      	lsls	r3, r3, #30
 8006f4e:	f100 8102 	bmi.w	8007156 <_printf_float+0x44e>
 8006f52:	68e0      	ldr	r0, [r4, #12]
 8006f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f56:	4298      	cmp	r0, r3
 8006f58:	bfb8      	it	lt
 8006f5a:	4618      	movlt	r0, r3
 8006f5c:	e731      	b.n	8006dc2 <_printf_float+0xba>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4652      	mov	r2, sl
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	47b8      	blx	r7
 8006f68:	3001      	adds	r0, #1
 8006f6a:	f43f af28 	beq.w	8006dbe <_printf_float+0xb6>
 8006f6e:	f109 0901 	add.w	r9, r9, #1
 8006f72:	e7e8      	b.n	8006f46 <_printf_float+0x23e>
 8006f74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	dc38      	bgt.n	8006fec <_printf_float+0x2e4>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	4628      	mov	r0, r5
 8006f80:	4a19      	ldr	r2, [pc, #100]	@ (8006fe8 <_printf_float+0x2e0>)
 8006f82:	47b8      	blx	r7
 8006f84:	3001      	adds	r0, #1
 8006f86:	f43f af1a 	beq.w	8006dbe <_printf_float+0xb6>
 8006f8a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006f8e:	ea59 0303 	orrs.w	r3, r9, r3
 8006f92:	d102      	bne.n	8006f9a <_printf_float+0x292>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	07d9      	lsls	r1, r3, #31
 8006f98:	d5d7      	bpl.n	8006f4a <_printf_float+0x242>
 8006f9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	f43f af0a 	beq.w	8006dbe <_printf_float+0xb6>
 8006faa:	f04f 0a00 	mov.w	sl, #0
 8006fae:	f104 0b1a 	add.w	fp, r4, #26
 8006fb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fb4:	425b      	negs	r3, r3
 8006fb6:	4553      	cmp	r3, sl
 8006fb8:	dc01      	bgt.n	8006fbe <_printf_float+0x2b6>
 8006fba:	464b      	mov	r3, r9
 8006fbc:	e793      	b.n	8006ee6 <_printf_float+0x1de>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	465a      	mov	r2, fp
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	47b8      	blx	r7
 8006fc8:	3001      	adds	r0, #1
 8006fca:	f43f aef8 	beq.w	8006dbe <_printf_float+0xb6>
 8006fce:	f10a 0a01 	add.w	sl, sl, #1
 8006fd2:	e7ee      	b.n	8006fb2 <_printf_float+0x2aa>
 8006fd4:	7fefffff 	.word	0x7fefffff
 8006fd8:	0800991e 	.word	0x0800991e
 8006fdc:	08009922 	.word	0x08009922
 8006fe0:	08009926 	.word	0x08009926
 8006fe4:	0800992a 	.word	0x0800992a
 8006fe8:	0800992e 	.word	0x0800992e
 8006fec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fee:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006ff2:	4553      	cmp	r3, sl
 8006ff4:	bfa8      	it	ge
 8006ff6:	4653      	movge	r3, sl
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	4699      	mov	r9, r3
 8006ffc:	dc36      	bgt.n	800706c <_printf_float+0x364>
 8006ffe:	f04f 0b00 	mov.w	fp, #0
 8007002:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007006:	f104 021a 	add.w	r2, r4, #26
 800700a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800700c:	930a      	str	r3, [sp, #40]	@ 0x28
 800700e:	eba3 0309 	sub.w	r3, r3, r9
 8007012:	455b      	cmp	r3, fp
 8007014:	dc31      	bgt.n	800707a <_printf_float+0x372>
 8007016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007018:	459a      	cmp	sl, r3
 800701a:	dc3a      	bgt.n	8007092 <_printf_float+0x38a>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	07da      	lsls	r2, r3, #31
 8007020:	d437      	bmi.n	8007092 <_printf_float+0x38a>
 8007022:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007024:	ebaa 0903 	sub.w	r9, sl, r3
 8007028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800702a:	ebaa 0303 	sub.w	r3, sl, r3
 800702e:	4599      	cmp	r9, r3
 8007030:	bfa8      	it	ge
 8007032:	4699      	movge	r9, r3
 8007034:	f1b9 0f00 	cmp.w	r9, #0
 8007038:	dc33      	bgt.n	80070a2 <_printf_float+0x39a>
 800703a:	f04f 0800 	mov.w	r8, #0
 800703e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007042:	f104 0b1a 	add.w	fp, r4, #26
 8007046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007048:	ebaa 0303 	sub.w	r3, sl, r3
 800704c:	eba3 0309 	sub.w	r3, r3, r9
 8007050:	4543      	cmp	r3, r8
 8007052:	f77f af7a 	ble.w	8006f4a <_printf_float+0x242>
 8007056:	2301      	movs	r3, #1
 8007058:	465a      	mov	r2, fp
 800705a:	4631      	mov	r1, r6
 800705c:	4628      	mov	r0, r5
 800705e:	47b8      	blx	r7
 8007060:	3001      	adds	r0, #1
 8007062:	f43f aeac 	beq.w	8006dbe <_printf_float+0xb6>
 8007066:	f108 0801 	add.w	r8, r8, #1
 800706a:	e7ec      	b.n	8007046 <_printf_float+0x33e>
 800706c:	4642      	mov	r2, r8
 800706e:	4631      	mov	r1, r6
 8007070:	4628      	mov	r0, r5
 8007072:	47b8      	blx	r7
 8007074:	3001      	adds	r0, #1
 8007076:	d1c2      	bne.n	8006ffe <_printf_float+0x2f6>
 8007078:	e6a1      	b.n	8006dbe <_printf_float+0xb6>
 800707a:	2301      	movs	r3, #1
 800707c:	4631      	mov	r1, r6
 800707e:	4628      	mov	r0, r5
 8007080:	920a      	str	r2, [sp, #40]	@ 0x28
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	f43f ae9a 	beq.w	8006dbe <_printf_float+0xb6>
 800708a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800708c:	f10b 0b01 	add.w	fp, fp, #1
 8007090:	e7bb      	b.n	800700a <_printf_float+0x302>
 8007092:	4631      	mov	r1, r6
 8007094:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007098:	4628      	mov	r0, r5
 800709a:	47b8      	blx	r7
 800709c:	3001      	adds	r0, #1
 800709e:	d1c0      	bne.n	8007022 <_printf_float+0x31a>
 80070a0:	e68d      	b.n	8006dbe <_printf_float+0xb6>
 80070a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070a4:	464b      	mov	r3, r9
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	4442      	add	r2, r8
 80070ac:	47b8      	blx	r7
 80070ae:	3001      	adds	r0, #1
 80070b0:	d1c3      	bne.n	800703a <_printf_float+0x332>
 80070b2:	e684      	b.n	8006dbe <_printf_float+0xb6>
 80070b4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80070b8:	f1ba 0f01 	cmp.w	sl, #1
 80070bc:	dc01      	bgt.n	80070c2 <_printf_float+0x3ba>
 80070be:	07db      	lsls	r3, r3, #31
 80070c0:	d536      	bpl.n	8007130 <_printf_float+0x428>
 80070c2:	2301      	movs	r3, #1
 80070c4:	4642      	mov	r2, r8
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b8      	blx	r7
 80070cc:	3001      	adds	r0, #1
 80070ce:	f43f ae76 	beq.w	8006dbe <_printf_float+0xb6>
 80070d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80070d6:	4631      	mov	r1, r6
 80070d8:	4628      	mov	r0, r5
 80070da:	47b8      	blx	r7
 80070dc:	3001      	adds	r0, #1
 80070de:	f43f ae6e 	beq.w	8006dbe <_printf_float+0xb6>
 80070e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070e6:	2200      	movs	r2, #0
 80070e8:	2300      	movs	r3, #0
 80070ea:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80070ee:	f7f9 fc5b 	bl	80009a8 <__aeabi_dcmpeq>
 80070f2:	b9c0      	cbnz	r0, 8007126 <_printf_float+0x41e>
 80070f4:	4653      	mov	r3, sl
 80070f6:	f108 0201 	add.w	r2, r8, #1
 80070fa:	4631      	mov	r1, r6
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b8      	blx	r7
 8007100:	3001      	adds	r0, #1
 8007102:	d10c      	bne.n	800711e <_printf_float+0x416>
 8007104:	e65b      	b.n	8006dbe <_printf_float+0xb6>
 8007106:	2301      	movs	r3, #1
 8007108:	465a      	mov	r2, fp
 800710a:	4631      	mov	r1, r6
 800710c:	4628      	mov	r0, r5
 800710e:	47b8      	blx	r7
 8007110:	3001      	adds	r0, #1
 8007112:	f43f ae54 	beq.w	8006dbe <_printf_float+0xb6>
 8007116:	f108 0801 	add.w	r8, r8, #1
 800711a:	45d0      	cmp	r8, sl
 800711c:	dbf3      	blt.n	8007106 <_printf_float+0x3fe>
 800711e:	464b      	mov	r3, r9
 8007120:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007124:	e6e0      	b.n	8006ee8 <_printf_float+0x1e0>
 8007126:	f04f 0800 	mov.w	r8, #0
 800712a:	f104 0b1a 	add.w	fp, r4, #26
 800712e:	e7f4      	b.n	800711a <_printf_float+0x412>
 8007130:	2301      	movs	r3, #1
 8007132:	4642      	mov	r2, r8
 8007134:	e7e1      	b.n	80070fa <_printf_float+0x3f2>
 8007136:	2301      	movs	r3, #1
 8007138:	464a      	mov	r2, r9
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	47b8      	blx	r7
 8007140:	3001      	adds	r0, #1
 8007142:	f43f ae3c 	beq.w	8006dbe <_printf_float+0xb6>
 8007146:	f108 0801 	add.w	r8, r8, #1
 800714a:	68e3      	ldr	r3, [r4, #12]
 800714c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800714e:	1a5b      	subs	r3, r3, r1
 8007150:	4543      	cmp	r3, r8
 8007152:	dcf0      	bgt.n	8007136 <_printf_float+0x42e>
 8007154:	e6fd      	b.n	8006f52 <_printf_float+0x24a>
 8007156:	f04f 0800 	mov.w	r8, #0
 800715a:	f104 0919 	add.w	r9, r4, #25
 800715e:	e7f4      	b.n	800714a <_printf_float+0x442>

08007160 <_printf_common>:
 8007160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007164:	4616      	mov	r6, r2
 8007166:	4698      	mov	r8, r3
 8007168:	688a      	ldr	r2, [r1, #8]
 800716a:	690b      	ldr	r3, [r1, #16]
 800716c:	4607      	mov	r7, r0
 800716e:	4293      	cmp	r3, r2
 8007170:	bfb8      	it	lt
 8007172:	4613      	movlt	r3, r2
 8007174:	6033      	str	r3, [r6, #0]
 8007176:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800717a:	460c      	mov	r4, r1
 800717c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007180:	b10a      	cbz	r2, 8007186 <_printf_common+0x26>
 8007182:	3301      	adds	r3, #1
 8007184:	6033      	str	r3, [r6, #0]
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	0699      	lsls	r1, r3, #26
 800718a:	bf42      	ittt	mi
 800718c:	6833      	ldrmi	r3, [r6, #0]
 800718e:	3302      	addmi	r3, #2
 8007190:	6033      	strmi	r3, [r6, #0]
 8007192:	6825      	ldr	r5, [r4, #0]
 8007194:	f015 0506 	ands.w	r5, r5, #6
 8007198:	d106      	bne.n	80071a8 <_printf_common+0x48>
 800719a:	f104 0a19 	add.w	sl, r4, #25
 800719e:	68e3      	ldr	r3, [r4, #12]
 80071a0:	6832      	ldr	r2, [r6, #0]
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	42ab      	cmp	r3, r5
 80071a6:	dc2b      	bgt.n	8007200 <_printf_common+0xa0>
 80071a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071ac:	6822      	ldr	r2, [r4, #0]
 80071ae:	3b00      	subs	r3, #0
 80071b0:	bf18      	it	ne
 80071b2:	2301      	movne	r3, #1
 80071b4:	0692      	lsls	r2, r2, #26
 80071b6:	d430      	bmi.n	800721a <_printf_common+0xba>
 80071b8:	4641      	mov	r1, r8
 80071ba:	4638      	mov	r0, r7
 80071bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071c0:	47c8      	blx	r9
 80071c2:	3001      	adds	r0, #1
 80071c4:	d023      	beq.n	800720e <_printf_common+0xae>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	6922      	ldr	r2, [r4, #16]
 80071ca:	f003 0306 	and.w	r3, r3, #6
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	bf14      	ite	ne
 80071d2:	2500      	movne	r5, #0
 80071d4:	6833      	ldreq	r3, [r6, #0]
 80071d6:	f04f 0600 	mov.w	r6, #0
 80071da:	bf08      	it	eq
 80071dc:	68e5      	ldreq	r5, [r4, #12]
 80071de:	f104 041a 	add.w	r4, r4, #26
 80071e2:	bf08      	it	eq
 80071e4:	1aed      	subeq	r5, r5, r3
 80071e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80071ea:	bf08      	it	eq
 80071ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071f0:	4293      	cmp	r3, r2
 80071f2:	bfc4      	itt	gt
 80071f4:	1a9b      	subgt	r3, r3, r2
 80071f6:	18ed      	addgt	r5, r5, r3
 80071f8:	42b5      	cmp	r5, r6
 80071fa:	d11a      	bne.n	8007232 <_printf_common+0xd2>
 80071fc:	2000      	movs	r0, #0
 80071fe:	e008      	b.n	8007212 <_printf_common+0xb2>
 8007200:	2301      	movs	r3, #1
 8007202:	4652      	mov	r2, sl
 8007204:	4641      	mov	r1, r8
 8007206:	4638      	mov	r0, r7
 8007208:	47c8      	blx	r9
 800720a:	3001      	adds	r0, #1
 800720c:	d103      	bne.n	8007216 <_printf_common+0xb6>
 800720e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007216:	3501      	adds	r5, #1
 8007218:	e7c1      	b.n	800719e <_printf_common+0x3e>
 800721a:	2030      	movs	r0, #48	@ 0x30
 800721c:	18e1      	adds	r1, r4, r3
 800721e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007228:	4422      	add	r2, r4
 800722a:	3302      	adds	r3, #2
 800722c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007230:	e7c2      	b.n	80071b8 <_printf_common+0x58>
 8007232:	2301      	movs	r3, #1
 8007234:	4622      	mov	r2, r4
 8007236:	4641      	mov	r1, r8
 8007238:	4638      	mov	r0, r7
 800723a:	47c8      	blx	r9
 800723c:	3001      	adds	r0, #1
 800723e:	d0e6      	beq.n	800720e <_printf_common+0xae>
 8007240:	3601      	adds	r6, #1
 8007242:	e7d9      	b.n	80071f8 <_printf_common+0x98>

08007244 <_printf_i>:
 8007244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007248:	7e0f      	ldrb	r7, [r1, #24]
 800724a:	4691      	mov	r9, r2
 800724c:	2f78      	cmp	r7, #120	@ 0x78
 800724e:	4680      	mov	r8, r0
 8007250:	460c      	mov	r4, r1
 8007252:	469a      	mov	sl, r3
 8007254:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007256:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800725a:	d807      	bhi.n	800726c <_printf_i+0x28>
 800725c:	2f62      	cmp	r7, #98	@ 0x62
 800725e:	d80a      	bhi.n	8007276 <_printf_i+0x32>
 8007260:	2f00      	cmp	r7, #0
 8007262:	f000 80d3 	beq.w	800740c <_printf_i+0x1c8>
 8007266:	2f58      	cmp	r7, #88	@ 0x58
 8007268:	f000 80ba 	beq.w	80073e0 <_printf_i+0x19c>
 800726c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007270:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007274:	e03a      	b.n	80072ec <_printf_i+0xa8>
 8007276:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800727a:	2b15      	cmp	r3, #21
 800727c:	d8f6      	bhi.n	800726c <_printf_i+0x28>
 800727e:	a101      	add	r1, pc, #4	@ (adr r1, 8007284 <_printf_i+0x40>)
 8007280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007284:	080072dd 	.word	0x080072dd
 8007288:	080072f1 	.word	0x080072f1
 800728c:	0800726d 	.word	0x0800726d
 8007290:	0800726d 	.word	0x0800726d
 8007294:	0800726d 	.word	0x0800726d
 8007298:	0800726d 	.word	0x0800726d
 800729c:	080072f1 	.word	0x080072f1
 80072a0:	0800726d 	.word	0x0800726d
 80072a4:	0800726d 	.word	0x0800726d
 80072a8:	0800726d 	.word	0x0800726d
 80072ac:	0800726d 	.word	0x0800726d
 80072b0:	080073f3 	.word	0x080073f3
 80072b4:	0800731b 	.word	0x0800731b
 80072b8:	080073ad 	.word	0x080073ad
 80072bc:	0800726d 	.word	0x0800726d
 80072c0:	0800726d 	.word	0x0800726d
 80072c4:	08007415 	.word	0x08007415
 80072c8:	0800726d 	.word	0x0800726d
 80072cc:	0800731b 	.word	0x0800731b
 80072d0:	0800726d 	.word	0x0800726d
 80072d4:	0800726d 	.word	0x0800726d
 80072d8:	080073b5 	.word	0x080073b5
 80072dc:	6833      	ldr	r3, [r6, #0]
 80072de:	1d1a      	adds	r2, r3, #4
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6032      	str	r2, [r6, #0]
 80072e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072ec:	2301      	movs	r3, #1
 80072ee:	e09e      	b.n	800742e <_printf_i+0x1ea>
 80072f0:	6833      	ldr	r3, [r6, #0]
 80072f2:	6820      	ldr	r0, [r4, #0]
 80072f4:	1d19      	adds	r1, r3, #4
 80072f6:	6031      	str	r1, [r6, #0]
 80072f8:	0606      	lsls	r6, r0, #24
 80072fa:	d501      	bpl.n	8007300 <_printf_i+0xbc>
 80072fc:	681d      	ldr	r5, [r3, #0]
 80072fe:	e003      	b.n	8007308 <_printf_i+0xc4>
 8007300:	0645      	lsls	r5, r0, #25
 8007302:	d5fb      	bpl.n	80072fc <_printf_i+0xb8>
 8007304:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007308:	2d00      	cmp	r5, #0
 800730a:	da03      	bge.n	8007314 <_printf_i+0xd0>
 800730c:	232d      	movs	r3, #45	@ 0x2d
 800730e:	426d      	negs	r5, r5
 8007310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007314:	230a      	movs	r3, #10
 8007316:	4859      	ldr	r0, [pc, #356]	@ (800747c <_printf_i+0x238>)
 8007318:	e011      	b.n	800733e <_printf_i+0xfa>
 800731a:	6821      	ldr	r1, [r4, #0]
 800731c:	6833      	ldr	r3, [r6, #0]
 800731e:	0608      	lsls	r0, r1, #24
 8007320:	f853 5b04 	ldr.w	r5, [r3], #4
 8007324:	d402      	bmi.n	800732c <_printf_i+0xe8>
 8007326:	0649      	lsls	r1, r1, #25
 8007328:	bf48      	it	mi
 800732a:	b2ad      	uxthmi	r5, r5
 800732c:	2f6f      	cmp	r7, #111	@ 0x6f
 800732e:	6033      	str	r3, [r6, #0]
 8007330:	bf14      	ite	ne
 8007332:	230a      	movne	r3, #10
 8007334:	2308      	moveq	r3, #8
 8007336:	4851      	ldr	r0, [pc, #324]	@ (800747c <_printf_i+0x238>)
 8007338:	2100      	movs	r1, #0
 800733a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800733e:	6866      	ldr	r6, [r4, #4]
 8007340:	2e00      	cmp	r6, #0
 8007342:	bfa8      	it	ge
 8007344:	6821      	ldrge	r1, [r4, #0]
 8007346:	60a6      	str	r6, [r4, #8]
 8007348:	bfa4      	itt	ge
 800734a:	f021 0104 	bicge.w	r1, r1, #4
 800734e:	6021      	strge	r1, [r4, #0]
 8007350:	b90d      	cbnz	r5, 8007356 <_printf_i+0x112>
 8007352:	2e00      	cmp	r6, #0
 8007354:	d04b      	beq.n	80073ee <_printf_i+0x1aa>
 8007356:	4616      	mov	r6, r2
 8007358:	fbb5 f1f3 	udiv	r1, r5, r3
 800735c:	fb03 5711 	mls	r7, r3, r1, r5
 8007360:	5dc7      	ldrb	r7, [r0, r7]
 8007362:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007366:	462f      	mov	r7, r5
 8007368:	42bb      	cmp	r3, r7
 800736a:	460d      	mov	r5, r1
 800736c:	d9f4      	bls.n	8007358 <_printf_i+0x114>
 800736e:	2b08      	cmp	r3, #8
 8007370:	d10b      	bne.n	800738a <_printf_i+0x146>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	07df      	lsls	r7, r3, #31
 8007376:	d508      	bpl.n	800738a <_printf_i+0x146>
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	6861      	ldr	r1, [r4, #4]
 800737c:	4299      	cmp	r1, r3
 800737e:	bfde      	ittt	le
 8007380:	2330      	movle	r3, #48	@ 0x30
 8007382:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007386:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800738a:	1b92      	subs	r2, r2, r6
 800738c:	6122      	str	r2, [r4, #16]
 800738e:	464b      	mov	r3, r9
 8007390:	4621      	mov	r1, r4
 8007392:	4640      	mov	r0, r8
 8007394:	f8cd a000 	str.w	sl, [sp]
 8007398:	aa03      	add	r2, sp, #12
 800739a:	f7ff fee1 	bl	8007160 <_printf_common>
 800739e:	3001      	adds	r0, #1
 80073a0:	d14a      	bne.n	8007438 <_printf_i+0x1f4>
 80073a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073a6:	b004      	add	sp, #16
 80073a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	f043 0320 	orr.w	r3, r3, #32
 80073b2:	6023      	str	r3, [r4, #0]
 80073b4:	2778      	movs	r7, #120	@ 0x78
 80073b6:	4832      	ldr	r0, [pc, #200]	@ (8007480 <_printf_i+0x23c>)
 80073b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	6831      	ldr	r1, [r6, #0]
 80073c0:	061f      	lsls	r7, r3, #24
 80073c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80073c6:	d402      	bmi.n	80073ce <_printf_i+0x18a>
 80073c8:	065f      	lsls	r7, r3, #25
 80073ca:	bf48      	it	mi
 80073cc:	b2ad      	uxthmi	r5, r5
 80073ce:	6031      	str	r1, [r6, #0]
 80073d0:	07d9      	lsls	r1, r3, #31
 80073d2:	bf44      	itt	mi
 80073d4:	f043 0320 	orrmi.w	r3, r3, #32
 80073d8:	6023      	strmi	r3, [r4, #0]
 80073da:	b11d      	cbz	r5, 80073e4 <_printf_i+0x1a0>
 80073dc:	2310      	movs	r3, #16
 80073de:	e7ab      	b.n	8007338 <_printf_i+0xf4>
 80073e0:	4826      	ldr	r0, [pc, #152]	@ (800747c <_printf_i+0x238>)
 80073e2:	e7e9      	b.n	80073b8 <_printf_i+0x174>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	f023 0320 	bic.w	r3, r3, #32
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	e7f6      	b.n	80073dc <_printf_i+0x198>
 80073ee:	4616      	mov	r6, r2
 80073f0:	e7bd      	b.n	800736e <_printf_i+0x12a>
 80073f2:	6833      	ldr	r3, [r6, #0]
 80073f4:	6825      	ldr	r5, [r4, #0]
 80073f6:	1d18      	adds	r0, r3, #4
 80073f8:	6961      	ldr	r1, [r4, #20]
 80073fa:	6030      	str	r0, [r6, #0]
 80073fc:	062e      	lsls	r6, r5, #24
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	d501      	bpl.n	8007406 <_printf_i+0x1c2>
 8007402:	6019      	str	r1, [r3, #0]
 8007404:	e002      	b.n	800740c <_printf_i+0x1c8>
 8007406:	0668      	lsls	r0, r5, #25
 8007408:	d5fb      	bpl.n	8007402 <_printf_i+0x1be>
 800740a:	8019      	strh	r1, [r3, #0]
 800740c:	2300      	movs	r3, #0
 800740e:	4616      	mov	r6, r2
 8007410:	6123      	str	r3, [r4, #16]
 8007412:	e7bc      	b.n	800738e <_printf_i+0x14a>
 8007414:	6833      	ldr	r3, [r6, #0]
 8007416:	2100      	movs	r1, #0
 8007418:	1d1a      	adds	r2, r3, #4
 800741a:	6032      	str	r2, [r6, #0]
 800741c:	681e      	ldr	r6, [r3, #0]
 800741e:	6862      	ldr	r2, [r4, #4]
 8007420:	4630      	mov	r0, r6
 8007422:	f000 f9f8 	bl	8007816 <memchr>
 8007426:	b108      	cbz	r0, 800742c <_printf_i+0x1e8>
 8007428:	1b80      	subs	r0, r0, r6
 800742a:	6060      	str	r0, [r4, #4]
 800742c:	6863      	ldr	r3, [r4, #4]
 800742e:	6123      	str	r3, [r4, #16]
 8007430:	2300      	movs	r3, #0
 8007432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007436:	e7aa      	b.n	800738e <_printf_i+0x14a>
 8007438:	4632      	mov	r2, r6
 800743a:	4649      	mov	r1, r9
 800743c:	4640      	mov	r0, r8
 800743e:	6923      	ldr	r3, [r4, #16]
 8007440:	47d0      	blx	sl
 8007442:	3001      	adds	r0, #1
 8007444:	d0ad      	beq.n	80073a2 <_printf_i+0x15e>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	079b      	lsls	r3, r3, #30
 800744a:	d413      	bmi.n	8007474 <_printf_i+0x230>
 800744c:	68e0      	ldr	r0, [r4, #12]
 800744e:	9b03      	ldr	r3, [sp, #12]
 8007450:	4298      	cmp	r0, r3
 8007452:	bfb8      	it	lt
 8007454:	4618      	movlt	r0, r3
 8007456:	e7a6      	b.n	80073a6 <_printf_i+0x162>
 8007458:	2301      	movs	r3, #1
 800745a:	4632      	mov	r2, r6
 800745c:	4649      	mov	r1, r9
 800745e:	4640      	mov	r0, r8
 8007460:	47d0      	blx	sl
 8007462:	3001      	adds	r0, #1
 8007464:	d09d      	beq.n	80073a2 <_printf_i+0x15e>
 8007466:	3501      	adds	r5, #1
 8007468:	68e3      	ldr	r3, [r4, #12]
 800746a:	9903      	ldr	r1, [sp, #12]
 800746c:	1a5b      	subs	r3, r3, r1
 800746e:	42ab      	cmp	r3, r5
 8007470:	dcf2      	bgt.n	8007458 <_printf_i+0x214>
 8007472:	e7eb      	b.n	800744c <_printf_i+0x208>
 8007474:	2500      	movs	r5, #0
 8007476:	f104 0619 	add.w	r6, r4, #25
 800747a:	e7f5      	b.n	8007468 <_printf_i+0x224>
 800747c:	08009930 	.word	0x08009930
 8007480:	08009941 	.word	0x08009941

08007484 <std>:
 8007484:	2300      	movs	r3, #0
 8007486:	b510      	push	{r4, lr}
 8007488:	4604      	mov	r4, r0
 800748a:	e9c0 3300 	strd	r3, r3, [r0]
 800748e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007492:	6083      	str	r3, [r0, #8]
 8007494:	8181      	strh	r1, [r0, #12]
 8007496:	6643      	str	r3, [r0, #100]	@ 0x64
 8007498:	81c2      	strh	r2, [r0, #14]
 800749a:	6183      	str	r3, [r0, #24]
 800749c:	4619      	mov	r1, r3
 800749e:	2208      	movs	r2, #8
 80074a0:	305c      	adds	r0, #92	@ 0x5c
 80074a2:	f000 f929 	bl	80076f8 <memset>
 80074a6:	4b0d      	ldr	r3, [pc, #52]	@ (80074dc <std+0x58>)
 80074a8:	6224      	str	r4, [r4, #32]
 80074aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80074ac:	4b0c      	ldr	r3, [pc, #48]	@ (80074e0 <std+0x5c>)
 80074ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074b0:	4b0c      	ldr	r3, [pc, #48]	@ (80074e4 <std+0x60>)
 80074b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074b4:	4b0c      	ldr	r3, [pc, #48]	@ (80074e8 <std+0x64>)
 80074b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80074b8:	4b0c      	ldr	r3, [pc, #48]	@ (80074ec <std+0x68>)
 80074ba:	429c      	cmp	r4, r3
 80074bc:	d006      	beq.n	80074cc <std+0x48>
 80074be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074c2:	4294      	cmp	r4, r2
 80074c4:	d002      	beq.n	80074cc <std+0x48>
 80074c6:	33d0      	adds	r3, #208	@ 0xd0
 80074c8:	429c      	cmp	r4, r3
 80074ca:	d105      	bne.n	80074d8 <std+0x54>
 80074cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074d4:	f000 b99c 	b.w	8007810 <__retarget_lock_init_recursive>
 80074d8:	bd10      	pop	{r4, pc}
 80074da:	bf00      	nop
 80074dc:	080091bd 	.word	0x080091bd
 80074e0:	080091df 	.word	0x080091df
 80074e4:	08009217 	.word	0x08009217
 80074e8:	0800923b 	.word	0x0800923b
 80074ec:	200020f4 	.word	0x200020f4

080074f0 <stdio_exit_handler>:
 80074f0:	4a02      	ldr	r2, [pc, #8]	@ (80074fc <stdio_exit_handler+0xc>)
 80074f2:	4903      	ldr	r1, [pc, #12]	@ (8007500 <stdio_exit_handler+0x10>)
 80074f4:	4803      	ldr	r0, [pc, #12]	@ (8007504 <stdio_exit_handler+0x14>)
 80074f6:	f000 b869 	b.w	80075cc <_fwalk_sglue>
 80074fa:	bf00      	nop
 80074fc:	20000010 	.word	0x20000010
 8007500:	08008a55 	.word	0x08008a55
 8007504:	20000020 	.word	0x20000020

08007508 <cleanup_stdio>:
 8007508:	6841      	ldr	r1, [r0, #4]
 800750a:	4b0c      	ldr	r3, [pc, #48]	@ (800753c <cleanup_stdio+0x34>)
 800750c:	b510      	push	{r4, lr}
 800750e:	4299      	cmp	r1, r3
 8007510:	4604      	mov	r4, r0
 8007512:	d001      	beq.n	8007518 <cleanup_stdio+0x10>
 8007514:	f001 fa9e 	bl	8008a54 <_fflush_r>
 8007518:	68a1      	ldr	r1, [r4, #8]
 800751a:	4b09      	ldr	r3, [pc, #36]	@ (8007540 <cleanup_stdio+0x38>)
 800751c:	4299      	cmp	r1, r3
 800751e:	d002      	beq.n	8007526 <cleanup_stdio+0x1e>
 8007520:	4620      	mov	r0, r4
 8007522:	f001 fa97 	bl	8008a54 <_fflush_r>
 8007526:	68e1      	ldr	r1, [r4, #12]
 8007528:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <cleanup_stdio+0x3c>)
 800752a:	4299      	cmp	r1, r3
 800752c:	d004      	beq.n	8007538 <cleanup_stdio+0x30>
 800752e:	4620      	mov	r0, r4
 8007530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007534:	f001 ba8e 	b.w	8008a54 <_fflush_r>
 8007538:	bd10      	pop	{r4, pc}
 800753a:	bf00      	nop
 800753c:	200020f4 	.word	0x200020f4
 8007540:	2000215c 	.word	0x2000215c
 8007544:	200021c4 	.word	0x200021c4

08007548 <global_stdio_init.part.0>:
 8007548:	b510      	push	{r4, lr}
 800754a:	4b0b      	ldr	r3, [pc, #44]	@ (8007578 <global_stdio_init.part.0+0x30>)
 800754c:	4c0b      	ldr	r4, [pc, #44]	@ (800757c <global_stdio_init.part.0+0x34>)
 800754e:	4a0c      	ldr	r2, [pc, #48]	@ (8007580 <global_stdio_init.part.0+0x38>)
 8007550:	4620      	mov	r0, r4
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	2104      	movs	r1, #4
 8007556:	2200      	movs	r2, #0
 8007558:	f7ff ff94 	bl	8007484 <std>
 800755c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007560:	2201      	movs	r2, #1
 8007562:	2109      	movs	r1, #9
 8007564:	f7ff ff8e 	bl	8007484 <std>
 8007568:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800756c:	2202      	movs	r2, #2
 800756e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007572:	2112      	movs	r1, #18
 8007574:	f7ff bf86 	b.w	8007484 <std>
 8007578:	2000222c 	.word	0x2000222c
 800757c:	200020f4 	.word	0x200020f4
 8007580:	080074f1 	.word	0x080074f1

08007584 <__sfp_lock_acquire>:
 8007584:	4801      	ldr	r0, [pc, #4]	@ (800758c <__sfp_lock_acquire+0x8>)
 8007586:	f000 b944 	b.w	8007812 <__retarget_lock_acquire_recursive>
 800758a:	bf00      	nop
 800758c:	20002235 	.word	0x20002235

08007590 <__sfp_lock_release>:
 8007590:	4801      	ldr	r0, [pc, #4]	@ (8007598 <__sfp_lock_release+0x8>)
 8007592:	f000 b93f 	b.w	8007814 <__retarget_lock_release_recursive>
 8007596:	bf00      	nop
 8007598:	20002235 	.word	0x20002235

0800759c <__sinit>:
 800759c:	b510      	push	{r4, lr}
 800759e:	4604      	mov	r4, r0
 80075a0:	f7ff fff0 	bl	8007584 <__sfp_lock_acquire>
 80075a4:	6a23      	ldr	r3, [r4, #32]
 80075a6:	b11b      	cbz	r3, 80075b0 <__sinit+0x14>
 80075a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ac:	f7ff bff0 	b.w	8007590 <__sfp_lock_release>
 80075b0:	4b04      	ldr	r3, [pc, #16]	@ (80075c4 <__sinit+0x28>)
 80075b2:	6223      	str	r3, [r4, #32]
 80075b4:	4b04      	ldr	r3, [pc, #16]	@ (80075c8 <__sinit+0x2c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1f5      	bne.n	80075a8 <__sinit+0xc>
 80075bc:	f7ff ffc4 	bl	8007548 <global_stdio_init.part.0>
 80075c0:	e7f2      	b.n	80075a8 <__sinit+0xc>
 80075c2:	bf00      	nop
 80075c4:	08007509 	.word	0x08007509
 80075c8:	2000222c 	.word	0x2000222c

080075cc <_fwalk_sglue>:
 80075cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075d0:	4607      	mov	r7, r0
 80075d2:	4688      	mov	r8, r1
 80075d4:	4614      	mov	r4, r2
 80075d6:	2600      	movs	r6, #0
 80075d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075dc:	f1b9 0901 	subs.w	r9, r9, #1
 80075e0:	d505      	bpl.n	80075ee <_fwalk_sglue+0x22>
 80075e2:	6824      	ldr	r4, [r4, #0]
 80075e4:	2c00      	cmp	r4, #0
 80075e6:	d1f7      	bne.n	80075d8 <_fwalk_sglue+0xc>
 80075e8:	4630      	mov	r0, r6
 80075ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ee:	89ab      	ldrh	r3, [r5, #12]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d907      	bls.n	8007604 <_fwalk_sglue+0x38>
 80075f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075f8:	3301      	adds	r3, #1
 80075fa:	d003      	beq.n	8007604 <_fwalk_sglue+0x38>
 80075fc:	4629      	mov	r1, r5
 80075fe:	4638      	mov	r0, r7
 8007600:	47c0      	blx	r8
 8007602:	4306      	orrs	r6, r0
 8007604:	3568      	adds	r5, #104	@ 0x68
 8007606:	e7e9      	b.n	80075dc <_fwalk_sglue+0x10>

08007608 <iprintf>:
 8007608:	b40f      	push	{r0, r1, r2, r3}
 800760a:	b507      	push	{r0, r1, r2, lr}
 800760c:	4906      	ldr	r1, [pc, #24]	@ (8007628 <iprintf+0x20>)
 800760e:	ab04      	add	r3, sp, #16
 8007610:	6808      	ldr	r0, [r1, #0]
 8007612:	f853 2b04 	ldr.w	r2, [r3], #4
 8007616:	6881      	ldr	r1, [r0, #8]
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	f000 ffd9 	bl	80085d0 <_vfiprintf_r>
 800761e:	b003      	add	sp, #12
 8007620:	f85d eb04 	ldr.w	lr, [sp], #4
 8007624:	b004      	add	sp, #16
 8007626:	4770      	bx	lr
 8007628:	2000001c 	.word	0x2000001c

0800762c <putchar>:
 800762c:	4b02      	ldr	r3, [pc, #8]	@ (8007638 <putchar+0xc>)
 800762e:	4601      	mov	r1, r0
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	6882      	ldr	r2, [r0, #8]
 8007634:	f001 befb 	b.w	800942e <_putc_r>
 8007638:	2000001c 	.word	0x2000001c

0800763c <_puts_r>:
 800763c:	6a03      	ldr	r3, [r0, #32]
 800763e:	b570      	push	{r4, r5, r6, lr}
 8007640:	4605      	mov	r5, r0
 8007642:	460e      	mov	r6, r1
 8007644:	6884      	ldr	r4, [r0, #8]
 8007646:	b90b      	cbnz	r3, 800764c <_puts_r+0x10>
 8007648:	f7ff ffa8 	bl	800759c <__sinit>
 800764c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800764e:	07db      	lsls	r3, r3, #31
 8007650:	d405      	bmi.n	800765e <_puts_r+0x22>
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	0598      	lsls	r0, r3, #22
 8007656:	d402      	bmi.n	800765e <_puts_r+0x22>
 8007658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800765a:	f000 f8da 	bl	8007812 <__retarget_lock_acquire_recursive>
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	0719      	lsls	r1, r3, #28
 8007662:	d502      	bpl.n	800766a <_puts_r+0x2e>
 8007664:	6923      	ldr	r3, [r4, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d135      	bne.n	80076d6 <_puts_r+0x9a>
 800766a:	4621      	mov	r1, r4
 800766c:	4628      	mov	r0, r5
 800766e:	f001 fe27 	bl	80092c0 <__swsetup_r>
 8007672:	b380      	cbz	r0, 80076d6 <_puts_r+0x9a>
 8007674:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007678:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800767a:	07da      	lsls	r2, r3, #31
 800767c:	d405      	bmi.n	800768a <_puts_r+0x4e>
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	059b      	lsls	r3, r3, #22
 8007682:	d402      	bmi.n	800768a <_puts_r+0x4e>
 8007684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007686:	f000 f8c5 	bl	8007814 <__retarget_lock_release_recursive>
 800768a:	4628      	mov	r0, r5
 800768c:	bd70      	pop	{r4, r5, r6, pc}
 800768e:	2b00      	cmp	r3, #0
 8007690:	da04      	bge.n	800769c <_puts_r+0x60>
 8007692:	69a2      	ldr	r2, [r4, #24]
 8007694:	429a      	cmp	r2, r3
 8007696:	dc17      	bgt.n	80076c8 <_puts_r+0x8c>
 8007698:	290a      	cmp	r1, #10
 800769a:	d015      	beq.n	80076c8 <_puts_r+0x8c>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	6022      	str	r2, [r4, #0]
 80076a2:	7019      	strb	r1, [r3, #0]
 80076a4:	68a3      	ldr	r3, [r4, #8]
 80076a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076aa:	3b01      	subs	r3, #1
 80076ac:	60a3      	str	r3, [r4, #8]
 80076ae:	2900      	cmp	r1, #0
 80076b0:	d1ed      	bne.n	800768e <_puts_r+0x52>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	da11      	bge.n	80076da <_puts_r+0x9e>
 80076b6:	4622      	mov	r2, r4
 80076b8:	210a      	movs	r1, #10
 80076ba:	4628      	mov	r0, r5
 80076bc:	f001 fdc1 	bl	8009242 <__swbuf_r>
 80076c0:	3001      	adds	r0, #1
 80076c2:	d0d7      	beq.n	8007674 <_puts_r+0x38>
 80076c4:	250a      	movs	r5, #10
 80076c6:	e7d7      	b.n	8007678 <_puts_r+0x3c>
 80076c8:	4622      	mov	r2, r4
 80076ca:	4628      	mov	r0, r5
 80076cc:	f001 fdb9 	bl	8009242 <__swbuf_r>
 80076d0:	3001      	adds	r0, #1
 80076d2:	d1e7      	bne.n	80076a4 <_puts_r+0x68>
 80076d4:	e7ce      	b.n	8007674 <_puts_r+0x38>
 80076d6:	3e01      	subs	r6, #1
 80076d8:	e7e4      	b.n	80076a4 <_puts_r+0x68>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	6022      	str	r2, [r4, #0]
 80076e0:	220a      	movs	r2, #10
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	e7ee      	b.n	80076c4 <_puts_r+0x88>
	...

080076e8 <puts>:
 80076e8:	4b02      	ldr	r3, [pc, #8]	@ (80076f4 <puts+0xc>)
 80076ea:	4601      	mov	r1, r0
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	f7ff bfa5 	b.w	800763c <_puts_r>
 80076f2:	bf00      	nop
 80076f4:	2000001c 	.word	0x2000001c

080076f8 <memset>:
 80076f8:	4603      	mov	r3, r0
 80076fa:	4402      	add	r2, r0
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d100      	bne.n	8007702 <memset+0xa>
 8007700:	4770      	bx	lr
 8007702:	f803 1b01 	strb.w	r1, [r3], #1
 8007706:	e7f9      	b.n	80076fc <memset+0x4>

08007708 <_localeconv_r>:
 8007708:	4800      	ldr	r0, [pc, #0]	@ (800770c <_localeconv_r+0x4>)
 800770a:	4770      	bx	lr
 800770c:	2000015c 	.word	0x2000015c

08007710 <_reclaim_reent>:
 8007710:	4b29      	ldr	r3, [pc, #164]	@ (80077b8 <_reclaim_reent+0xa8>)
 8007712:	b570      	push	{r4, r5, r6, lr}
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4604      	mov	r4, r0
 8007718:	4283      	cmp	r3, r0
 800771a:	d04b      	beq.n	80077b4 <_reclaim_reent+0xa4>
 800771c:	69c3      	ldr	r3, [r0, #28]
 800771e:	b1ab      	cbz	r3, 800774c <_reclaim_reent+0x3c>
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	b16b      	cbz	r3, 8007740 <_reclaim_reent+0x30>
 8007724:	2500      	movs	r5, #0
 8007726:	69e3      	ldr	r3, [r4, #28]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	5959      	ldr	r1, [r3, r5]
 800772c:	2900      	cmp	r1, #0
 800772e:	d13b      	bne.n	80077a8 <_reclaim_reent+0x98>
 8007730:	3504      	adds	r5, #4
 8007732:	2d80      	cmp	r5, #128	@ 0x80
 8007734:	d1f7      	bne.n	8007726 <_reclaim_reent+0x16>
 8007736:	69e3      	ldr	r3, [r4, #28]
 8007738:	4620      	mov	r0, r4
 800773a:	68d9      	ldr	r1, [r3, #12]
 800773c:	f000 fed8 	bl	80084f0 <_free_r>
 8007740:	69e3      	ldr	r3, [r4, #28]
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	b111      	cbz	r1, 800774c <_reclaim_reent+0x3c>
 8007746:	4620      	mov	r0, r4
 8007748:	f000 fed2 	bl	80084f0 <_free_r>
 800774c:	6961      	ldr	r1, [r4, #20]
 800774e:	b111      	cbz	r1, 8007756 <_reclaim_reent+0x46>
 8007750:	4620      	mov	r0, r4
 8007752:	f000 fecd 	bl	80084f0 <_free_r>
 8007756:	69e1      	ldr	r1, [r4, #28]
 8007758:	b111      	cbz	r1, 8007760 <_reclaim_reent+0x50>
 800775a:	4620      	mov	r0, r4
 800775c:	f000 fec8 	bl	80084f0 <_free_r>
 8007760:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007762:	b111      	cbz	r1, 800776a <_reclaim_reent+0x5a>
 8007764:	4620      	mov	r0, r4
 8007766:	f000 fec3 	bl	80084f0 <_free_r>
 800776a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800776c:	b111      	cbz	r1, 8007774 <_reclaim_reent+0x64>
 800776e:	4620      	mov	r0, r4
 8007770:	f000 febe 	bl	80084f0 <_free_r>
 8007774:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007776:	b111      	cbz	r1, 800777e <_reclaim_reent+0x6e>
 8007778:	4620      	mov	r0, r4
 800777a:	f000 feb9 	bl	80084f0 <_free_r>
 800777e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007780:	b111      	cbz	r1, 8007788 <_reclaim_reent+0x78>
 8007782:	4620      	mov	r0, r4
 8007784:	f000 feb4 	bl	80084f0 <_free_r>
 8007788:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800778a:	b111      	cbz	r1, 8007792 <_reclaim_reent+0x82>
 800778c:	4620      	mov	r0, r4
 800778e:	f000 feaf 	bl	80084f0 <_free_r>
 8007792:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007794:	b111      	cbz	r1, 800779c <_reclaim_reent+0x8c>
 8007796:	4620      	mov	r0, r4
 8007798:	f000 feaa 	bl	80084f0 <_free_r>
 800779c:	6a23      	ldr	r3, [r4, #32]
 800779e:	b14b      	cbz	r3, 80077b4 <_reclaim_reent+0xa4>
 80077a0:	4620      	mov	r0, r4
 80077a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077a6:	4718      	bx	r3
 80077a8:	680e      	ldr	r6, [r1, #0]
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 fea0 	bl	80084f0 <_free_r>
 80077b0:	4631      	mov	r1, r6
 80077b2:	e7bb      	b.n	800772c <_reclaim_reent+0x1c>
 80077b4:	bd70      	pop	{r4, r5, r6, pc}
 80077b6:	bf00      	nop
 80077b8:	2000001c 	.word	0x2000001c

080077bc <__errno>:
 80077bc:	4b01      	ldr	r3, [pc, #4]	@ (80077c4 <__errno+0x8>)
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	2000001c 	.word	0x2000001c

080077c8 <__libc_init_array>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	2600      	movs	r6, #0
 80077cc:	4d0c      	ldr	r5, [pc, #48]	@ (8007800 <__libc_init_array+0x38>)
 80077ce:	4c0d      	ldr	r4, [pc, #52]	@ (8007804 <__libc_init_array+0x3c>)
 80077d0:	1b64      	subs	r4, r4, r5
 80077d2:	10a4      	asrs	r4, r4, #2
 80077d4:	42a6      	cmp	r6, r4
 80077d6:	d109      	bne.n	80077ec <__libc_init_array+0x24>
 80077d8:	f001 ff84 	bl	80096e4 <_init>
 80077dc:	2600      	movs	r6, #0
 80077de:	4d0a      	ldr	r5, [pc, #40]	@ (8007808 <__libc_init_array+0x40>)
 80077e0:	4c0a      	ldr	r4, [pc, #40]	@ (800780c <__libc_init_array+0x44>)
 80077e2:	1b64      	subs	r4, r4, r5
 80077e4:	10a4      	asrs	r4, r4, #2
 80077e6:	42a6      	cmp	r6, r4
 80077e8:	d105      	bne.n	80077f6 <__libc_init_array+0x2e>
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f0:	4798      	blx	r3
 80077f2:	3601      	adds	r6, #1
 80077f4:	e7ee      	b.n	80077d4 <__libc_init_array+0xc>
 80077f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fa:	4798      	blx	r3
 80077fc:	3601      	adds	r6, #1
 80077fe:	e7f2      	b.n	80077e6 <__libc_init_array+0x1e>
 8007800:	08009c98 	.word	0x08009c98
 8007804:	08009c98 	.word	0x08009c98
 8007808:	08009c98 	.word	0x08009c98
 800780c:	08009c9c 	.word	0x08009c9c

08007810 <__retarget_lock_init_recursive>:
 8007810:	4770      	bx	lr

08007812 <__retarget_lock_acquire_recursive>:
 8007812:	4770      	bx	lr

08007814 <__retarget_lock_release_recursive>:
 8007814:	4770      	bx	lr

08007816 <memchr>:
 8007816:	4603      	mov	r3, r0
 8007818:	b510      	push	{r4, lr}
 800781a:	b2c9      	uxtb	r1, r1
 800781c:	4402      	add	r2, r0
 800781e:	4293      	cmp	r3, r2
 8007820:	4618      	mov	r0, r3
 8007822:	d101      	bne.n	8007828 <memchr+0x12>
 8007824:	2000      	movs	r0, #0
 8007826:	e003      	b.n	8007830 <memchr+0x1a>
 8007828:	7804      	ldrb	r4, [r0, #0]
 800782a:	3301      	adds	r3, #1
 800782c:	428c      	cmp	r4, r1
 800782e:	d1f6      	bne.n	800781e <memchr+0x8>
 8007830:	bd10      	pop	{r4, pc}

08007832 <memcpy>:
 8007832:	440a      	add	r2, r1
 8007834:	4291      	cmp	r1, r2
 8007836:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800783a:	d100      	bne.n	800783e <memcpy+0xc>
 800783c:	4770      	bx	lr
 800783e:	b510      	push	{r4, lr}
 8007840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007844:	4291      	cmp	r1, r2
 8007846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800784a:	d1f9      	bne.n	8007840 <memcpy+0xe>
 800784c:	bd10      	pop	{r4, pc}

0800784e <quorem>:
 800784e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007852:	6903      	ldr	r3, [r0, #16]
 8007854:	690c      	ldr	r4, [r1, #16]
 8007856:	4607      	mov	r7, r0
 8007858:	42a3      	cmp	r3, r4
 800785a:	db7e      	blt.n	800795a <quorem+0x10c>
 800785c:	3c01      	subs	r4, #1
 800785e:	00a3      	lsls	r3, r4, #2
 8007860:	f100 0514 	add.w	r5, r0, #20
 8007864:	f101 0814 	add.w	r8, r1, #20
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007874:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007878:	3301      	adds	r3, #1
 800787a:	429a      	cmp	r2, r3
 800787c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007880:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007884:	d32e      	bcc.n	80078e4 <quorem+0x96>
 8007886:	f04f 0a00 	mov.w	sl, #0
 800788a:	46c4      	mov	ip, r8
 800788c:	46ae      	mov	lr, r5
 800788e:	46d3      	mov	fp, sl
 8007890:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007894:	b298      	uxth	r0, r3
 8007896:	fb06 a000 	mla	r0, r6, r0, sl
 800789a:	0c1b      	lsrs	r3, r3, #16
 800789c:	0c02      	lsrs	r2, r0, #16
 800789e:	fb06 2303 	mla	r3, r6, r3, r2
 80078a2:	f8de 2000 	ldr.w	r2, [lr]
 80078a6:	b280      	uxth	r0, r0
 80078a8:	b292      	uxth	r2, r2
 80078aa:	1a12      	subs	r2, r2, r0
 80078ac:	445a      	add	r2, fp
 80078ae:	f8de 0000 	ldr.w	r0, [lr]
 80078b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80078bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80078c0:	b292      	uxth	r2, r2
 80078c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80078c6:	45e1      	cmp	r9, ip
 80078c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80078cc:	f84e 2b04 	str.w	r2, [lr], #4
 80078d0:	d2de      	bcs.n	8007890 <quorem+0x42>
 80078d2:	9b00      	ldr	r3, [sp, #0]
 80078d4:	58eb      	ldr	r3, [r5, r3]
 80078d6:	b92b      	cbnz	r3, 80078e4 <quorem+0x96>
 80078d8:	9b01      	ldr	r3, [sp, #4]
 80078da:	3b04      	subs	r3, #4
 80078dc:	429d      	cmp	r5, r3
 80078de:	461a      	mov	r2, r3
 80078e0:	d32f      	bcc.n	8007942 <quorem+0xf4>
 80078e2:	613c      	str	r4, [r7, #16]
 80078e4:	4638      	mov	r0, r7
 80078e6:	f001 fb61 	bl	8008fac <__mcmp>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	db25      	blt.n	800793a <quorem+0xec>
 80078ee:	4629      	mov	r1, r5
 80078f0:	2000      	movs	r0, #0
 80078f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80078f6:	f8d1 c000 	ldr.w	ip, [r1]
 80078fa:	fa1f fe82 	uxth.w	lr, r2
 80078fe:	fa1f f38c 	uxth.w	r3, ip
 8007902:	eba3 030e 	sub.w	r3, r3, lr
 8007906:	4403      	add	r3, r0
 8007908:	0c12      	lsrs	r2, r2, #16
 800790a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800790e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007912:	b29b      	uxth	r3, r3
 8007914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007918:	45c1      	cmp	r9, r8
 800791a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800791e:	f841 3b04 	str.w	r3, [r1], #4
 8007922:	d2e6      	bcs.n	80078f2 <quorem+0xa4>
 8007924:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007928:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800792c:	b922      	cbnz	r2, 8007938 <quorem+0xea>
 800792e:	3b04      	subs	r3, #4
 8007930:	429d      	cmp	r5, r3
 8007932:	461a      	mov	r2, r3
 8007934:	d30b      	bcc.n	800794e <quorem+0x100>
 8007936:	613c      	str	r4, [r7, #16]
 8007938:	3601      	adds	r6, #1
 800793a:	4630      	mov	r0, r6
 800793c:	b003      	add	sp, #12
 800793e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	3b04      	subs	r3, #4
 8007946:	2a00      	cmp	r2, #0
 8007948:	d1cb      	bne.n	80078e2 <quorem+0x94>
 800794a:	3c01      	subs	r4, #1
 800794c:	e7c6      	b.n	80078dc <quorem+0x8e>
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	3b04      	subs	r3, #4
 8007952:	2a00      	cmp	r2, #0
 8007954:	d1ef      	bne.n	8007936 <quorem+0xe8>
 8007956:	3c01      	subs	r4, #1
 8007958:	e7ea      	b.n	8007930 <quorem+0xe2>
 800795a:	2000      	movs	r0, #0
 800795c:	e7ee      	b.n	800793c <quorem+0xee>
	...

08007960 <_dtoa_r>:
 8007960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	4614      	mov	r4, r2
 8007966:	461d      	mov	r5, r3
 8007968:	69c7      	ldr	r7, [r0, #28]
 800796a:	b097      	sub	sp, #92	@ 0x5c
 800796c:	4683      	mov	fp, r0
 800796e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007972:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007974:	b97f      	cbnz	r7, 8007996 <_dtoa_r+0x36>
 8007976:	2010      	movs	r0, #16
 8007978:	f000 ff42 	bl	8008800 <malloc>
 800797c:	4602      	mov	r2, r0
 800797e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007982:	b920      	cbnz	r0, 800798e <_dtoa_r+0x2e>
 8007984:	21ef      	movs	r1, #239	@ 0xef
 8007986:	4ba8      	ldr	r3, [pc, #672]	@ (8007c28 <_dtoa_r+0x2c8>)
 8007988:	48a8      	ldr	r0, [pc, #672]	@ (8007c2c <_dtoa_r+0x2cc>)
 800798a:	f001 fdfd 	bl	8009588 <__assert_func>
 800798e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007992:	6007      	str	r7, [r0, #0]
 8007994:	60c7      	str	r7, [r0, #12]
 8007996:	f8db 301c 	ldr.w	r3, [fp, #28]
 800799a:	6819      	ldr	r1, [r3, #0]
 800799c:	b159      	cbz	r1, 80079b6 <_dtoa_r+0x56>
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	2301      	movs	r3, #1
 80079a2:	4093      	lsls	r3, r2
 80079a4:	604a      	str	r2, [r1, #4]
 80079a6:	608b      	str	r3, [r1, #8]
 80079a8:	4658      	mov	r0, fp
 80079aa:	f001 f8c7 	bl	8008b3c <_Bfree>
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	1e2b      	subs	r3, r5, #0
 80079b8:	bfaf      	iteee	ge
 80079ba:	2300      	movge	r3, #0
 80079bc:	2201      	movlt	r2, #1
 80079be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80079c2:	9303      	strlt	r3, [sp, #12]
 80079c4:	bfa8      	it	ge
 80079c6:	6033      	strge	r3, [r6, #0]
 80079c8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80079cc:	4b98      	ldr	r3, [pc, #608]	@ (8007c30 <_dtoa_r+0x2d0>)
 80079ce:	bfb8      	it	lt
 80079d0:	6032      	strlt	r2, [r6, #0]
 80079d2:	ea33 0308 	bics.w	r3, r3, r8
 80079d6:	d112      	bne.n	80079fe <_dtoa_r+0x9e>
 80079d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80079dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80079e4:	4323      	orrs	r3, r4
 80079e6:	f000 8550 	beq.w	800848a <_dtoa_r+0xb2a>
 80079ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80079ec:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007c34 <_dtoa_r+0x2d4>
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 8552 	beq.w	800849a <_dtoa_r+0xb3a>
 80079f6:	f10a 0303 	add.w	r3, sl, #3
 80079fa:	f000 bd4c 	b.w	8008496 <_dtoa_r+0xb36>
 80079fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a02:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007a06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f7f8 ffcb 	bl	80009a8 <__aeabi_dcmpeq>
 8007a12:	4607      	mov	r7, r0
 8007a14:	b158      	cbz	r0, 8007a2e <_dtoa_r+0xce>
 8007a16:	2301      	movs	r3, #1
 8007a18:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a1e:	b113      	cbz	r3, 8007a26 <_dtoa_r+0xc6>
 8007a20:	4b85      	ldr	r3, [pc, #532]	@ (8007c38 <_dtoa_r+0x2d8>)
 8007a22:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007c3c <_dtoa_r+0x2dc>
 8007a2a:	f000 bd36 	b.w	800849a <_dtoa_r+0xb3a>
 8007a2e:	ab14      	add	r3, sp, #80	@ 0x50
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	ab15      	add	r3, sp, #84	@ 0x54
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	4658      	mov	r0, fp
 8007a38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007a3c:	f001 fb66 	bl	800910c <__d2b>
 8007a40:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007a44:	4681      	mov	r9, r0
 8007a46:	2e00      	cmp	r6, #0
 8007a48:	d077      	beq.n	8007b3a <_dtoa_r+0x1da>
 8007a4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a50:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a58:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a5c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a60:	9712      	str	r7, [sp, #72]	@ 0x48
 8007a62:	4619      	mov	r1, r3
 8007a64:	2200      	movs	r2, #0
 8007a66:	4b76      	ldr	r3, [pc, #472]	@ (8007c40 <_dtoa_r+0x2e0>)
 8007a68:	f7f8 fb7e 	bl	8000168 <__aeabi_dsub>
 8007a6c:	a368      	add	r3, pc, #416	@ (adr r3, 8007c10 <_dtoa_r+0x2b0>)
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f7f8 fd31 	bl	80004d8 <__aeabi_dmul>
 8007a76:	a368      	add	r3, pc, #416	@ (adr r3, 8007c18 <_dtoa_r+0x2b8>)
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f7f8 fb76 	bl	800016c <__adddf3>
 8007a80:	4604      	mov	r4, r0
 8007a82:	4630      	mov	r0, r6
 8007a84:	460d      	mov	r5, r1
 8007a86:	f7f8 fcbd 	bl	8000404 <__aeabi_i2d>
 8007a8a:	a365      	add	r3, pc, #404	@ (adr r3, 8007c20 <_dtoa_r+0x2c0>)
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f7f8 fd22 	bl	80004d8 <__aeabi_dmul>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4620      	mov	r0, r4
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	f7f8 fb66 	bl	800016c <__adddf3>
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	460d      	mov	r5, r1
 8007aa4:	f7f8 ffc8 	bl	8000a38 <__aeabi_d2iz>
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4607      	mov	r7, r0
 8007aac:	2300      	movs	r3, #0
 8007aae:	4620      	mov	r0, r4
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	f7f8 ff83 	bl	80009bc <__aeabi_dcmplt>
 8007ab6:	b140      	cbz	r0, 8007aca <_dtoa_r+0x16a>
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f7f8 fca3 	bl	8000404 <__aeabi_i2d>
 8007abe:	4622      	mov	r2, r4
 8007ac0:	462b      	mov	r3, r5
 8007ac2:	f7f8 ff71 	bl	80009a8 <__aeabi_dcmpeq>
 8007ac6:	b900      	cbnz	r0, 8007aca <_dtoa_r+0x16a>
 8007ac8:	3f01      	subs	r7, #1
 8007aca:	2f16      	cmp	r7, #22
 8007acc:	d853      	bhi.n	8007b76 <_dtoa_r+0x216>
 8007ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8007c44 <_dtoa_r+0x2e4>)
 8007ad4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	f7f8 ff6e 	bl	80009bc <__aeabi_dcmplt>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d04a      	beq.n	8007b7a <_dtoa_r+0x21a>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	3f01      	subs	r7, #1
 8007ae8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007aea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007aec:	1b9b      	subs	r3, r3, r6
 8007aee:	1e5a      	subs	r2, r3, #1
 8007af0:	bf46      	itte	mi
 8007af2:	f1c3 0801 	rsbmi	r8, r3, #1
 8007af6:	2300      	movmi	r3, #0
 8007af8:	f04f 0800 	movpl.w	r8, #0
 8007afc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007afe:	bf48      	it	mi
 8007b00:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007b02:	2f00      	cmp	r7, #0
 8007b04:	db3b      	blt.n	8007b7e <_dtoa_r+0x21e>
 8007b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b08:	970e      	str	r7, [sp, #56]	@ 0x38
 8007b0a:	443b      	add	r3, r7
 8007b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b0e:	2300      	movs	r3, #0
 8007b10:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b14:	2b09      	cmp	r3, #9
 8007b16:	d866      	bhi.n	8007be6 <_dtoa_r+0x286>
 8007b18:	2b05      	cmp	r3, #5
 8007b1a:	bfc4      	itt	gt
 8007b1c:	3b04      	subgt	r3, #4
 8007b1e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007b20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b22:	bfc8      	it	gt
 8007b24:	2400      	movgt	r4, #0
 8007b26:	f1a3 0302 	sub.w	r3, r3, #2
 8007b2a:	bfd8      	it	le
 8007b2c:	2401      	movle	r4, #1
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d864      	bhi.n	8007bfc <_dtoa_r+0x29c>
 8007b32:	e8df f003 	tbb	[pc, r3]
 8007b36:	382b      	.short	0x382b
 8007b38:	5636      	.short	0x5636
 8007b3a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007b3e:	441e      	add	r6, r3
 8007b40:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	bfc1      	itttt	gt
 8007b48:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007b4c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007b50:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b54:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b58:	bfd6      	itet	le
 8007b5a:	f1c3 0320 	rsble	r3, r3, #32
 8007b5e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007b62:	fa04 f003 	lslle.w	r0, r4, r3
 8007b66:	f7f8 fc3d 	bl	80003e4 <__aeabi_ui2d>
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b70:	3e01      	subs	r6, #1
 8007b72:	9212      	str	r2, [sp, #72]	@ 0x48
 8007b74:	e775      	b.n	8007a62 <_dtoa_r+0x102>
 8007b76:	2301      	movs	r3, #1
 8007b78:	e7b6      	b.n	8007ae8 <_dtoa_r+0x188>
 8007b7a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007b7c:	e7b5      	b.n	8007aea <_dtoa_r+0x18a>
 8007b7e:	427b      	negs	r3, r7
 8007b80:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b82:	2300      	movs	r3, #0
 8007b84:	eba8 0807 	sub.w	r8, r8, r7
 8007b88:	930e      	str	r3, [sp, #56]	@ 0x38
 8007b8a:	e7c2      	b.n	8007b12 <_dtoa_r+0x1b2>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	dc35      	bgt.n	8007c02 <_dtoa_r+0x2a2>
 8007b96:	2301      	movs	r3, #1
 8007b98:	461a      	mov	r2, r3
 8007b9a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007b9e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007ba0:	e00b      	b.n	8007bba <_dtoa_r+0x25a>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e7f3      	b.n	8007b8e <_dtoa_r+0x22e>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007baa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bac:	18fb      	adds	r3, r7, r3
 8007bae:	9308      	str	r3, [sp, #32]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	9307      	str	r3, [sp, #28]
 8007bb6:	bfb8      	it	lt
 8007bb8:	2301      	movlt	r3, #1
 8007bba:	2100      	movs	r1, #0
 8007bbc:	2204      	movs	r2, #4
 8007bbe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007bc2:	f102 0514 	add.w	r5, r2, #20
 8007bc6:	429d      	cmp	r5, r3
 8007bc8:	d91f      	bls.n	8007c0a <_dtoa_r+0x2aa>
 8007bca:	6041      	str	r1, [r0, #4]
 8007bcc:	4658      	mov	r0, fp
 8007bce:	f000 ff75 	bl	8008abc <_Balloc>
 8007bd2:	4682      	mov	sl, r0
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d139      	bne.n	8007c4c <_dtoa_r+0x2ec>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	f240 11af 	movw	r1, #431	@ 0x1af
 8007bde:	4b1a      	ldr	r3, [pc, #104]	@ (8007c48 <_dtoa_r+0x2e8>)
 8007be0:	e6d2      	b.n	8007988 <_dtoa_r+0x28>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e7e0      	b.n	8007ba8 <_dtoa_r+0x248>
 8007be6:	2401      	movs	r4, #1
 8007be8:	2300      	movs	r3, #0
 8007bea:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007bec:	9320      	str	r3, [sp, #128]	@ 0x80
 8007bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007bf8:	2312      	movs	r3, #18
 8007bfa:	e7d0      	b.n	8007b9e <_dtoa_r+0x23e>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c00:	e7f5      	b.n	8007bee <_dtoa_r+0x28e>
 8007c02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c04:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c08:	e7d7      	b.n	8007bba <_dtoa_r+0x25a>
 8007c0a:	3101      	adds	r1, #1
 8007c0c:	0052      	lsls	r2, r2, #1
 8007c0e:	e7d8      	b.n	8007bc2 <_dtoa_r+0x262>
 8007c10:	636f4361 	.word	0x636f4361
 8007c14:	3fd287a7 	.word	0x3fd287a7
 8007c18:	8b60c8b3 	.word	0x8b60c8b3
 8007c1c:	3fc68a28 	.word	0x3fc68a28
 8007c20:	509f79fb 	.word	0x509f79fb
 8007c24:	3fd34413 	.word	0x3fd34413
 8007c28:	0800995f 	.word	0x0800995f
 8007c2c:	08009976 	.word	0x08009976
 8007c30:	7ff00000 	.word	0x7ff00000
 8007c34:	0800995b 	.word	0x0800995b
 8007c38:	0800992f 	.word	0x0800992f
 8007c3c:	0800992e 	.word	0x0800992e
 8007c40:	3ff80000 	.word	0x3ff80000
 8007c44:	08009a80 	.word	0x08009a80
 8007c48:	080099ce 	.word	0x080099ce
 8007c4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c50:	6018      	str	r0, [r3, #0]
 8007c52:	9b07      	ldr	r3, [sp, #28]
 8007c54:	2b0e      	cmp	r3, #14
 8007c56:	f200 80a4 	bhi.w	8007da2 <_dtoa_r+0x442>
 8007c5a:	2c00      	cmp	r4, #0
 8007c5c:	f000 80a1 	beq.w	8007da2 <_dtoa_r+0x442>
 8007c60:	2f00      	cmp	r7, #0
 8007c62:	dd33      	ble.n	8007ccc <_dtoa_r+0x36c>
 8007c64:	4b86      	ldr	r3, [pc, #536]	@ (8007e80 <_dtoa_r+0x520>)
 8007c66:	f007 020f 	and.w	r2, r7, #15
 8007c6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c6e:	05f8      	lsls	r0, r7, #23
 8007c70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c74:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c7c:	d516      	bpl.n	8007cac <_dtoa_r+0x34c>
 8007c7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c82:	4b80      	ldr	r3, [pc, #512]	@ (8007e84 <_dtoa_r+0x524>)
 8007c84:	2603      	movs	r6, #3
 8007c86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c8a:	f7f8 fd4f 	bl	800072c <__aeabi_ddiv>
 8007c8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c92:	f004 040f 	and.w	r4, r4, #15
 8007c96:	4d7b      	ldr	r5, [pc, #492]	@ (8007e84 <_dtoa_r+0x524>)
 8007c98:	b954      	cbnz	r4, 8007cb0 <_dtoa_r+0x350>
 8007c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ca2:	f7f8 fd43 	bl	800072c <__aeabi_ddiv>
 8007ca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007caa:	e028      	b.n	8007cfe <_dtoa_r+0x39e>
 8007cac:	2602      	movs	r6, #2
 8007cae:	e7f2      	b.n	8007c96 <_dtoa_r+0x336>
 8007cb0:	07e1      	lsls	r1, r4, #31
 8007cb2:	d508      	bpl.n	8007cc6 <_dtoa_r+0x366>
 8007cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cbc:	f7f8 fc0c 	bl	80004d8 <__aeabi_dmul>
 8007cc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cc4:	3601      	adds	r6, #1
 8007cc6:	1064      	asrs	r4, r4, #1
 8007cc8:	3508      	adds	r5, #8
 8007cca:	e7e5      	b.n	8007c98 <_dtoa_r+0x338>
 8007ccc:	f000 80d2 	beq.w	8007e74 <_dtoa_r+0x514>
 8007cd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cd4:	427c      	negs	r4, r7
 8007cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8007e80 <_dtoa_r+0x520>)
 8007cd8:	f004 020f 	and.w	r2, r4, #15
 8007cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f7f8 fbf8 	bl	80004d8 <__aeabi_dmul>
 8007ce8:	2602      	movs	r6, #2
 8007cea:	2300      	movs	r3, #0
 8007cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cf0:	4d64      	ldr	r5, [pc, #400]	@ (8007e84 <_dtoa_r+0x524>)
 8007cf2:	1124      	asrs	r4, r4, #4
 8007cf4:	2c00      	cmp	r4, #0
 8007cf6:	f040 80b2 	bne.w	8007e5e <_dtoa_r+0x4fe>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1d3      	bne.n	8007ca6 <_dtoa_r+0x346>
 8007cfe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 80b7 	beq.w	8007e78 <_dtoa_r+0x518>
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	4629      	mov	r1, r5
 8007d10:	4b5d      	ldr	r3, [pc, #372]	@ (8007e88 <_dtoa_r+0x528>)
 8007d12:	f7f8 fe53 	bl	80009bc <__aeabi_dcmplt>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	f000 80ae 	beq.w	8007e78 <_dtoa_r+0x518>
 8007d1c:	9b07      	ldr	r3, [sp, #28]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 80aa 	beq.w	8007e78 <_dtoa_r+0x518>
 8007d24:	9b08      	ldr	r3, [sp, #32]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	dd37      	ble.n	8007d9a <_dtoa_r+0x43a>
 8007d2a:	1e7b      	subs	r3, r7, #1
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	9304      	str	r3, [sp, #16]
 8007d30:	2200      	movs	r2, #0
 8007d32:	4629      	mov	r1, r5
 8007d34:	4b55      	ldr	r3, [pc, #340]	@ (8007e8c <_dtoa_r+0x52c>)
 8007d36:	f7f8 fbcf 	bl	80004d8 <__aeabi_dmul>
 8007d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d3e:	9c08      	ldr	r4, [sp, #32]
 8007d40:	3601      	adds	r6, #1
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7f8 fb5e 	bl	8000404 <__aeabi_i2d>
 8007d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d4c:	f7f8 fbc4 	bl	80004d8 <__aeabi_dmul>
 8007d50:	2200      	movs	r2, #0
 8007d52:	4b4f      	ldr	r3, [pc, #316]	@ (8007e90 <_dtoa_r+0x530>)
 8007d54:	f7f8 fa0a 	bl	800016c <__adddf3>
 8007d58:	4605      	mov	r5, r0
 8007d5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d5e:	2c00      	cmp	r4, #0
 8007d60:	f040 809a 	bne.w	8007e98 <_dtoa_r+0x538>
 8007d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8007e94 <_dtoa_r+0x534>)
 8007d6c:	f7f8 f9fc 	bl	8000168 <__aeabi_dsub>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d78:	462a      	mov	r2, r5
 8007d7a:	4633      	mov	r3, r6
 8007d7c:	f7f8 fe3c 	bl	80009f8 <__aeabi_dcmpgt>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	f040 828e 	bne.w	80082a2 <_dtoa_r+0x942>
 8007d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d8a:	462a      	mov	r2, r5
 8007d8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d90:	f7f8 fe14 	bl	80009bc <__aeabi_dcmplt>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	f040 8127 	bne.w	8007fe8 <_dtoa_r+0x688>
 8007d9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007da2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f2c0 8163 	blt.w	8008070 <_dtoa_r+0x710>
 8007daa:	2f0e      	cmp	r7, #14
 8007dac:	f300 8160 	bgt.w	8008070 <_dtoa_r+0x710>
 8007db0:	4b33      	ldr	r3, [pc, #204]	@ (8007e80 <_dtoa_r+0x520>)
 8007db2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007db6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007dbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	da03      	bge.n	8007dcc <_dtoa_r+0x46c>
 8007dc4:	9b07      	ldr	r3, [sp, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f340 8100 	ble.w	8007fcc <_dtoa_r+0x66c>
 8007dcc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007dd0:	4656      	mov	r6, sl
 8007dd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	4629      	mov	r1, r5
 8007dda:	f7f8 fca7 	bl	800072c <__aeabi_ddiv>
 8007dde:	f7f8 fe2b 	bl	8000a38 <__aeabi_d2iz>
 8007de2:	4680      	mov	r8, r0
 8007de4:	f7f8 fb0e 	bl	8000404 <__aeabi_i2d>
 8007de8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dec:	f7f8 fb74 	bl	80004d8 <__aeabi_dmul>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4620      	mov	r0, r4
 8007df6:	4629      	mov	r1, r5
 8007df8:	f7f8 f9b6 	bl	8000168 <__aeabi_dsub>
 8007dfc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e00:	9d07      	ldr	r5, [sp, #28]
 8007e02:	f806 4b01 	strb.w	r4, [r6], #1
 8007e06:	eba6 040a 	sub.w	r4, r6, sl
 8007e0a:	42a5      	cmp	r5, r4
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	f040 8116 	bne.w	8008040 <_dtoa_r+0x6e0>
 8007e14:	f7f8 f9aa 	bl	800016c <__adddf3>
 8007e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	460d      	mov	r5, r1
 8007e20:	f7f8 fdea 	bl	80009f8 <__aeabi_dcmpgt>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	f040 80f8 	bne.w	800801a <_dtoa_r+0x6ba>
 8007e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e2e:	4620      	mov	r0, r4
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7f8 fdb9 	bl	80009a8 <__aeabi_dcmpeq>
 8007e36:	b118      	cbz	r0, 8007e40 <_dtoa_r+0x4e0>
 8007e38:	f018 0f01 	tst.w	r8, #1
 8007e3c:	f040 80ed 	bne.w	800801a <_dtoa_r+0x6ba>
 8007e40:	4649      	mov	r1, r9
 8007e42:	4658      	mov	r0, fp
 8007e44:	f000 fe7a 	bl	8008b3c <_Bfree>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	7033      	strb	r3, [r6, #0]
 8007e4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007e4e:	3701      	adds	r7, #1
 8007e50:	601f      	str	r7, [r3, #0]
 8007e52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 8320 	beq.w	800849a <_dtoa_r+0xb3a>
 8007e5a:	601e      	str	r6, [r3, #0]
 8007e5c:	e31d      	b.n	800849a <_dtoa_r+0xb3a>
 8007e5e:	07e2      	lsls	r2, r4, #31
 8007e60:	d505      	bpl.n	8007e6e <_dtoa_r+0x50e>
 8007e62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e66:	f7f8 fb37 	bl	80004d8 <__aeabi_dmul>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	3601      	adds	r6, #1
 8007e6e:	1064      	asrs	r4, r4, #1
 8007e70:	3508      	adds	r5, #8
 8007e72:	e73f      	b.n	8007cf4 <_dtoa_r+0x394>
 8007e74:	2602      	movs	r6, #2
 8007e76:	e742      	b.n	8007cfe <_dtoa_r+0x39e>
 8007e78:	9c07      	ldr	r4, [sp, #28]
 8007e7a:	9704      	str	r7, [sp, #16]
 8007e7c:	e761      	b.n	8007d42 <_dtoa_r+0x3e2>
 8007e7e:	bf00      	nop
 8007e80:	08009a80 	.word	0x08009a80
 8007e84:	08009a58 	.word	0x08009a58
 8007e88:	3ff00000 	.word	0x3ff00000
 8007e8c:	40240000 	.word	0x40240000
 8007e90:	401c0000 	.word	0x401c0000
 8007e94:	40140000 	.word	0x40140000
 8007e98:	4b70      	ldr	r3, [pc, #448]	@ (800805c <_dtoa_r+0x6fc>)
 8007e9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ea0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ea4:	4454      	add	r4, sl
 8007ea6:	2900      	cmp	r1, #0
 8007ea8:	d045      	beq.n	8007f36 <_dtoa_r+0x5d6>
 8007eaa:	2000      	movs	r0, #0
 8007eac:	496c      	ldr	r1, [pc, #432]	@ (8008060 <_dtoa_r+0x700>)
 8007eae:	f7f8 fc3d 	bl	800072c <__aeabi_ddiv>
 8007eb2:	4633      	mov	r3, r6
 8007eb4:	462a      	mov	r2, r5
 8007eb6:	f7f8 f957 	bl	8000168 <__aeabi_dsub>
 8007eba:	4656      	mov	r6, sl
 8007ebc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ec4:	f7f8 fdb8 	bl	8000a38 <__aeabi_d2iz>
 8007ec8:	4605      	mov	r5, r0
 8007eca:	f7f8 fa9b 	bl	8000404 <__aeabi_i2d>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ed6:	f7f8 f947 	bl	8000168 <__aeabi_dsub>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	3530      	adds	r5, #48	@ 0x30
 8007ee0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ee4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ee8:	f806 5b01 	strb.w	r5, [r6], #1
 8007eec:	f7f8 fd66 	bl	80009bc <__aeabi_dcmplt>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d163      	bne.n	8007fbc <_dtoa_r+0x65c>
 8007ef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ef8:	2000      	movs	r0, #0
 8007efa:	495a      	ldr	r1, [pc, #360]	@ (8008064 <_dtoa_r+0x704>)
 8007efc:	f7f8 f934 	bl	8000168 <__aeabi_dsub>
 8007f00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f04:	f7f8 fd5a 	bl	80009bc <__aeabi_dcmplt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f040 8087 	bne.w	800801c <_dtoa_r+0x6bc>
 8007f0e:	42a6      	cmp	r6, r4
 8007f10:	f43f af43 	beq.w	8007d9a <_dtoa_r+0x43a>
 8007f14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4b53      	ldr	r3, [pc, #332]	@ (8008068 <_dtoa_r+0x708>)
 8007f1c:	f7f8 fadc 	bl	80004d8 <__aeabi_dmul>
 8007f20:	2200      	movs	r2, #0
 8007f22:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8008068 <_dtoa_r+0x708>)
 8007f2c:	f7f8 fad4 	bl	80004d8 <__aeabi_dmul>
 8007f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f34:	e7c4      	b.n	8007ec0 <_dtoa_r+0x560>
 8007f36:	4631      	mov	r1, r6
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f7f8 facd 	bl	80004d8 <__aeabi_dmul>
 8007f3e:	4656      	mov	r6, sl
 8007f40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f44:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f4a:	f7f8 fd75 	bl	8000a38 <__aeabi_d2iz>
 8007f4e:	4605      	mov	r5, r0
 8007f50:	f7f8 fa58 	bl	8000404 <__aeabi_i2d>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f5c:	f7f8 f904 	bl	8000168 <__aeabi_dsub>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	3530      	adds	r5, #48	@ 0x30
 8007f66:	f806 5b01 	strb.w	r5, [r6], #1
 8007f6a:	42a6      	cmp	r6, r4
 8007f6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f70:	f04f 0200 	mov.w	r2, #0
 8007f74:	d124      	bne.n	8007fc0 <_dtoa_r+0x660>
 8007f76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f7a:	4b39      	ldr	r3, [pc, #228]	@ (8008060 <_dtoa_r+0x700>)
 8007f7c:	f7f8 f8f6 	bl	800016c <__adddf3>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f88:	f7f8 fd36 	bl	80009f8 <__aeabi_dcmpgt>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d145      	bne.n	800801c <_dtoa_r+0x6bc>
 8007f90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f94:	2000      	movs	r0, #0
 8007f96:	4932      	ldr	r1, [pc, #200]	@ (8008060 <_dtoa_r+0x700>)
 8007f98:	f7f8 f8e6 	bl	8000168 <__aeabi_dsub>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa4:	f7f8 fd0a 	bl	80009bc <__aeabi_dcmplt>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	f43f aef6 	beq.w	8007d9a <_dtoa_r+0x43a>
 8007fae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007fb0:	1e73      	subs	r3, r6, #1
 8007fb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fb8:	2b30      	cmp	r3, #48	@ 0x30
 8007fba:	d0f8      	beq.n	8007fae <_dtoa_r+0x64e>
 8007fbc:	9f04      	ldr	r7, [sp, #16]
 8007fbe:	e73f      	b.n	8007e40 <_dtoa_r+0x4e0>
 8007fc0:	4b29      	ldr	r3, [pc, #164]	@ (8008068 <_dtoa_r+0x708>)
 8007fc2:	f7f8 fa89 	bl	80004d8 <__aeabi_dmul>
 8007fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fca:	e7bc      	b.n	8007f46 <_dtoa_r+0x5e6>
 8007fcc:	d10c      	bne.n	8007fe8 <_dtoa_r+0x688>
 8007fce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	4b25      	ldr	r3, [pc, #148]	@ (800806c <_dtoa_r+0x70c>)
 8007fd6:	f7f8 fa7f 	bl	80004d8 <__aeabi_dmul>
 8007fda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fde:	f7f8 fd01 	bl	80009e4 <__aeabi_dcmpge>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	f000 815b 	beq.w	800829e <_dtoa_r+0x93e>
 8007fe8:	2400      	movs	r4, #0
 8007fea:	4625      	mov	r5, r4
 8007fec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fee:	4656      	mov	r6, sl
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	9304      	str	r3, [sp, #16]
 8007ff4:	2700      	movs	r7, #0
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4658      	mov	r0, fp
 8007ffa:	f000 fd9f 	bl	8008b3c <_Bfree>
 8007ffe:	2d00      	cmp	r5, #0
 8008000:	d0dc      	beq.n	8007fbc <_dtoa_r+0x65c>
 8008002:	b12f      	cbz	r7, 8008010 <_dtoa_r+0x6b0>
 8008004:	42af      	cmp	r7, r5
 8008006:	d003      	beq.n	8008010 <_dtoa_r+0x6b0>
 8008008:	4639      	mov	r1, r7
 800800a:	4658      	mov	r0, fp
 800800c:	f000 fd96 	bl	8008b3c <_Bfree>
 8008010:	4629      	mov	r1, r5
 8008012:	4658      	mov	r0, fp
 8008014:	f000 fd92 	bl	8008b3c <_Bfree>
 8008018:	e7d0      	b.n	8007fbc <_dtoa_r+0x65c>
 800801a:	9704      	str	r7, [sp, #16]
 800801c:	4633      	mov	r3, r6
 800801e:	461e      	mov	r6, r3
 8008020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008024:	2a39      	cmp	r2, #57	@ 0x39
 8008026:	d107      	bne.n	8008038 <_dtoa_r+0x6d8>
 8008028:	459a      	cmp	sl, r3
 800802a:	d1f8      	bne.n	800801e <_dtoa_r+0x6be>
 800802c:	9a04      	ldr	r2, [sp, #16]
 800802e:	3201      	adds	r2, #1
 8008030:	9204      	str	r2, [sp, #16]
 8008032:	2230      	movs	r2, #48	@ 0x30
 8008034:	f88a 2000 	strb.w	r2, [sl]
 8008038:	781a      	ldrb	r2, [r3, #0]
 800803a:	3201      	adds	r2, #1
 800803c:	701a      	strb	r2, [r3, #0]
 800803e:	e7bd      	b.n	8007fbc <_dtoa_r+0x65c>
 8008040:	2200      	movs	r2, #0
 8008042:	4b09      	ldr	r3, [pc, #36]	@ (8008068 <_dtoa_r+0x708>)
 8008044:	f7f8 fa48 	bl	80004d8 <__aeabi_dmul>
 8008048:	2200      	movs	r2, #0
 800804a:	2300      	movs	r3, #0
 800804c:	4604      	mov	r4, r0
 800804e:	460d      	mov	r5, r1
 8008050:	f7f8 fcaa 	bl	80009a8 <__aeabi_dcmpeq>
 8008054:	2800      	cmp	r0, #0
 8008056:	f43f aebc 	beq.w	8007dd2 <_dtoa_r+0x472>
 800805a:	e6f1      	b.n	8007e40 <_dtoa_r+0x4e0>
 800805c:	08009a80 	.word	0x08009a80
 8008060:	3fe00000 	.word	0x3fe00000
 8008064:	3ff00000 	.word	0x3ff00000
 8008068:	40240000 	.word	0x40240000
 800806c:	40140000 	.word	0x40140000
 8008070:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008072:	2a00      	cmp	r2, #0
 8008074:	f000 80db 	beq.w	800822e <_dtoa_r+0x8ce>
 8008078:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800807a:	2a01      	cmp	r2, #1
 800807c:	f300 80bf 	bgt.w	80081fe <_dtoa_r+0x89e>
 8008080:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008082:	2a00      	cmp	r2, #0
 8008084:	f000 80b7 	beq.w	80081f6 <_dtoa_r+0x896>
 8008088:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800808c:	4646      	mov	r6, r8
 800808e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008092:	2101      	movs	r1, #1
 8008094:	441a      	add	r2, r3
 8008096:	4658      	mov	r0, fp
 8008098:	4498      	add	r8, r3
 800809a:	9209      	str	r2, [sp, #36]	@ 0x24
 800809c:	f000 fe02 	bl	8008ca4 <__i2b>
 80080a0:	4605      	mov	r5, r0
 80080a2:	b15e      	cbz	r6, 80080bc <_dtoa_r+0x75c>
 80080a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	dd08      	ble.n	80080bc <_dtoa_r+0x75c>
 80080aa:	42b3      	cmp	r3, r6
 80080ac:	bfa8      	it	ge
 80080ae:	4633      	movge	r3, r6
 80080b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080b2:	eba8 0803 	sub.w	r8, r8, r3
 80080b6:	1af6      	subs	r6, r6, r3
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80080bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080be:	b1f3      	cbz	r3, 80080fe <_dtoa_r+0x79e>
 80080c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 80b7 	beq.w	8008236 <_dtoa_r+0x8d6>
 80080c8:	b18c      	cbz	r4, 80080ee <_dtoa_r+0x78e>
 80080ca:	4629      	mov	r1, r5
 80080cc:	4622      	mov	r2, r4
 80080ce:	4658      	mov	r0, fp
 80080d0:	f000 fea6 	bl	8008e20 <__pow5mult>
 80080d4:	464a      	mov	r2, r9
 80080d6:	4601      	mov	r1, r0
 80080d8:	4605      	mov	r5, r0
 80080da:	4658      	mov	r0, fp
 80080dc:	f000 fdf8 	bl	8008cd0 <__multiply>
 80080e0:	4649      	mov	r1, r9
 80080e2:	9004      	str	r0, [sp, #16]
 80080e4:	4658      	mov	r0, fp
 80080e6:	f000 fd29 	bl	8008b3c <_Bfree>
 80080ea:	9b04      	ldr	r3, [sp, #16]
 80080ec:	4699      	mov	r9, r3
 80080ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080f0:	1b1a      	subs	r2, r3, r4
 80080f2:	d004      	beq.n	80080fe <_dtoa_r+0x79e>
 80080f4:	4649      	mov	r1, r9
 80080f6:	4658      	mov	r0, fp
 80080f8:	f000 fe92 	bl	8008e20 <__pow5mult>
 80080fc:	4681      	mov	r9, r0
 80080fe:	2101      	movs	r1, #1
 8008100:	4658      	mov	r0, fp
 8008102:	f000 fdcf 	bl	8008ca4 <__i2b>
 8008106:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008108:	4604      	mov	r4, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 81c9 	beq.w	80084a2 <_dtoa_r+0xb42>
 8008110:	461a      	mov	r2, r3
 8008112:	4601      	mov	r1, r0
 8008114:	4658      	mov	r0, fp
 8008116:	f000 fe83 	bl	8008e20 <__pow5mult>
 800811a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800811c:	4604      	mov	r4, r0
 800811e:	2b01      	cmp	r3, #1
 8008120:	f300 808f 	bgt.w	8008242 <_dtoa_r+0x8e2>
 8008124:	9b02      	ldr	r3, [sp, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	f040 8087 	bne.w	800823a <_dtoa_r+0x8da>
 800812c:	9b03      	ldr	r3, [sp, #12]
 800812e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008132:	2b00      	cmp	r3, #0
 8008134:	f040 8083 	bne.w	800823e <_dtoa_r+0x8de>
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800813e:	0d1b      	lsrs	r3, r3, #20
 8008140:	051b      	lsls	r3, r3, #20
 8008142:	b12b      	cbz	r3, 8008150 <_dtoa_r+0x7f0>
 8008144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008146:	f108 0801 	add.w	r8, r8, #1
 800814a:	3301      	adds	r3, #1
 800814c:	9309      	str	r3, [sp, #36]	@ 0x24
 800814e:	2301      	movs	r3, #1
 8008150:	930a      	str	r3, [sp, #40]	@ 0x28
 8008152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 81aa 	beq.w	80084ae <_dtoa_r+0xb4e>
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008160:	6918      	ldr	r0, [r3, #16]
 8008162:	f000 fd53 	bl	8008c0c <__hi0bits>
 8008166:	f1c0 0020 	rsb	r0, r0, #32
 800816a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800816c:	4418      	add	r0, r3
 800816e:	f010 001f 	ands.w	r0, r0, #31
 8008172:	d071      	beq.n	8008258 <_dtoa_r+0x8f8>
 8008174:	f1c0 0320 	rsb	r3, r0, #32
 8008178:	2b04      	cmp	r3, #4
 800817a:	dd65      	ble.n	8008248 <_dtoa_r+0x8e8>
 800817c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817e:	f1c0 001c 	rsb	r0, r0, #28
 8008182:	4403      	add	r3, r0
 8008184:	4480      	add	r8, r0
 8008186:	4406      	add	r6, r0
 8008188:	9309      	str	r3, [sp, #36]	@ 0x24
 800818a:	f1b8 0f00 	cmp.w	r8, #0
 800818e:	dd05      	ble.n	800819c <_dtoa_r+0x83c>
 8008190:	4649      	mov	r1, r9
 8008192:	4642      	mov	r2, r8
 8008194:	4658      	mov	r0, fp
 8008196:	f000 fe9d 	bl	8008ed4 <__lshift>
 800819a:	4681      	mov	r9, r0
 800819c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800819e:	2b00      	cmp	r3, #0
 80081a0:	dd05      	ble.n	80081ae <_dtoa_r+0x84e>
 80081a2:	4621      	mov	r1, r4
 80081a4:	461a      	mov	r2, r3
 80081a6:	4658      	mov	r0, fp
 80081a8:	f000 fe94 	bl	8008ed4 <__lshift>
 80081ac:	4604      	mov	r4, r0
 80081ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d053      	beq.n	800825c <_dtoa_r+0x8fc>
 80081b4:	4621      	mov	r1, r4
 80081b6:	4648      	mov	r0, r9
 80081b8:	f000 fef8 	bl	8008fac <__mcmp>
 80081bc:	2800      	cmp	r0, #0
 80081be:	da4d      	bge.n	800825c <_dtoa_r+0x8fc>
 80081c0:	1e7b      	subs	r3, r7, #1
 80081c2:	4649      	mov	r1, r9
 80081c4:	9304      	str	r3, [sp, #16]
 80081c6:	220a      	movs	r2, #10
 80081c8:	2300      	movs	r3, #0
 80081ca:	4658      	mov	r0, fp
 80081cc:	f000 fcd8 	bl	8008b80 <__multadd>
 80081d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081d2:	4681      	mov	r9, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 816c 	beq.w	80084b2 <_dtoa_r+0xb52>
 80081da:	2300      	movs	r3, #0
 80081dc:	4629      	mov	r1, r5
 80081de:	220a      	movs	r2, #10
 80081e0:	4658      	mov	r0, fp
 80081e2:	f000 fccd 	bl	8008b80 <__multadd>
 80081e6:	9b08      	ldr	r3, [sp, #32]
 80081e8:	4605      	mov	r5, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	dc61      	bgt.n	80082b2 <_dtoa_r+0x952>
 80081ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	dc3b      	bgt.n	800826c <_dtoa_r+0x90c>
 80081f4:	e05d      	b.n	80082b2 <_dtoa_r+0x952>
 80081f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081f8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80081fc:	e746      	b.n	800808c <_dtoa_r+0x72c>
 80081fe:	9b07      	ldr	r3, [sp, #28]
 8008200:	1e5c      	subs	r4, r3, #1
 8008202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008204:	42a3      	cmp	r3, r4
 8008206:	bfbf      	itttt	lt
 8008208:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800820a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800820c:	1ae3      	sublt	r3, r4, r3
 800820e:	18d2      	addlt	r2, r2, r3
 8008210:	bfa8      	it	ge
 8008212:	1b1c      	subge	r4, r3, r4
 8008214:	9b07      	ldr	r3, [sp, #28]
 8008216:	bfbe      	ittt	lt
 8008218:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800821a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800821c:	2400      	movlt	r4, #0
 800821e:	2b00      	cmp	r3, #0
 8008220:	bfb5      	itete	lt
 8008222:	eba8 0603 	sublt.w	r6, r8, r3
 8008226:	4646      	movge	r6, r8
 8008228:	2300      	movlt	r3, #0
 800822a:	9b07      	ldrge	r3, [sp, #28]
 800822c:	e730      	b.n	8008090 <_dtoa_r+0x730>
 800822e:	4646      	mov	r6, r8
 8008230:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008232:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008234:	e735      	b.n	80080a2 <_dtoa_r+0x742>
 8008236:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008238:	e75c      	b.n	80080f4 <_dtoa_r+0x794>
 800823a:	2300      	movs	r3, #0
 800823c:	e788      	b.n	8008150 <_dtoa_r+0x7f0>
 800823e:	9b02      	ldr	r3, [sp, #8]
 8008240:	e786      	b.n	8008150 <_dtoa_r+0x7f0>
 8008242:	2300      	movs	r3, #0
 8008244:	930a      	str	r3, [sp, #40]	@ 0x28
 8008246:	e788      	b.n	800815a <_dtoa_r+0x7fa>
 8008248:	d09f      	beq.n	800818a <_dtoa_r+0x82a>
 800824a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800824c:	331c      	adds	r3, #28
 800824e:	441a      	add	r2, r3
 8008250:	4498      	add	r8, r3
 8008252:	441e      	add	r6, r3
 8008254:	9209      	str	r2, [sp, #36]	@ 0x24
 8008256:	e798      	b.n	800818a <_dtoa_r+0x82a>
 8008258:	4603      	mov	r3, r0
 800825a:	e7f6      	b.n	800824a <_dtoa_r+0x8ea>
 800825c:	9b07      	ldr	r3, [sp, #28]
 800825e:	9704      	str	r7, [sp, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	dc20      	bgt.n	80082a6 <_dtoa_r+0x946>
 8008264:	9308      	str	r3, [sp, #32]
 8008266:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008268:	2b02      	cmp	r3, #2
 800826a:	dd1e      	ble.n	80082aa <_dtoa_r+0x94a>
 800826c:	9b08      	ldr	r3, [sp, #32]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f47f aebc 	bne.w	8007fec <_dtoa_r+0x68c>
 8008274:	4621      	mov	r1, r4
 8008276:	2205      	movs	r2, #5
 8008278:	4658      	mov	r0, fp
 800827a:	f000 fc81 	bl	8008b80 <__multadd>
 800827e:	4601      	mov	r1, r0
 8008280:	4604      	mov	r4, r0
 8008282:	4648      	mov	r0, r9
 8008284:	f000 fe92 	bl	8008fac <__mcmp>
 8008288:	2800      	cmp	r0, #0
 800828a:	f77f aeaf 	ble.w	8007fec <_dtoa_r+0x68c>
 800828e:	2331      	movs	r3, #49	@ 0x31
 8008290:	4656      	mov	r6, sl
 8008292:	f806 3b01 	strb.w	r3, [r6], #1
 8008296:	9b04      	ldr	r3, [sp, #16]
 8008298:	3301      	adds	r3, #1
 800829a:	9304      	str	r3, [sp, #16]
 800829c:	e6aa      	b.n	8007ff4 <_dtoa_r+0x694>
 800829e:	9c07      	ldr	r4, [sp, #28]
 80082a0:	9704      	str	r7, [sp, #16]
 80082a2:	4625      	mov	r5, r4
 80082a4:	e7f3      	b.n	800828e <_dtoa_r+0x92e>
 80082a6:	9b07      	ldr	r3, [sp, #28]
 80082a8:	9308      	str	r3, [sp, #32]
 80082aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8104 	beq.w	80084ba <_dtoa_r+0xb5a>
 80082b2:	2e00      	cmp	r6, #0
 80082b4:	dd05      	ble.n	80082c2 <_dtoa_r+0x962>
 80082b6:	4629      	mov	r1, r5
 80082b8:	4632      	mov	r2, r6
 80082ba:	4658      	mov	r0, fp
 80082bc:	f000 fe0a 	bl	8008ed4 <__lshift>
 80082c0:	4605      	mov	r5, r0
 80082c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d05a      	beq.n	800837e <_dtoa_r+0xa1e>
 80082c8:	4658      	mov	r0, fp
 80082ca:	6869      	ldr	r1, [r5, #4]
 80082cc:	f000 fbf6 	bl	8008abc <_Balloc>
 80082d0:	4606      	mov	r6, r0
 80082d2:	b928      	cbnz	r0, 80082e0 <_dtoa_r+0x980>
 80082d4:	4602      	mov	r2, r0
 80082d6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80082da:	4b83      	ldr	r3, [pc, #524]	@ (80084e8 <_dtoa_r+0xb88>)
 80082dc:	f7ff bb54 	b.w	8007988 <_dtoa_r+0x28>
 80082e0:	692a      	ldr	r2, [r5, #16]
 80082e2:	f105 010c 	add.w	r1, r5, #12
 80082e6:	3202      	adds	r2, #2
 80082e8:	0092      	lsls	r2, r2, #2
 80082ea:	300c      	adds	r0, #12
 80082ec:	f7ff faa1 	bl	8007832 <memcpy>
 80082f0:	2201      	movs	r2, #1
 80082f2:	4631      	mov	r1, r6
 80082f4:	4658      	mov	r0, fp
 80082f6:	f000 fded 	bl	8008ed4 <__lshift>
 80082fa:	462f      	mov	r7, r5
 80082fc:	4605      	mov	r5, r0
 80082fe:	f10a 0301 	add.w	r3, sl, #1
 8008302:	9307      	str	r3, [sp, #28]
 8008304:	9b08      	ldr	r3, [sp, #32]
 8008306:	4453      	add	r3, sl
 8008308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800830a:	9b02      	ldr	r3, [sp, #8]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	930a      	str	r3, [sp, #40]	@ 0x28
 8008312:	9b07      	ldr	r3, [sp, #28]
 8008314:	4621      	mov	r1, r4
 8008316:	3b01      	subs	r3, #1
 8008318:	4648      	mov	r0, r9
 800831a:	9302      	str	r3, [sp, #8]
 800831c:	f7ff fa97 	bl	800784e <quorem>
 8008320:	4639      	mov	r1, r7
 8008322:	9008      	str	r0, [sp, #32]
 8008324:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008328:	4648      	mov	r0, r9
 800832a:	f000 fe3f 	bl	8008fac <__mcmp>
 800832e:	462a      	mov	r2, r5
 8008330:	9009      	str	r0, [sp, #36]	@ 0x24
 8008332:	4621      	mov	r1, r4
 8008334:	4658      	mov	r0, fp
 8008336:	f000 fe55 	bl	8008fe4 <__mdiff>
 800833a:	68c2      	ldr	r2, [r0, #12]
 800833c:	4606      	mov	r6, r0
 800833e:	bb02      	cbnz	r2, 8008382 <_dtoa_r+0xa22>
 8008340:	4601      	mov	r1, r0
 8008342:	4648      	mov	r0, r9
 8008344:	f000 fe32 	bl	8008fac <__mcmp>
 8008348:	4602      	mov	r2, r0
 800834a:	4631      	mov	r1, r6
 800834c:	4658      	mov	r0, fp
 800834e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008350:	f000 fbf4 	bl	8008b3c <_Bfree>
 8008354:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008356:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008358:	9e07      	ldr	r6, [sp, #28]
 800835a:	ea43 0102 	orr.w	r1, r3, r2
 800835e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008360:	4319      	orrs	r1, r3
 8008362:	d110      	bne.n	8008386 <_dtoa_r+0xa26>
 8008364:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008368:	d029      	beq.n	80083be <_dtoa_r+0xa5e>
 800836a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800836c:	2b00      	cmp	r3, #0
 800836e:	dd02      	ble.n	8008376 <_dtoa_r+0xa16>
 8008370:	9b08      	ldr	r3, [sp, #32]
 8008372:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008376:	9b02      	ldr	r3, [sp, #8]
 8008378:	f883 8000 	strb.w	r8, [r3]
 800837c:	e63b      	b.n	8007ff6 <_dtoa_r+0x696>
 800837e:	4628      	mov	r0, r5
 8008380:	e7bb      	b.n	80082fa <_dtoa_r+0x99a>
 8008382:	2201      	movs	r2, #1
 8008384:	e7e1      	b.n	800834a <_dtoa_r+0x9ea>
 8008386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008388:	2b00      	cmp	r3, #0
 800838a:	db04      	blt.n	8008396 <_dtoa_r+0xa36>
 800838c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800838e:	430b      	orrs	r3, r1
 8008390:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008392:	430b      	orrs	r3, r1
 8008394:	d120      	bne.n	80083d8 <_dtoa_r+0xa78>
 8008396:	2a00      	cmp	r2, #0
 8008398:	dded      	ble.n	8008376 <_dtoa_r+0xa16>
 800839a:	4649      	mov	r1, r9
 800839c:	2201      	movs	r2, #1
 800839e:	4658      	mov	r0, fp
 80083a0:	f000 fd98 	bl	8008ed4 <__lshift>
 80083a4:	4621      	mov	r1, r4
 80083a6:	4681      	mov	r9, r0
 80083a8:	f000 fe00 	bl	8008fac <__mcmp>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	dc03      	bgt.n	80083b8 <_dtoa_r+0xa58>
 80083b0:	d1e1      	bne.n	8008376 <_dtoa_r+0xa16>
 80083b2:	f018 0f01 	tst.w	r8, #1
 80083b6:	d0de      	beq.n	8008376 <_dtoa_r+0xa16>
 80083b8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083bc:	d1d8      	bne.n	8008370 <_dtoa_r+0xa10>
 80083be:	2339      	movs	r3, #57	@ 0x39
 80083c0:	9a02      	ldr	r2, [sp, #8]
 80083c2:	7013      	strb	r3, [r2, #0]
 80083c4:	4633      	mov	r3, r6
 80083c6:	461e      	mov	r6, r3
 80083c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	2a39      	cmp	r2, #57	@ 0x39
 80083d0:	d052      	beq.n	8008478 <_dtoa_r+0xb18>
 80083d2:	3201      	adds	r2, #1
 80083d4:	701a      	strb	r2, [r3, #0]
 80083d6:	e60e      	b.n	8007ff6 <_dtoa_r+0x696>
 80083d8:	2a00      	cmp	r2, #0
 80083da:	dd07      	ble.n	80083ec <_dtoa_r+0xa8c>
 80083dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083e0:	d0ed      	beq.n	80083be <_dtoa_r+0xa5e>
 80083e2:	9a02      	ldr	r2, [sp, #8]
 80083e4:	f108 0301 	add.w	r3, r8, #1
 80083e8:	7013      	strb	r3, [r2, #0]
 80083ea:	e604      	b.n	8007ff6 <_dtoa_r+0x696>
 80083ec:	9b07      	ldr	r3, [sp, #28]
 80083ee:	9a07      	ldr	r2, [sp, #28]
 80083f0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80083f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d028      	beq.n	800844c <_dtoa_r+0xaec>
 80083fa:	4649      	mov	r1, r9
 80083fc:	2300      	movs	r3, #0
 80083fe:	220a      	movs	r2, #10
 8008400:	4658      	mov	r0, fp
 8008402:	f000 fbbd 	bl	8008b80 <__multadd>
 8008406:	42af      	cmp	r7, r5
 8008408:	4681      	mov	r9, r0
 800840a:	f04f 0300 	mov.w	r3, #0
 800840e:	f04f 020a 	mov.w	r2, #10
 8008412:	4639      	mov	r1, r7
 8008414:	4658      	mov	r0, fp
 8008416:	d107      	bne.n	8008428 <_dtoa_r+0xac8>
 8008418:	f000 fbb2 	bl	8008b80 <__multadd>
 800841c:	4607      	mov	r7, r0
 800841e:	4605      	mov	r5, r0
 8008420:	9b07      	ldr	r3, [sp, #28]
 8008422:	3301      	adds	r3, #1
 8008424:	9307      	str	r3, [sp, #28]
 8008426:	e774      	b.n	8008312 <_dtoa_r+0x9b2>
 8008428:	f000 fbaa 	bl	8008b80 <__multadd>
 800842c:	4629      	mov	r1, r5
 800842e:	4607      	mov	r7, r0
 8008430:	2300      	movs	r3, #0
 8008432:	220a      	movs	r2, #10
 8008434:	4658      	mov	r0, fp
 8008436:	f000 fba3 	bl	8008b80 <__multadd>
 800843a:	4605      	mov	r5, r0
 800843c:	e7f0      	b.n	8008420 <_dtoa_r+0xac0>
 800843e:	9b08      	ldr	r3, [sp, #32]
 8008440:	2700      	movs	r7, #0
 8008442:	2b00      	cmp	r3, #0
 8008444:	bfcc      	ite	gt
 8008446:	461e      	movgt	r6, r3
 8008448:	2601      	movle	r6, #1
 800844a:	4456      	add	r6, sl
 800844c:	4649      	mov	r1, r9
 800844e:	2201      	movs	r2, #1
 8008450:	4658      	mov	r0, fp
 8008452:	f000 fd3f 	bl	8008ed4 <__lshift>
 8008456:	4621      	mov	r1, r4
 8008458:	4681      	mov	r9, r0
 800845a:	f000 fda7 	bl	8008fac <__mcmp>
 800845e:	2800      	cmp	r0, #0
 8008460:	dcb0      	bgt.n	80083c4 <_dtoa_r+0xa64>
 8008462:	d102      	bne.n	800846a <_dtoa_r+0xb0a>
 8008464:	f018 0f01 	tst.w	r8, #1
 8008468:	d1ac      	bne.n	80083c4 <_dtoa_r+0xa64>
 800846a:	4633      	mov	r3, r6
 800846c:	461e      	mov	r6, r3
 800846e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008472:	2a30      	cmp	r2, #48	@ 0x30
 8008474:	d0fa      	beq.n	800846c <_dtoa_r+0xb0c>
 8008476:	e5be      	b.n	8007ff6 <_dtoa_r+0x696>
 8008478:	459a      	cmp	sl, r3
 800847a:	d1a4      	bne.n	80083c6 <_dtoa_r+0xa66>
 800847c:	9b04      	ldr	r3, [sp, #16]
 800847e:	3301      	adds	r3, #1
 8008480:	9304      	str	r3, [sp, #16]
 8008482:	2331      	movs	r3, #49	@ 0x31
 8008484:	f88a 3000 	strb.w	r3, [sl]
 8008488:	e5b5      	b.n	8007ff6 <_dtoa_r+0x696>
 800848a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800848c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80084ec <_dtoa_r+0xb8c>
 8008490:	b11b      	cbz	r3, 800849a <_dtoa_r+0xb3a>
 8008492:	f10a 0308 	add.w	r3, sl, #8
 8008496:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	4650      	mov	r0, sl
 800849c:	b017      	add	sp, #92	@ 0x5c
 800849e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	f77f ae3d 	ble.w	8008124 <_dtoa_r+0x7c4>
 80084aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80084ae:	2001      	movs	r0, #1
 80084b0:	e65b      	b.n	800816a <_dtoa_r+0x80a>
 80084b2:	9b08      	ldr	r3, [sp, #32]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f77f aed6 	ble.w	8008266 <_dtoa_r+0x906>
 80084ba:	4656      	mov	r6, sl
 80084bc:	4621      	mov	r1, r4
 80084be:	4648      	mov	r0, r9
 80084c0:	f7ff f9c5 	bl	800784e <quorem>
 80084c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084c8:	9b08      	ldr	r3, [sp, #32]
 80084ca:	f806 8b01 	strb.w	r8, [r6], #1
 80084ce:	eba6 020a 	sub.w	r2, r6, sl
 80084d2:	4293      	cmp	r3, r2
 80084d4:	ddb3      	ble.n	800843e <_dtoa_r+0xade>
 80084d6:	4649      	mov	r1, r9
 80084d8:	2300      	movs	r3, #0
 80084da:	220a      	movs	r2, #10
 80084dc:	4658      	mov	r0, fp
 80084de:	f000 fb4f 	bl	8008b80 <__multadd>
 80084e2:	4681      	mov	r9, r0
 80084e4:	e7ea      	b.n	80084bc <_dtoa_r+0xb5c>
 80084e6:	bf00      	nop
 80084e8:	080099ce 	.word	0x080099ce
 80084ec:	08009952 	.word	0x08009952

080084f0 <_free_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	4605      	mov	r5, r0
 80084f4:	2900      	cmp	r1, #0
 80084f6:	d040      	beq.n	800857a <_free_r+0x8a>
 80084f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084fc:	1f0c      	subs	r4, r1, #4
 80084fe:	2b00      	cmp	r3, #0
 8008500:	bfb8      	it	lt
 8008502:	18e4      	addlt	r4, r4, r3
 8008504:	f000 face 	bl	8008aa4 <__malloc_lock>
 8008508:	4a1c      	ldr	r2, [pc, #112]	@ (800857c <_free_r+0x8c>)
 800850a:	6813      	ldr	r3, [r2, #0]
 800850c:	b933      	cbnz	r3, 800851c <_free_r+0x2c>
 800850e:	6063      	str	r3, [r4, #4]
 8008510:	6014      	str	r4, [r2, #0]
 8008512:	4628      	mov	r0, r5
 8008514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008518:	f000 baca 	b.w	8008ab0 <__malloc_unlock>
 800851c:	42a3      	cmp	r3, r4
 800851e:	d908      	bls.n	8008532 <_free_r+0x42>
 8008520:	6820      	ldr	r0, [r4, #0]
 8008522:	1821      	adds	r1, r4, r0
 8008524:	428b      	cmp	r3, r1
 8008526:	bf01      	itttt	eq
 8008528:	6819      	ldreq	r1, [r3, #0]
 800852a:	685b      	ldreq	r3, [r3, #4]
 800852c:	1809      	addeq	r1, r1, r0
 800852e:	6021      	streq	r1, [r4, #0]
 8008530:	e7ed      	b.n	800850e <_free_r+0x1e>
 8008532:	461a      	mov	r2, r3
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	b10b      	cbz	r3, 800853c <_free_r+0x4c>
 8008538:	42a3      	cmp	r3, r4
 800853a:	d9fa      	bls.n	8008532 <_free_r+0x42>
 800853c:	6811      	ldr	r1, [r2, #0]
 800853e:	1850      	adds	r0, r2, r1
 8008540:	42a0      	cmp	r0, r4
 8008542:	d10b      	bne.n	800855c <_free_r+0x6c>
 8008544:	6820      	ldr	r0, [r4, #0]
 8008546:	4401      	add	r1, r0
 8008548:	1850      	adds	r0, r2, r1
 800854a:	4283      	cmp	r3, r0
 800854c:	6011      	str	r1, [r2, #0]
 800854e:	d1e0      	bne.n	8008512 <_free_r+0x22>
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4408      	add	r0, r1
 8008556:	6010      	str	r0, [r2, #0]
 8008558:	6053      	str	r3, [r2, #4]
 800855a:	e7da      	b.n	8008512 <_free_r+0x22>
 800855c:	d902      	bls.n	8008564 <_free_r+0x74>
 800855e:	230c      	movs	r3, #12
 8008560:	602b      	str	r3, [r5, #0]
 8008562:	e7d6      	b.n	8008512 <_free_r+0x22>
 8008564:	6820      	ldr	r0, [r4, #0]
 8008566:	1821      	adds	r1, r4, r0
 8008568:	428b      	cmp	r3, r1
 800856a:	bf01      	itttt	eq
 800856c:	6819      	ldreq	r1, [r3, #0]
 800856e:	685b      	ldreq	r3, [r3, #4]
 8008570:	1809      	addeq	r1, r1, r0
 8008572:	6021      	streq	r1, [r4, #0]
 8008574:	6063      	str	r3, [r4, #4]
 8008576:	6054      	str	r4, [r2, #4]
 8008578:	e7cb      	b.n	8008512 <_free_r+0x22>
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	2000223c 	.word	0x2000223c

08008580 <__sfputc_r>:
 8008580:	6893      	ldr	r3, [r2, #8]
 8008582:	b410      	push	{r4}
 8008584:	3b01      	subs	r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	6093      	str	r3, [r2, #8]
 800858a:	da07      	bge.n	800859c <__sfputc_r+0x1c>
 800858c:	6994      	ldr	r4, [r2, #24]
 800858e:	42a3      	cmp	r3, r4
 8008590:	db01      	blt.n	8008596 <__sfputc_r+0x16>
 8008592:	290a      	cmp	r1, #10
 8008594:	d102      	bne.n	800859c <__sfputc_r+0x1c>
 8008596:	bc10      	pop	{r4}
 8008598:	f000 be53 	b.w	8009242 <__swbuf_r>
 800859c:	6813      	ldr	r3, [r2, #0]
 800859e:	1c58      	adds	r0, r3, #1
 80085a0:	6010      	str	r0, [r2, #0]
 80085a2:	7019      	strb	r1, [r3, #0]
 80085a4:	4608      	mov	r0, r1
 80085a6:	bc10      	pop	{r4}
 80085a8:	4770      	bx	lr

080085aa <__sfputs_r>:
 80085aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ac:	4606      	mov	r6, r0
 80085ae:	460f      	mov	r7, r1
 80085b0:	4614      	mov	r4, r2
 80085b2:	18d5      	adds	r5, r2, r3
 80085b4:	42ac      	cmp	r4, r5
 80085b6:	d101      	bne.n	80085bc <__sfputs_r+0x12>
 80085b8:	2000      	movs	r0, #0
 80085ba:	e007      	b.n	80085cc <__sfputs_r+0x22>
 80085bc:	463a      	mov	r2, r7
 80085be:	4630      	mov	r0, r6
 80085c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c4:	f7ff ffdc 	bl	8008580 <__sfputc_r>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d1f3      	bne.n	80085b4 <__sfputs_r+0xa>
 80085cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085d0 <_vfiprintf_r>:
 80085d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	460d      	mov	r5, r1
 80085d6:	4614      	mov	r4, r2
 80085d8:	4698      	mov	r8, r3
 80085da:	4606      	mov	r6, r0
 80085dc:	b09d      	sub	sp, #116	@ 0x74
 80085de:	b118      	cbz	r0, 80085e8 <_vfiprintf_r+0x18>
 80085e0:	6a03      	ldr	r3, [r0, #32]
 80085e2:	b90b      	cbnz	r3, 80085e8 <_vfiprintf_r+0x18>
 80085e4:	f7fe ffda 	bl	800759c <__sinit>
 80085e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085ea:	07d9      	lsls	r1, r3, #31
 80085ec:	d405      	bmi.n	80085fa <_vfiprintf_r+0x2a>
 80085ee:	89ab      	ldrh	r3, [r5, #12]
 80085f0:	059a      	lsls	r2, r3, #22
 80085f2:	d402      	bmi.n	80085fa <_vfiprintf_r+0x2a>
 80085f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085f6:	f7ff f90c 	bl	8007812 <__retarget_lock_acquire_recursive>
 80085fa:	89ab      	ldrh	r3, [r5, #12]
 80085fc:	071b      	lsls	r3, r3, #28
 80085fe:	d501      	bpl.n	8008604 <_vfiprintf_r+0x34>
 8008600:	692b      	ldr	r3, [r5, #16]
 8008602:	b99b      	cbnz	r3, 800862c <_vfiprintf_r+0x5c>
 8008604:	4629      	mov	r1, r5
 8008606:	4630      	mov	r0, r6
 8008608:	f000 fe5a 	bl	80092c0 <__swsetup_r>
 800860c:	b170      	cbz	r0, 800862c <_vfiprintf_r+0x5c>
 800860e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008610:	07dc      	lsls	r4, r3, #31
 8008612:	d504      	bpl.n	800861e <_vfiprintf_r+0x4e>
 8008614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008618:	b01d      	add	sp, #116	@ 0x74
 800861a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861e:	89ab      	ldrh	r3, [r5, #12]
 8008620:	0598      	lsls	r0, r3, #22
 8008622:	d4f7      	bmi.n	8008614 <_vfiprintf_r+0x44>
 8008624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008626:	f7ff f8f5 	bl	8007814 <__retarget_lock_release_recursive>
 800862a:	e7f3      	b.n	8008614 <_vfiprintf_r+0x44>
 800862c:	2300      	movs	r3, #0
 800862e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008630:	2320      	movs	r3, #32
 8008632:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008636:	2330      	movs	r3, #48	@ 0x30
 8008638:	f04f 0901 	mov.w	r9, #1
 800863c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008640:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80087ec <_vfiprintf_r+0x21c>
 8008644:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008648:	4623      	mov	r3, r4
 800864a:	469a      	mov	sl, r3
 800864c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008650:	b10a      	cbz	r2, 8008656 <_vfiprintf_r+0x86>
 8008652:	2a25      	cmp	r2, #37	@ 0x25
 8008654:	d1f9      	bne.n	800864a <_vfiprintf_r+0x7a>
 8008656:	ebba 0b04 	subs.w	fp, sl, r4
 800865a:	d00b      	beq.n	8008674 <_vfiprintf_r+0xa4>
 800865c:	465b      	mov	r3, fp
 800865e:	4622      	mov	r2, r4
 8008660:	4629      	mov	r1, r5
 8008662:	4630      	mov	r0, r6
 8008664:	f7ff ffa1 	bl	80085aa <__sfputs_r>
 8008668:	3001      	adds	r0, #1
 800866a:	f000 80a7 	beq.w	80087bc <_vfiprintf_r+0x1ec>
 800866e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008670:	445a      	add	r2, fp
 8008672:	9209      	str	r2, [sp, #36]	@ 0x24
 8008674:	f89a 3000 	ldrb.w	r3, [sl]
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 809f 	beq.w	80087bc <_vfiprintf_r+0x1ec>
 800867e:	2300      	movs	r3, #0
 8008680:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008688:	f10a 0a01 	add.w	sl, sl, #1
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	9307      	str	r3, [sp, #28]
 8008690:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008694:	931a      	str	r3, [sp, #104]	@ 0x68
 8008696:	4654      	mov	r4, sl
 8008698:	2205      	movs	r2, #5
 800869a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800869e:	4853      	ldr	r0, [pc, #332]	@ (80087ec <_vfiprintf_r+0x21c>)
 80086a0:	f7ff f8b9 	bl	8007816 <memchr>
 80086a4:	9a04      	ldr	r2, [sp, #16]
 80086a6:	b9d8      	cbnz	r0, 80086e0 <_vfiprintf_r+0x110>
 80086a8:	06d1      	lsls	r1, r2, #27
 80086aa:	bf44      	itt	mi
 80086ac:	2320      	movmi	r3, #32
 80086ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086b2:	0713      	lsls	r3, r2, #28
 80086b4:	bf44      	itt	mi
 80086b6:	232b      	movmi	r3, #43	@ 0x2b
 80086b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086bc:	f89a 3000 	ldrb.w	r3, [sl]
 80086c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086c2:	d015      	beq.n	80086f0 <_vfiprintf_r+0x120>
 80086c4:	4654      	mov	r4, sl
 80086c6:	2000      	movs	r0, #0
 80086c8:	f04f 0c0a 	mov.w	ip, #10
 80086cc:	9a07      	ldr	r2, [sp, #28]
 80086ce:	4621      	mov	r1, r4
 80086d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086d4:	3b30      	subs	r3, #48	@ 0x30
 80086d6:	2b09      	cmp	r3, #9
 80086d8:	d94b      	bls.n	8008772 <_vfiprintf_r+0x1a2>
 80086da:	b1b0      	cbz	r0, 800870a <_vfiprintf_r+0x13a>
 80086dc:	9207      	str	r2, [sp, #28]
 80086de:	e014      	b.n	800870a <_vfiprintf_r+0x13a>
 80086e0:	eba0 0308 	sub.w	r3, r0, r8
 80086e4:	fa09 f303 	lsl.w	r3, r9, r3
 80086e8:	4313      	orrs	r3, r2
 80086ea:	46a2      	mov	sl, r4
 80086ec:	9304      	str	r3, [sp, #16]
 80086ee:	e7d2      	b.n	8008696 <_vfiprintf_r+0xc6>
 80086f0:	9b03      	ldr	r3, [sp, #12]
 80086f2:	1d19      	adds	r1, r3, #4
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	9103      	str	r1, [sp, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bfbb      	ittet	lt
 80086fc:	425b      	neglt	r3, r3
 80086fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008702:	9307      	strge	r3, [sp, #28]
 8008704:	9307      	strlt	r3, [sp, #28]
 8008706:	bfb8      	it	lt
 8008708:	9204      	strlt	r2, [sp, #16]
 800870a:	7823      	ldrb	r3, [r4, #0]
 800870c:	2b2e      	cmp	r3, #46	@ 0x2e
 800870e:	d10a      	bne.n	8008726 <_vfiprintf_r+0x156>
 8008710:	7863      	ldrb	r3, [r4, #1]
 8008712:	2b2a      	cmp	r3, #42	@ 0x2a
 8008714:	d132      	bne.n	800877c <_vfiprintf_r+0x1ac>
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	3402      	adds	r4, #2
 800871a:	1d1a      	adds	r2, r3, #4
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	9203      	str	r2, [sp, #12]
 8008720:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008724:	9305      	str	r3, [sp, #20]
 8008726:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80087f0 <_vfiprintf_r+0x220>
 800872a:	2203      	movs	r2, #3
 800872c:	4650      	mov	r0, sl
 800872e:	7821      	ldrb	r1, [r4, #0]
 8008730:	f7ff f871 	bl	8007816 <memchr>
 8008734:	b138      	cbz	r0, 8008746 <_vfiprintf_r+0x176>
 8008736:	2240      	movs	r2, #64	@ 0x40
 8008738:	9b04      	ldr	r3, [sp, #16]
 800873a:	eba0 000a 	sub.w	r0, r0, sl
 800873e:	4082      	lsls	r2, r0
 8008740:	4313      	orrs	r3, r2
 8008742:	3401      	adds	r4, #1
 8008744:	9304      	str	r3, [sp, #16]
 8008746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874a:	2206      	movs	r2, #6
 800874c:	4829      	ldr	r0, [pc, #164]	@ (80087f4 <_vfiprintf_r+0x224>)
 800874e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008752:	f7ff f860 	bl	8007816 <memchr>
 8008756:	2800      	cmp	r0, #0
 8008758:	d03f      	beq.n	80087da <_vfiprintf_r+0x20a>
 800875a:	4b27      	ldr	r3, [pc, #156]	@ (80087f8 <_vfiprintf_r+0x228>)
 800875c:	bb1b      	cbnz	r3, 80087a6 <_vfiprintf_r+0x1d6>
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	3307      	adds	r3, #7
 8008762:	f023 0307 	bic.w	r3, r3, #7
 8008766:	3308      	adds	r3, #8
 8008768:	9303      	str	r3, [sp, #12]
 800876a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800876c:	443b      	add	r3, r7
 800876e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008770:	e76a      	b.n	8008648 <_vfiprintf_r+0x78>
 8008772:	460c      	mov	r4, r1
 8008774:	2001      	movs	r0, #1
 8008776:	fb0c 3202 	mla	r2, ip, r2, r3
 800877a:	e7a8      	b.n	80086ce <_vfiprintf_r+0xfe>
 800877c:	2300      	movs	r3, #0
 800877e:	f04f 0c0a 	mov.w	ip, #10
 8008782:	4619      	mov	r1, r3
 8008784:	3401      	adds	r4, #1
 8008786:	9305      	str	r3, [sp, #20]
 8008788:	4620      	mov	r0, r4
 800878a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800878e:	3a30      	subs	r2, #48	@ 0x30
 8008790:	2a09      	cmp	r2, #9
 8008792:	d903      	bls.n	800879c <_vfiprintf_r+0x1cc>
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0c6      	beq.n	8008726 <_vfiprintf_r+0x156>
 8008798:	9105      	str	r1, [sp, #20]
 800879a:	e7c4      	b.n	8008726 <_vfiprintf_r+0x156>
 800879c:	4604      	mov	r4, r0
 800879e:	2301      	movs	r3, #1
 80087a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80087a4:	e7f0      	b.n	8008788 <_vfiprintf_r+0x1b8>
 80087a6:	ab03      	add	r3, sp, #12
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	462a      	mov	r2, r5
 80087ac:	4630      	mov	r0, r6
 80087ae:	4b13      	ldr	r3, [pc, #76]	@ (80087fc <_vfiprintf_r+0x22c>)
 80087b0:	a904      	add	r1, sp, #16
 80087b2:	f7fe faa9 	bl	8006d08 <_printf_float>
 80087b6:	4607      	mov	r7, r0
 80087b8:	1c78      	adds	r0, r7, #1
 80087ba:	d1d6      	bne.n	800876a <_vfiprintf_r+0x19a>
 80087bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087be:	07d9      	lsls	r1, r3, #31
 80087c0:	d405      	bmi.n	80087ce <_vfiprintf_r+0x1fe>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	059a      	lsls	r2, r3, #22
 80087c6:	d402      	bmi.n	80087ce <_vfiprintf_r+0x1fe>
 80087c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ca:	f7ff f823 	bl	8007814 <__retarget_lock_release_recursive>
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	065b      	lsls	r3, r3, #25
 80087d2:	f53f af1f 	bmi.w	8008614 <_vfiprintf_r+0x44>
 80087d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087d8:	e71e      	b.n	8008618 <_vfiprintf_r+0x48>
 80087da:	ab03      	add	r3, sp, #12
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	462a      	mov	r2, r5
 80087e0:	4630      	mov	r0, r6
 80087e2:	4b06      	ldr	r3, [pc, #24]	@ (80087fc <_vfiprintf_r+0x22c>)
 80087e4:	a904      	add	r1, sp, #16
 80087e6:	f7fe fd2d 	bl	8007244 <_printf_i>
 80087ea:	e7e4      	b.n	80087b6 <_vfiprintf_r+0x1e6>
 80087ec:	080099df 	.word	0x080099df
 80087f0:	080099e5 	.word	0x080099e5
 80087f4:	080099e9 	.word	0x080099e9
 80087f8:	08006d09 	.word	0x08006d09
 80087fc:	080085ab 	.word	0x080085ab

08008800 <malloc>:
 8008800:	4b02      	ldr	r3, [pc, #8]	@ (800880c <malloc+0xc>)
 8008802:	4601      	mov	r1, r0
 8008804:	6818      	ldr	r0, [r3, #0]
 8008806:	f000 b825 	b.w	8008854 <_malloc_r>
 800880a:	bf00      	nop
 800880c:	2000001c 	.word	0x2000001c

08008810 <sbrk_aligned>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	4e0f      	ldr	r6, [pc, #60]	@ (8008850 <sbrk_aligned+0x40>)
 8008814:	460c      	mov	r4, r1
 8008816:	6831      	ldr	r1, [r6, #0]
 8008818:	4605      	mov	r5, r0
 800881a:	b911      	cbnz	r1, 8008822 <sbrk_aligned+0x12>
 800881c:	f000 fe92 	bl	8009544 <_sbrk_r>
 8008820:	6030      	str	r0, [r6, #0]
 8008822:	4621      	mov	r1, r4
 8008824:	4628      	mov	r0, r5
 8008826:	f000 fe8d 	bl	8009544 <_sbrk_r>
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	d103      	bne.n	8008836 <sbrk_aligned+0x26>
 800882e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008832:	4620      	mov	r0, r4
 8008834:	bd70      	pop	{r4, r5, r6, pc}
 8008836:	1cc4      	adds	r4, r0, #3
 8008838:	f024 0403 	bic.w	r4, r4, #3
 800883c:	42a0      	cmp	r0, r4
 800883e:	d0f8      	beq.n	8008832 <sbrk_aligned+0x22>
 8008840:	1a21      	subs	r1, r4, r0
 8008842:	4628      	mov	r0, r5
 8008844:	f000 fe7e 	bl	8009544 <_sbrk_r>
 8008848:	3001      	adds	r0, #1
 800884a:	d1f2      	bne.n	8008832 <sbrk_aligned+0x22>
 800884c:	e7ef      	b.n	800882e <sbrk_aligned+0x1e>
 800884e:	bf00      	nop
 8008850:	20002238 	.word	0x20002238

08008854 <_malloc_r>:
 8008854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008858:	1ccd      	adds	r5, r1, #3
 800885a:	f025 0503 	bic.w	r5, r5, #3
 800885e:	3508      	adds	r5, #8
 8008860:	2d0c      	cmp	r5, #12
 8008862:	bf38      	it	cc
 8008864:	250c      	movcc	r5, #12
 8008866:	2d00      	cmp	r5, #0
 8008868:	4606      	mov	r6, r0
 800886a:	db01      	blt.n	8008870 <_malloc_r+0x1c>
 800886c:	42a9      	cmp	r1, r5
 800886e:	d904      	bls.n	800887a <_malloc_r+0x26>
 8008870:	230c      	movs	r3, #12
 8008872:	6033      	str	r3, [r6, #0]
 8008874:	2000      	movs	r0, #0
 8008876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800887a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008950 <_malloc_r+0xfc>
 800887e:	f000 f911 	bl	8008aa4 <__malloc_lock>
 8008882:	f8d8 3000 	ldr.w	r3, [r8]
 8008886:	461c      	mov	r4, r3
 8008888:	bb44      	cbnz	r4, 80088dc <_malloc_r+0x88>
 800888a:	4629      	mov	r1, r5
 800888c:	4630      	mov	r0, r6
 800888e:	f7ff ffbf 	bl	8008810 <sbrk_aligned>
 8008892:	1c43      	adds	r3, r0, #1
 8008894:	4604      	mov	r4, r0
 8008896:	d158      	bne.n	800894a <_malloc_r+0xf6>
 8008898:	f8d8 4000 	ldr.w	r4, [r8]
 800889c:	4627      	mov	r7, r4
 800889e:	2f00      	cmp	r7, #0
 80088a0:	d143      	bne.n	800892a <_malloc_r+0xd6>
 80088a2:	2c00      	cmp	r4, #0
 80088a4:	d04b      	beq.n	800893e <_malloc_r+0xea>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	4639      	mov	r1, r7
 80088aa:	4630      	mov	r0, r6
 80088ac:	eb04 0903 	add.w	r9, r4, r3
 80088b0:	f000 fe48 	bl	8009544 <_sbrk_r>
 80088b4:	4581      	cmp	r9, r0
 80088b6:	d142      	bne.n	800893e <_malloc_r+0xea>
 80088b8:	6821      	ldr	r1, [r4, #0]
 80088ba:	4630      	mov	r0, r6
 80088bc:	1a6d      	subs	r5, r5, r1
 80088be:	4629      	mov	r1, r5
 80088c0:	f7ff ffa6 	bl	8008810 <sbrk_aligned>
 80088c4:	3001      	adds	r0, #1
 80088c6:	d03a      	beq.n	800893e <_malloc_r+0xea>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	442b      	add	r3, r5
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	f8d8 3000 	ldr.w	r3, [r8]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	bb62      	cbnz	r2, 8008930 <_malloc_r+0xdc>
 80088d6:	f8c8 7000 	str.w	r7, [r8]
 80088da:	e00f      	b.n	80088fc <_malloc_r+0xa8>
 80088dc:	6822      	ldr	r2, [r4, #0]
 80088de:	1b52      	subs	r2, r2, r5
 80088e0:	d420      	bmi.n	8008924 <_malloc_r+0xd0>
 80088e2:	2a0b      	cmp	r2, #11
 80088e4:	d917      	bls.n	8008916 <_malloc_r+0xc2>
 80088e6:	1961      	adds	r1, r4, r5
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	6025      	str	r5, [r4, #0]
 80088ec:	bf18      	it	ne
 80088ee:	6059      	strne	r1, [r3, #4]
 80088f0:	6863      	ldr	r3, [r4, #4]
 80088f2:	bf08      	it	eq
 80088f4:	f8c8 1000 	streq.w	r1, [r8]
 80088f8:	5162      	str	r2, [r4, r5]
 80088fa:	604b      	str	r3, [r1, #4]
 80088fc:	4630      	mov	r0, r6
 80088fe:	f000 f8d7 	bl	8008ab0 <__malloc_unlock>
 8008902:	f104 000b 	add.w	r0, r4, #11
 8008906:	1d23      	adds	r3, r4, #4
 8008908:	f020 0007 	bic.w	r0, r0, #7
 800890c:	1ac2      	subs	r2, r0, r3
 800890e:	bf1c      	itt	ne
 8008910:	1a1b      	subne	r3, r3, r0
 8008912:	50a3      	strne	r3, [r4, r2]
 8008914:	e7af      	b.n	8008876 <_malloc_r+0x22>
 8008916:	6862      	ldr	r2, [r4, #4]
 8008918:	42a3      	cmp	r3, r4
 800891a:	bf0c      	ite	eq
 800891c:	f8c8 2000 	streq.w	r2, [r8]
 8008920:	605a      	strne	r2, [r3, #4]
 8008922:	e7eb      	b.n	80088fc <_malloc_r+0xa8>
 8008924:	4623      	mov	r3, r4
 8008926:	6864      	ldr	r4, [r4, #4]
 8008928:	e7ae      	b.n	8008888 <_malloc_r+0x34>
 800892a:	463c      	mov	r4, r7
 800892c:	687f      	ldr	r7, [r7, #4]
 800892e:	e7b6      	b.n	800889e <_malloc_r+0x4a>
 8008930:	461a      	mov	r2, r3
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	42a3      	cmp	r3, r4
 8008936:	d1fb      	bne.n	8008930 <_malloc_r+0xdc>
 8008938:	2300      	movs	r3, #0
 800893a:	6053      	str	r3, [r2, #4]
 800893c:	e7de      	b.n	80088fc <_malloc_r+0xa8>
 800893e:	230c      	movs	r3, #12
 8008940:	4630      	mov	r0, r6
 8008942:	6033      	str	r3, [r6, #0]
 8008944:	f000 f8b4 	bl	8008ab0 <__malloc_unlock>
 8008948:	e794      	b.n	8008874 <_malloc_r+0x20>
 800894a:	6005      	str	r5, [r0, #0]
 800894c:	e7d6      	b.n	80088fc <_malloc_r+0xa8>
 800894e:	bf00      	nop
 8008950:	2000223c 	.word	0x2000223c

08008954 <__sflush_r>:
 8008954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	0716      	lsls	r6, r2, #28
 800895c:	4605      	mov	r5, r0
 800895e:	460c      	mov	r4, r1
 8008960:	d454      	bmi.n	8008a0c <__sflush_r+0xb8>
 8008962:	684b      	ldr	r3, [r1, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	dc02      	bgt.n	800896e <__sflush_r+0x1a>
 8008968:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800896a:	2b00      	cmp	r3, #0
 800896c:	dd48      	ble.n	8008a00 <__sflush_r+0xac>
 800896e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008970:	2e00      	cmp	r6, #0
 8008972:	d045      	beq.n	8008a00 <__sflush_r+0xac>
 8008974:	2300      	movs	r3, #0
 8008976:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800897a:	682f      	ldr	r7, [r5, #0]
 800897c:	6a21      	ldr	r1, [r4, #32]
 800897e:	602b      	str	r3, [r5, #0]
 8008980:	d030      	beq.n	80089e4 <__sflush_r+0x90>
 8008982:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	0759      	lsls	r1, r3, #29
 8008988:	d505      	bpl.n	8008996 <__sflush_r+0x42>
 800898a:	6863      	ldr	r3, [r4, #4]
 800898c:	1ad2      	subs	r2, r2, r3
 800898e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008990:	b10b      	cbz	r3, 8008996 <__sflush_r+0x42>
 8008992:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008994:	1ad2      	subs	r2, r2, r3
 8008996:	2300      	movs	r3, #0
 8008998:	4628      	mov	r0, r5
 800899a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800899c:	6a21      	ldr	r1, [r4, #32]
 800899e:	47b0      	blx	r6
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	d106      	bne.n	80089b4 <__sflush_r+0x60>
 80089a6:	6829      	ldr	r1, [r5, #0]
 80089a8:	291d      	cmp	r1, #29
 80089aa:	d82b      	bhi.n	8008a04 <__sflush_r+0xb0>
 80089ac:	4a28      	ldr	r2, [pc, #160]	@ (8008a50 <__sflush_r+0xfc>)
 80089ae:	410a      	asrs	r2, r1
 80089b0:	07d6      	lsls	r6, r2, #31
 80089b2:	d427      	bmi.n	8008a04 <__sflush_r+0xb0>
 80089b4:	2200      	movs	r2, #0
 80089b6:	6062      	str	r2, [r4, #4]
 80089b8:	6922      	ldr	r2, [r4, #16]
 80089ba:	04d9      	lsls	r1, r3, #19
 80089bc:	6022      	str	r2, [r4, #0]
 80089be:	d504      	bpl.n	80089ca <__sflush_r+0x76>
 80089c0:	1c42      	adds	r2, r0, #1
 80089c2:	d101      	bne.n	80089c8 <__sflush_r+0x74>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b903      	cbnz	r3, 80089ca <__sflush_r+0x76>
 80089c8:	6560      	str	r0, [r4, #84]	@ 0x54
 80089ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089cc:	602f      	str	r7, [r5, #0]
 80089ce:	b1b9      	cbz	r1, 8008a00 <__sflush_r+0xac>
 80089d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089d4:	4299      	cmp	r1, r3
 80089d6:	d002      	beq.n	80089de <__sflush_r+0x8a>
 80089d8:	4628      	mov	r0, r5
 80089da:	f7ff fd89 	bl	80084f0 <_free_r>
 80089de:	2300      	movs	r3, #0
 80089e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80089e2:	e00d      	b.n	8008a00 <__sflush_r+0xac>
 80089e4:	2301      	movs	r3, #1
 80089e6:	4628      	mov	r0, r5
 80089e8:	47b0      	blx	r6
 80089ea:	4602      	mov	r2, r0
 80089ec:	1c50      	adds	r0, r2, #1
 80089ee:	d1c9      	bne.n	8008984 <__sflush_r+0x30>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0c6      	beq.n	8008984 <__sflush_r+0x30>
 80089f6:	2b1d      	cmp	r3, #29
 80089f8:	d001      	beq.n	80089fe <__sflush_r+0xaa>
 80089fa:	2b16      	cmp	r3, #22
 80089fc:	d11d      	bne.n	8008a3a <__sflush_r+0xe6>
 80089fe:	602f      	str	r7, [r5, #0]
 8008a00:	2000      	movs	r0, #0
 8008a02:	e021      	b.n	8008a48 <__sflush_r+0xf4>
 8008a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a08:	b21b      	sxth	r3, r3
 8008a0a:	e01a      	b.n	8008a42 <__sflush_r+0xee>
 8008a0c:	690f      	ldr	r7, [r1, #16]
 8008a0e:	2f00      	cmp	r7, #0
 8008a10:	d0f6      	beq.n	8008a00 <__sflush_r+0xac>
 8008a12:	0793      	lsls	r3, r2, #30
 8008a14:	bf18      	it	ne
 8008a16:	2300      	movne	r3, #0
 8008a18:	680e      	ldr	r6, [r1, #0]
 8008a1a:	bf08      	it	eq
 8008a1c:	694b      	ldreq	r3, [r1, #20]
 8008a1e:	1bf6      	subs	r6, r6, r7
 8008a20:	600f      	str	r7, [r1, #0]
 8008a22:	608b      	str	r3, [r1, #8]
 8008a24:	2e00      	cmp	r6, #0
 8008a26:	ddeb      	ble.n	8008a00 <__sflush_r+0xac>
 8008a28:	4633      	mov	r3, r6
 8008a2a:	463a      	mov	r2, r7
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	6a21      	ldr	r1, [r4, #32]
 8008a30:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008a34:	47e0      	blx	ip
 8008a36:	2800      	cmp	r0, #0
 8008a38:	dc07      	bgt.n	8008a4a <__sflush_r+0xf6>
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a46:	81a3      	strh	r3, [r4, #12]
 8008a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a4a:	4407      	add	r7, r0
 8008a4c:	1a36      	subs	r6, r6, r0
 8008a4e:	e7e9      	b.n	8008a24 <__sflush_r+0xd0>
 8008a50:	dfbffffe 	.word	0xdfbffffe

08008a54 <_fflush_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	690b      	ldr	r3, [r1, #16]
 8008a58:	4605      	mov	r5, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	b913      	cbnz	r3, 8008a64 <_fflush_r+0x10>
 8008a5e:	2500      	movs	r5, #0
 8008a60:	4628      	mov	r0, r5
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	b118      	cbz	r0, 8008a6e <_fflush_r+0x1a>
 8008a66:	6a03      	ldr	r3, [r0, #32]
 8008a68:	b90b      	cbnz	r3, 8008a6e <_fflush_r+0x1a>
 8008a6a:	f7fe fd97 	bl	800759c <__sinit>
 8008a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0f3      	beq.n	8008a5e <_fflush_r+0xa>
 8008a76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a78:	07d0      	lsls	r0, r2, #31
 8008a7a:	d404      	bmi.n	8008a86 <_fflush_r+0x32>
 8008a7c:	0599      	lsls	r1, r3, #22
 8008a7e:	d402      	bmi.n	8008a86 <_fflush_r+0x32>
 8008a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a82:	f7fe fec6 	bl	8007812 <__retarget_lock_acquire_recursive>
 8008a86:	4628      	mov	r0, r5
 8008a88:	4621      	mov	r1, r4
 8008a8a:	f7ff ff63 	bl	8008954 <__sflush_r>
 8008a8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a90:	4605      	mov	r5, r0
 8008a92:	07da      	lsls	r2, r3, #31
 8008a94:	d4e4      	bmi.n	8008a60 <_fflush_r+0xc>
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	059b      	lsls	r3, r3, #22
 8008a9a:	d4e1      	bmi.n	8008a60 <_fflush_r+0xc>
 8008a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a9e:	f7fe feb9 	bl	8007814 <__retarget_lock_release_recursive>
 8008aa2:	e7dd      	b.n	8008a60 <_fflush_r+0xc>

08008aa4 <__malloc_lock>:
 8008aa4:	4801      	ldr	r0, [pc, #4]	@ (8008aac <__malloc_lock+0x8>)
 8008aa6:	f7fe beb4 	b.w	8007812 <__retarget_lock_acquire_recursive>
 8008aaa:	bf00      	nop
 8008aac:	20002234 	.word	0x20002234

08008ab0 <__malloc_unlock>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	@ (8008ab8 <__malloc_unlock+0x8>)
 8008ab2:	f7fe beaf 	b.w	8007814 <__retarget_lock_release_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	20002234 	.word	0x20002234

08008abc <_Balloc>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	69c6      	ldr	r6, [r0, #28]
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	460d      	mov	r5, r1
 8008ac4:	b976      	cbnz	r6, 8008ae4 <_Balloc+0x28>
 8008ac6:	2010      	movs	r0, #16
 8008ac8:	f7ff fe9a 	bl	8008800 <malloc>
 8008acc:	4602      	mov	r2, r0
 8008ace:	61e0      	str	r0, [r4, #28]
 8008ad0:	b920      	cbnz	r0, 8008adc <_Balloc+0x20>
 8008ad2:	216b      	movs	r1, #107	@ 0x6b
 8008ad4:	4b17      	ldr	r3, [pc, #92]	@ (8008b34 <_Balloc+0x78>)
 8008ad6:	4818      	ldr	r0, [pc, #96]	@ (8008b38 <_Balloc+0x7c>)
 8008ad8:	f000 fd56 	bl	8009588 <__assert_func>
 8008adc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ae0:	6006      	str	r6, [r0, #0]
 8008ae2:	60c6      	str	r6, [r0, #12]
 8008ae4:	69e6      	ldr	r6, [r4, #28]
 8008ae6:	68f3      	ldr	r3, [r6, #12]
 8008ae8:	b183      	cbz	r3, 8008b0c <_Balloc+0x50>
 8008aea:	69e3      	ldr	r3, [r4, #28]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008af2:	b9b8      	cbnz	r0, 8008b24 <_Balloc+0x68>
 8008af4:	2101      	movs	r1, #1
 8008af6:	fa01 f605 	lsl.w	r6, r1, r5
 8008afa:	1d72      	adds	r2, r6, #5
 8008afc:	4620      	mov	r0, r4
 8008afe:	0092      	lsls	r2, r2, #2
 8008b00:	f000 fd60 	bl	80095c4 <_calloc_r>
 8008b04:	b160      	cbz	r0, 8008b20 <_Balloc+0x64>
 8008b06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b0a:	e00e      	b.n	8008b2a <_Balloc+0x6e>
 8008b0c:	2221      	movs	r2, #33	@ 0x21
 8008b0e:	2104      	movs	r1, #4
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fd57 	bl	80095c4 <_calloc_r>
 8008b16:	69e3      	ldr	r3, [r4, #28]
 8008b18:	60f0      	str	r0, [r6, #12]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e4      	bne.n	8008aea <_Balloc+0x2e>
 8008b20:	2000      	movs	r0, #0
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
 8008b24:	6802      	ldr	r2, [r0, #0]
 8008b26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b30:	e7f7      	b.n	8008b22 <_Balloc+0x66>
 8008b32:	bf00      	nop
 8008b34:	0800995f 	.word	0x0800995f
 8008b38:	080099f0 	.word	0x080099f0

08008b3c <_Bfree>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	69c6      	ldr	r6, [r0, #28]
 8008b40:	4605      	mov	r5, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	b976      	cbnz	r6, 8008b64 <_Bfree+0x28>
 8008b46:	2010      	movs	r0, #16
 8008b48:	f7ff fe5a 	bl	8008800 <malloc>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	61e8      	str	r0, [r5, #28]
 8008b50:	b920      	cbnz	r0, 8008b5c <_Bfree+0x20>
 8008b52:	218f      	movs	r1, #143	@ 0x8f
 8008b54:	4b08      	ldr	r3, [pc, #32]	@ (8008b78 <_Bfree+0x3c>)
 8008b56:	4809      	ldr	r0, [pc, #36]	@ (8008b7c <_Bfree+0x40>)
 8008b58:	f000 fd16 	bl	8009588 <__assert_func>
 8008b5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b60:	6006      	str	r6, [r0, #0]
 8008b62:	60c6      	str	r6, [r0, #12]
 8008b64:	b13c      	cbz	r4, 8008b76 <_Bfree+0x3a>
 8008b66:	69eb      	ldr	r3, [r5, #28]
 8008b68:	6862      	ldr	r2, [r4, #4]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b70:	6021      	str	r1, [r4, #0]
 8008b72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b76:	bd70      	pop	{r4, r5, r6, pc}
 8008b78:	0800995f 	.word	0x0800995f
 8008b7c:	080099f0 	.word	0x080099f0

08008b80 <__multadd>:
 8008b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b84:	4607      	mov	r7, r0
 8008b86:	460c      	mov	r4, r1
 8008b88:	461e      	mov	r6, r3
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	690d      	ldr	r5, [r1, #16]
 8008b8e:	f101 0c14 	add.w	ip, r1, #20
 8008b92:	f8dc 3000 	ldr.w	r3, [ip]
 8008b96:	3001      	adds	r0, #1
 8008b98:	b299      	uxth	r1, r3
 8008b9a:	fb02 6101 	mla	r1, r2, r1, r6
 8008b9e:	0c1e      	lsrs	r6, r3, #16
 8008ba0:	0c0b      	lsrs	r3, r1, #16
 8008ba2:	fb02 3306 	mla	r3, r2, r6, r3
 8008ba6:	b289      	uxth	r1, r1
 8008ba8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008bac:	4285      	cmp	r5, r0
 8008bae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bb2:	f84c 1b04 	str.w	r1, [ip], #4
 8008bb6:	dcec      	bgt.n	8008b92 <__multadd+0x12>
 8008bb8:	b30e      	cbz	r6, 8008bfe <__multadd+0x7e>
 8008bba:	68a3      	ldr	r3, [r4, #8]
 8008bbc:	42ab      	cmp	r3, r5
 8008bbe:	dc19      	bgt.n	8008bf4 <__multadd+0x74>
 8008bc0:	6861      	ldr	r1, [r4, #4]
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	3101      	adds	r1, #1
 8008bc6:	f7ff ff79 	bl	8008abc <_Balloc>
 8008bca:	4680      	mov	r8, r0
 8008bcc:	b928      	cbnz	r0, 8008bda <__multadd+0x5a>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	21ba      	movs	r1, #186	@ 0xba
 8008bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c04 <__multadd+0x84>)
 8008bd4:	480c      	ldr	r0, [pc, #48]	@ (8008c08 <__multadd+0x88>)
 8008bd6:	f000 fcd7 	bl	8009588 <__assert_func>
 8008bda:	6922      	ldr	r2, [r4, #16]
 8008bdc:	f104 010c 	add.w	r1, r4, #12
 8008be0:	3202      	adds	r2, #2
 8008be2:	0092      	lsls	r2, r2, #2
 8008be4:	300c      	adds	r0, #12
 8008be6:	f7fe fe24 	bl	8007832 <memcpy>
 8008bea:	4621      	mov	r1, r4
 8008bec:	4638      	mov	r0, r7
 8008bee:	f7ff ffa5 	bl	8008b3c <_Bfree>
 8008bf2:	4644      	mov	r4, r8
 8008bf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bf8:	3501      	adds	r5, #1
 8008bfa:	615e      	str	r6, [r3, #20]
 8008bfc:	6125      	str	r5, [r4, #16]
 8008bfe:	4620      	mov	r0, r4
 8008c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c04:	080099ce 	.word	0x080099ce
 8008c08:	080099f0 	.word	0x080099f0

08008c0c <__hi0bits>:
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c12:	bf3a      	itte	cc
 8008c14:	0403      	lslcc	r3, r0, #16
 8008c16:	2010      	movcc	r0, #16
 8008c18:	2000      	movcs	r0, #0
 8008c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c1e:	bf3c      	itt	cc
 8008c20:	021b      	lslcc	r3, r3, #8
 8008c22:	3008      	addcc	r0, #8
 8008c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c28:	bf3c      	itt	cc
 8008c2a:	011b      	lslcc	r3, r3, #4
 8008c2c:	3004      	addcc	r0, #4
 8008c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c32:	bf3c      	itt	cc
 8008c34:	009b      	lslcc	r3, r3, #2
 8008c36:	3002      	addcc	r0, #2
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	db05      	blt.n	8008c48 <__hi0bits+0x3c>
 8008c3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c40:	f100 0001 	add.w	r0, r0, #1
 8008c44:	bf08      	it	eq
 8008c46:	2020      	moveq	r0, #32
 8008c48:	4770      	bx	lr

08008c4a <__lo0bits>:
 8008c4a:	6803      	ldr	r3, [r0, #0]
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	f013 0007 	ands.w	r0, r3, #7
 8008c52:	d00b      	beq.n	8008c6c <__lo0bits+0x22>
 8008c54:	07d9      	lsls	r1, r3, #31
 8008c56:	d421      	bmi.n	8008c9c <__lo0bits+0x52>
 8008c58:	0798      	lsls	r0, r3, #30
 8008c5a:	bf49      	itett	mi
 8008c5c:	085b      	lsrmi	r3, r3, #1
 8008c5e:	089b      	lsrpl	r3, r3, #2
 8008c60:	2001      	movmi	r0, #1
 8008c62:	6013      	strmi	r3, [r2, #0]
 8008c64:	bf5c      	itt	pl
 8008c66:	2002      	movpl	r0, #2
 8008c68:	6013      	strpl	r3, [r2, #0]
 8008c6a:	4770      	bx	lr
 8008c6c:	b299      	uxth	r1, r3
 8008c6e:	b909      	cbnz	r1, 8008c74 <__lo0bits+0x2a>
 8008c70:	2010      	movs	r0, #16
 8008c72:	0c1b      	lsrs	r3, r3, #16
 8008c74:	b2d9      	uxtb	r1, r3
 8008c76:	b909      	cbnz	r1, 8008c7c <__lo0bits+0x32>
 8008c78:	3008      	adds	r0, #8
 8008c7a:	0a1b      	lsrs	r3, r3, #8
 8008c7c:	0719      	lsls	r1, r3, #28
 8008c7e:	bf04      	itt	eq
 8008c80:	091b      	lsreq	r3, r3, #4
 8008c82:	3004      	addeq	r0, #4
 8008c84:	0799      	lsls	r1, r3, #30
 8008c86:	bf04      	itt	eq
 8008c88:	089b      	lsreq	r3, r3, #2
 8008c8a:	3002      	addeq	r0, #2
 8008c8c:	07d9      	lsls	r1, r3, #31
 8008c8e:	d403      	bmi.n	8008c98 <__lo0bits+0x4e>
 8008c90:	085b      	lsrs	r3, r3, #1
 8008c92:	f100 0001 	add.w	r0, r0, #1
 8008c96:	d003      	beq.n	8008ca0 <__lo0bits+0x56>
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	4770      	bx	lr
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	4770      	bx	lr
 8008ca0:	2020      	movs	r0, #32
 8008ca2:	4770      	bx	lr

08008ca4 <__i2b>:
 8008ca4:	b510      	push	{r4, lr}
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	2101      	movs	r1, #1
 8008caa:	f7ff ff07 	bl	8008abc <_Balloc>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	b928      	cbnz	r0, 8008cbe <__i2b+0x1a>
 8008cb2:	f240 1145 	movw	r1, #325	@ 0x145
 8008cb6:	4b04      	ldr	r3, [pc, #16]	@ (8008cc8 <__i2b+0x24>)
 8008cb8:	4804      	ldr	r0, [pc, #16]	@ (8008ccc <__i2b+0x28>)
 8008cba:	f000 fc65 	bl	8009588 <__assert_func>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	6144      	str	r4, [r0, #20]
 8008cc2:	6103      	str	r3, [r0, #16]
 8008cc4:	bd10      	pop	{r4, pc}
 8008cc6:	bf00      	nop
 8008cc8:	080099ce 	.word	0x080099ce
 8008ccc:	080099f0 	.word	0x080099f0

08008cd0 <__multiply>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	690a      	ldr	r2, [r1, #16]
 8008cd8:	6923      	ldr	r3, [r4, #16]
 8008cda:	460f      	mov	r7, r1
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	bfa2      	ittt	ge
 8008ce0:	4623      	movge	r3, r4
 8008ce2:	460c      	movge	r4, r1
 8008ce4:	461f      	movge	r7, r3
 8008ce6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008cea:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008cee:	68a3      	ldr	r3, [r4, #8]
 8008cf0:	6861      	ldr	r1, [r4, #4]
 8008cf2:	eb0a 0609 	add.w	r6, sl, r9
 8008cf6:	42b3      	cmp	r3, r6
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	bfb8      	it	lt
 8008cfc:	3101      	addlt	r1, #1
 8008cfe:	f7ff fedd 	bl	8008abc <_Balloc>
 8008d02:	b930      	cbnz	r0, 8008d12 <__multiply+0x42>
 8008d04:	4602      	mov	r2, r0
 8008d06:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d0a:	4b43      	ldr	r3, [pc, #268]	@ (8008e18 <__multiply+0x148>)
 8008d0c:	4843      	ldr	r0, [pc, #268]	@ (8008e1c <__multiply+0x14c>)
 8008d0e:	f000 fc3b 	bl	8009588 <__assert_func>
 8008d12:	f100 0514 	add.w	r5, r0, #20
 8008d16:	462b      	mov	r3, r5
 8008d18:	2200      	movs	r2, #0
 8008d1a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d1e:	4543      	cmp	r3, r8
 8008d20:	d321      	bcc.n	8008d66 <__multiply+0x96>
 8008d22:	f107 0114 	add.w	r1, r7, #20
 8008d26:	f104 0214 	add.w	r2, r4, #20
 8008d2a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d2e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d32:	9302      	str	r3, [sp, #8]
 8008d34:	1b13      	subs	r3, r2, r4
 8008d36:	3b15      	subs	r3, #21
 8008d38:	f023 0303 	bic.w	r3, r3, #3
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	f104 0715 	add.w	r7, r4, #21
 8008d42:	42ba      	cmp	r2, r7
 8008d44:	bf38      	it	cc
 8008d46:	2304      	movcc	r3, #4
 8008d48:	9301      	str	r3, [sp, #4]
 8008d4a:	9b02      	ldr	r3, [sp, #8]
 8008d4c:	9103      	str	r1, [sp, #12]
 8008d4e:	428b      	cmp	r3, r1
 8008d50:	d80c      	bhi.n	8008d6c <__multiply+0x9c>
 8008d52:	2e00      	cmp	r6, #0
 8008d54:	dd03      	ble.n	8008d5e <__multiply+0x8e>
 8008d56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d05a      	beq.n	8008e14 <__multiply+0x144>
 8008d5e:	6106      	str	r6, [r0, #16]
 8008d60:	b005      	add	sp, #20
 8008d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d66:	f843 2b04 	str.w	r2, [r3], #4
 8008d6a:	e7d8      	b.n	8008d1e <__multiply+0x4e>
 8008d6c:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d70:	f1ba 0f00 	cmp.w	sl, #0
 8008d74:	d023      	beq.n	8008dbe <__multiply+0xee>
 8008d76:	46a9      	mov	r9, r5
 8008d78:	f04f 0c00 	mov.w	ip, #0
 8008d7c:	f104 0e14 	add.w	lr, r4, #20
 8008d80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d84:	f8d9 3000 	ldr.w	r3, [r9]
 8008d88:	fa1f fb87 	uxth.w	fp, r7
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d92:	4463      	add	r3, ip
 8008d94:	f8d9 c000 	ldr.w	ip, [r9]
 8008d98:	0c3f      	lsrs	r7, r7, #16
 8008d9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008d9e:	fb0a c707 	mla	r7, sl, r7, ip
 8008da2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008dac:	4572      	cmp	r2, lr
 8008dae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008db2:	f849 3b04 	str.w	r3, [r9], #4
 8008db6:	d8e3      	bhi.n	8008d80 <__multiply+0xb0>
 8008db8:	9b01      	ldr	r3, [sp, #4]
 8008dba:	f845 c003 	str.w	ip, [r5, r3]
 8008dbe:	9b03      	ldr	r3, [sp, #12]
 8008dc0:	3104      	adds	r1, #4
 8008dc2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008dc6:	f1b9 0f00 	cmp.w	r9, #0
 8008dca:	d021      	beq.n	8008e10 <__multiply+0x140>
 8008dcc:	46ae      	mov	lr, r5
 8008dce:	f04f 0a00 	mov.w	sl, #0
 8008dd2:	682b      	ldr	r3, [r5, #0]
 8008dd4:	f104 0c14 	add.w	ip, r4, #20
 8008dd8:	f8bc b000 	ldrh.w	fp, [ip]
 8008ddc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	fb09 770b 	mla	r7, r9, fp, r7
 8008de6:	4457      	add	r7, sl
 8008de8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008dec:	f84e 3b04 	str.w	r3, [lr], #4
 8008df0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008df4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008df8:	f8be 3000 	ldrh.w	r3, [lr]
 8008dfc:	4562      	cmp	r2, ip
 8008dfe:	fb09 330a 	mla	r3, r9, sl, r3
 8008e02:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008e06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e0a:	d8e5      	bhi.n	8008dd8 <__multiply+0x108>
 8008e0c:	9f01      	ldr	r7, [sp, #4]
 8008e0e:	51eb      	str	r3, [r5, r7]
 8008e10:	3504      	adds	r5, #4
 8008e12:	e79a      	b.n	8008d4a <__multiply+0x7a>
 8008e14:	3e01      	subs	r6, #1
 8008e16:	e79c      	b.n	8008d52 <__multiply+0x82>
 8008e18:	080099ce 	.word	0x080099ce
 8008e1c:	080099f0 	.word	0x080099f0

08008e20 <__pow5mult>:
 8008e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e24:	4615      	mov	r5, r2
 8008e26:	f012 0203 	ands.w	r2, r2, #3
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	460e      	mov	r6, r1
 8008e2e:	d007      	beq.n	8008e40 <__pow5mult+0x20>
 8008e30:	4c25      	ldr	r4, [pc, #148]	@ (8008ec8 <__pow5mult+0xa8>)
 8008e32:	3a01      	subs	r2, #1
 8008e34:	2300      	movs	r3, #0
 8008e36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e3a:	f7ff fea1 	bl	8008b80 <__multadd>
 8008e3e:	4606      	mov	r6, r0
 8008e40:	10ad      	asrs	r5, r5, #2
 8008e42:	d03d      	beq.n	8008ec0 <__pow5mult+0xa0>
 8008e44:	69fc      	ldr	r4, [r7, #28]
 8008e46:	b97c      	cbnz	r4, 8008e68 <__pow5mult+0x48>
 8008e48:	2010      	movs	r0, #16
 8008e4a:	f7ff fcd9 	bl	8008800 <malloc>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	61f8      	str	r0, [r7, #28]
 8008e52:	b928      	cbnz	r0, 8008e60 <__pow5mult+0x40>
 8008e54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e58:	4b1c      	ldr	r3, [pc, #112]	@ (8008ecc <__pow5mult+0xac>)
 8008e5a:	481d      	ldr	r0, [pc, #116]	@ (8008ed0 <__pow5mult+0xb0>)
 8008e5c:	f000 fb94 	bl	8009588 <__assert_func>
 8008e60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e64:	6004      	str	r4, [r0, #0]
 8008e66:	60c4      	str	r4, [r0, #12]
 8008e68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e70:	b94c      	cbnz	r4, 8008e86 <__pow5mult+0x66>
 8008e72:	f240 2171 	movw	r1, #625	@ 0x271
 8008e76:	4638      	mov	r0, r7
 8008e78:	f7ff ff14 	bl	8008ca4 <__i2b>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e84:	6003      	str	r3, [r0, #0]
 8008e86:	f04f 0900 	mov.w	r9, #0
 8008e8a:	07eb      	lsls	r3, r5, #31
 8008e8c:	d50a      	bpl.n	8008ea4 <__pow5mult+0x84>
 8008e8e:	4631      	mov	r1, r6
 8008e90:	4622      	mov	r2, r4
 8008e92:	4638      	mov	r0, r7
 8008e94:	f7ff ff1c 	bl	8008cd0 <__multiply>
 8008e98:	4680      	mov	r8, r0
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	f7ff fe4d 	bl	8008b3c <_Bfree>
 8008ea2:	4646      	mov	r6, r8
 8008ea4:	106d      	asrs	r5, r5, #1
 8008ea6:	d00b      	beq.n	8008ec0 <__pow5mult+0xa0>
 8008ea8:	6820      	ldr	r0, [r4, #0]
 8008eaa:	b938      	cbnz	r0, 8008ebc <__pow5mult+0x9c>
 8008eac:	4622      	mov	r2, r4
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4638      	mov	r0, r7
 8008eb2:	f7ff ff0d 	bl	8008cd0 <__multiply>
 8008eb6:	6020      	str	r0, [r4, #0]
 8008eb8:	f8c0 9000 	str.w	r9, [r0]
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	e7e4      	b.n	8008e8a <__pow5mult+0x6a>
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec6:	bf00      	nop
 8008ec8:	08009a4c 	.word	0x08009a4c
 8008ecc:	0800995f 	.word	0x0800995f
 8008ed0:	080099f0 	.word	0x080099f0

08008ed4 <__lshift>:
 8008ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed8:	460c      	mov	r4, r1
 8008eda:	4607      	mov	r7, r0
 8008edc:	4691      	mov	r9, r2
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	6849      	ldr	r1, [r1, #4]
 8008ee2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ee6:	68a3      	ldr	r3, [r4, #8]
 8008ee8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008eec:	f108 0601 	add.w	r6, r8, #1
 8008ef0:	42b3      	cmp	r3, r6
 8008ef2:	db0b      	blt.n	8008f0c <__lshift+0x38>
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	f7ff fde1 	bl	8008abc <_Balloc>
 8008efa:	4605      	mov	r5, r0
 8008efc:	b948      	cbnz	r0, 8008f12 <__lshift+0x3e>
 8008efe:	4602      	mov	r2, r0
 8008f00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f04:	4b27      	ldr	r3, [pc, #156]	@ (8008fa4 <__lshift+0xd0>)
 8008f06:	4828      	ldr	r0, [pc, #160]	@ (8008fa8 <__lshift+0xd4>)
 8008f08:	f000 fb3e 	bl	8009588 <__assert_func>
 8008f0c:	3101      	adds	r1, #1
 8008f0e:	005b      	lsls	r3, r3, #1
 8008f10:	e7ee      	b.n	8008ef0 <__lshift+0x1c>
 8008f12:	2300      	movs	r3, #0
 8008f14:	f100 0114 	add.w	r1, r0, #20
 8008f18:	f100 0210 	add.w	r2, r0, #16
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	4553      	cmp	r3, sl
 8008f20:	db33      	blt.n	8008f8a <__lshift+0xb6>
 8008f22:	6920      	ldr	r0, [r4, #16]
 8008f24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f28:	f104 0314 	add.w	r3, r4, #20
 8008f2c:	f019 091f 	ands.w	r9, r9, #31
 8008f30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f38:	d02b      	beq.n	8008f92 <__lshift+0xbe>
 8008f3a:	468a      	mov	sl, r1
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f1c9 0e20 	rsb	lr, r9, #32
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	fa00 f009 	lsl.w	r0, r0, r9
 8008f48:	4310      	orrs	r0, r2
 8008f4a:	f84a 0b04 	str.w	r0, [sl], #4
 8008f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f52:	459c      	cmp	ip, r3
 8008f54:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f58:	d8f3      	bhi.n	8008f42 <__lshift+0x6e>
 8008f5a:	ebac 0304 	sub.w	r3, ip, r4
 8008f5e:	3b15      	subs	r3, #21
 8008f60:	f023 0303 	bic.w	r3, r3, #3
 8008f64:	3304      	adds	r3, #4
 8008f66:	f104 0015 	add.w	r0, r4, #21
 8008f6a:	4584      	cmp	ip, r0
 8008f6c:	bf38      	it	cc
 8008f6e:	2304      	movcc	r3, #4
 8008f70:	50ca      	str	r2, [r1, r3]
 8008f72:	b10a      	cbz	r2, 8008f78 <__lshift+0xa4>
 8008f74:	f108 0602 	add.w	r6, r8, #2
 8008f78:	3e01      	subs	r6, #1
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	612e      	str	r6, [r5, #16]
 8008f80:	f7ff fddc 	bl	8008b3c <_Bfree>
 8008f84:	4628      	mov	r0, r5
 8008f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f8e:	3301      	adds	r3, #1
 8008f90:	e7c5      	b.n	8008f1e <__lshift+0x4a>
 8008f92:	3904      	subs	r1, #4
 8008f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f98:	459c      	cmp	ip, r3
 8008f9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f9e:	d8f9      	bhi.n	8008f94 <__lshift+0xc0>
 8008fa0:	e7ea      	b.n	8008f78 <__lshift+0xa4>
 8008fa2:	bf00      	nop
 8008fa4:	080099ce 	.word	0x080099ce
 8008fa8:	080099f0 	.word	0x080099f0

08008fac <__mcmp>:
 8008fac:	4603      	mov	r3, r0
 8008fae:	690a      	ldr	r2, [r1, #16]
 8008fb0:	6900      	ldr	r0, [r0, #16]
 8008fb2:	b530      	push	{r4, r5, lr}
 8008fb4:	1a80      	subs	r0, r0, r2
 8008fb6:	d10e      	bne.n	8008fd6 <__mcmp+0x2a>
 8008fb8:	3314      	adds	r3, #20
 8008fba:	3114      	adds	r1, #20
 8008fbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fcc:	4295      	cmp	r5, r2
 8008fce:	d003      	beq.n	8008fd8 <__mcmp+0x2c>
 8008fd0:	d205      	bcs.n	8008fde <__mcmp+0x32>
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fd6:	bd30      	pop	{r4, r5, pc}
 8008fd8:	42a3      	cmp	r3, r4
 8008fda:	d3f3      	bcc.n	8008fc4 <__mcmp+0x18>
 8008fdc:	e7fb      	b.n	8008fd6 <__mcmp+0x2a>
 8008fde:	2001      	movs	r0, #1
 8008fe0:	e7f9      	b.n	8008fd6 <__mcmp+0x2a>
	...

08008fe4 <__mdiff>:
 8008fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	4689      	mov	r9, r1
 8008fea:	4606      	mov	r6, r0
 8008fec:	4611      	mov	r1, r2
 8008fee:	4648      	mov	r0, r9
 8008ff0:	4614      	mov	r4, r2
 8008ff2:	f7ff ffdb 	bl	8008fac <__mcmp>
 8008ff6:	1e05      	subs	r5, r0, #0
 8008ff8:	d112      	bne.n	8009020 <__mdiff+0x3c>
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f7ff fd5d 	bl	8008abc <_Balloc>
 8009002:	4602      	mov	r2, r0
 8009004:	b928      	cbnz	r0, 8009012 <__mdiff+0x2e>
 8009006:	f240 2137 	movw	r1, #567	@ 0x237
 800900a:	4b3e      	ldr	r3, [pc, #248]	@ (8009104 <__mdiff+0x120>)
 800900c:	483e      	ldr	r0, [pc, #248]	@ (8009108 <__mdiff+0x124>)
 800900e:	f000 fabb 	bl	8009588 <__assert_func>
 8009012:	2301      	movs	r3, #1
 8009014:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009018:	4610      	mov	r0, r2
 800901a:	b003      	add	sp, #12
 800901c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009020:	bfbc      	itt	lt
 8009022:	464b      	movlt	r3, r9
 8009024:	46a1      	movlt	r9, r4
 8009026:	4630      	mov	r0, r6
 8009028:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800902c:	bfba      	itte	lt
 800902e:	461c      	movlt	r4, r3
 8009030:	2501      	movlt	r5, #1
 8009032:	2500      	movge	r5, #0
 8009034:	f7ff fd42 	bl	8008abc <_Balloc>
 8009038:	4602      	mov	r2, r0
 800903a:	b918      	cbnz	r0, 8009044 <__mdiff+0x60>
 800903c:	f240 2145 	movw	r1, #581	@ 0x245
 8009040:	4b30      	ldr	r3, [pc, #192]	@ (8009104 <__mdiff+0x120>)
 8009042:	e7e3      	b.n	800900c <__mdiff+0x28>
 8009044:	f100 0b14 	add.w	fp, r0, #20
 8009048:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800904c:	f109 0310 	add.w	r3, r9, #16
 8009050:	60c5      	str	r5, [r0, #12]
 8009052:	f04f 0c00 	mov.w	ip, #0
 8009056:	f109 0514 	add.w	r5, r9, #20
 800905a:	46d9      	mov	r9, fp
 800905c:	6926      	ldr	r6, [r4, #16]
 800905e:	f104 0e14 	add.w	lr, r4, #20
 8009062:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009066:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	9b01      	ldr	r3, [sp, #4]
 800906e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009072:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009076:	b281      	uxth	r1, r0
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	fa1f f38a 	uxth.w	r3, sl
 800907e:	1a5b      	subs	r3, r3, r1
 8009080:	0c00      	lsrs	r0, r0, #16
 8009082:	4463      	add	r3, ip
 8009084:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009088:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800908c:	b29b      	uxth	r3, r3
 800908e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009092:	4576      	cmp	r6, lr
 8009094:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009098:	f849 3b04 	str.w	r3, [r9], #4
 800909c:	d8e6      	bhi.n	800906c <__mdiff+0x88>
 800909e:	1b33      	subs	r3, r6, r4
 80090a0:	3b15      	subs	r3, #21
 80090a2:	f023 0303 	bic.w	r3, r3, #3
 80090a6:	3415      	adds	r4, #21
 80090a8:	3304      	adds	r3, #4
 80090aa:	42a6      	cmp	r6, r4
 80090ac:	bf38      	it	cc
 80090ae:	2304      	movcc	r3, #4
 80090b0:	441d      	add	r5, r3
 80090b2:	445b      	add	r3, fp
 80090b4:	461e      	mov	r6, r3
 80090b6:	462c      	mov	r4, r5
 80090b8:	4544      	cmp	r4, r8
 80090ba:	d30e      	bcc.n	80090da <__mdiff+0xf6>
 80090bc:	f108 0103 	add.w	r1, r8, #3
 80090c0:	1b49      	subs	r1, r1, r5
 80090c2:	f021 0103 	bic.w	r1, r1, #3
 80090c6:	3d03      	subs	r5, #3
 80090c8:	45a8      	cmp	r8, r5
 80090ca:	bf38      	it	cc
 80090cc:	2100      	movcc	r1, #0
 80090ce:	440b      	add	r3, r1
 80090d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090d4:	b199      	cbz	r1, 80090fe <__mdiff+0x11a>
 80090d6:	6117      	str	r7, [r2, #16]
 80090d8:	e79e      	b.n	8009018 <__mdiff+0x34>
 80090da:	46e6      	mov	lr, ip
 80090dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80090e0:	fa1f fc81 	uxth.w	ip, r1
 80090e4:	44f4      	add	ip, lr
 80090e6:	0c08      	lsrs	r0, r1, #16
 80090e8:	4471      	add	r1, lr
 80090ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80090ee:	b289      	uxth	r1, r1
 80090f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090f8:	f846 1b04 	str.w	r1, [r6], #4
 80090fc:	e7dc      	b.n	80090b8 <__mdiff+0xd4>
 80090fe:	3f01      	subs	r7, #1
 8009100:	e7e6      	b.n	80090d0 <__mdiff+0xec>
 8009102:	bf00      	nop
 8009104:	080099ce 	.word	0x080099ce
 8009108:	080099f0 	.word	0x080099f0

0800910c <__d2b>:
 800910c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009110:	2101      	movs	r1, #1
 8009112:	4690      	mov	r8, r2
 8009114:	4699      	mov	r9, r3
 8009116:	9e08      	ldr	r6, [sp, #32]
 8009118:	f7ff fcd0 	bl	8008abc <_Balloc>
 800911c:	4604      	mov	r4, r0
 800911e:	b930      	cbnz	r0, 800912e <__d2b+0x22>
 8009120:	4602      	mov	r2, r0
 8009122:	f240 310f 	movw	r1, #783	@ 0x30f
 8009126:	4b23      	ldr	r3, [pc, #140]	@ (80091b4 <__d2b+0xa8>)
 8009128:	4823      	ldr	r0, [pc, #140]	@ (80091b8 <__d2b+0xac>)
 800912a:	f000 fa2d 	bl	8009588 <__assert_func>
 800912e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009132:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009136:	b10d      	cbz	r5, 800913c <__d2b+0x30>
 8009138:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	f1b8 0300 	subs.w	r3, r8, #0
 8009142:	d024      	beq.n	800918e <__d2b+0x82>
 8009144:	4668      	mov	r0, sp
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	f7ff fd7f 	bl	8008c4a <__lo0bits>
 800914c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009150:	b1d8      	cbz	r0, 800918a <__d2b+0x7e>
 8009152:	f1c0 0320 	rsb	r3, r0, #32
 8009156:	fa02 f303 	lsl.w	r3, r2, r3
 800915a:	430b      	orrs	r3, r1
 800915c:	40c2      	lsrs	r2, r0
 800915e:	6163      	str	r3, [r4, #20]
 8009160:	9201      	str	r2, [sp, #4]
 8009162:	9b01      	ldr	r3, [sp, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	bf0c      	ite	eq
 8009168:	2201      	moveq	r2, #1
 800916a:	2202      	movne	r2, #2
 800916c:	61a3      	str	r3, [r4, #24]
 800916e:	6122      	str	r2, [r4, #16]
 8009170:	b1ad      	cbz	r5, 800919e <__d2b+0x92>
 8009172:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009176:	4405      	add	r5, r0
 8009178:	6035      	str	r5, [r6, #0]
 800917a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800917e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009180:	6018      	str	r0, [r3, #0]
 8009182:	4620      	mov	r0, r4
 8009184:	b002      	add	sp, #8
 8009186:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800918a:	6161      	str	r1, [r4, #20]
 800918c:	e7e9      	b.n	8009162 <__d2b+0x56>
 800918e:	a801      	add	r0, sp, #4
 8009190:	f7ff fd5b 	bl	8008c4a <__lo0bits>
 8009194:	9b01      	ldr	r3, [sp, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	6163      	str	r3, [r4, #20]
 800919a:	3020      	adds	r0, #32
 800919c:	e7e7      	b.n	800916e <__d2b+0x62>
 800919e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80091a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091a6:	6030      	str	r0, [r6, #0]
 80091a8:	6918      	ldr	r0, [r3, #16]
 80091aa:	f7ff fd2f 	bl	8008c0c <__hi0bits>
 80091ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091b2:	e7e4      	b.n	800917e <__d2b+0x72>
 80091b4:	080099ce 	.word	0x080099ce
 80091b8:	080099f0 	.word	0x080099f0

080091bc <__sread>:
 80091bc:	b510      	push	{r4, lr}
 80091be:	460c      	mov	r4, r1
 80091c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c4:	f000 f9ac 	bl	8009520 <_read_r>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	bfab      	itete	ge
 80091cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80091ce:	89a3      	ldrhlt	r3, [r4, #12]
 80091d0:	181b      	addge	r3, r3, r0
 80091d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80091d6:	bfac      	ite	ge
 80091d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80091da:	81a3      	strhlt	r3, [r4, #12]
 80091dc:	bd10      	pop	{r4, pc}

080091de <__swrite>:
 80091de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e2:	461f      	mov	r7, r3
 80091e4:	898b      	ldrh	r3, [r1, #12]
 80091e6:	4605      	mov	r5, r0
 80091e8:	05db      	lsls	r3, r3, #23
 80091ea:	460c      	mov	r4, r1
 80091ec:	4616      	mov	r6, r2
 80091ee:	d505      	bpl.n	80091fc <__swrite+0x1e>
 80091f0:	2302      	movs	r3, #2
 80091f2:	2200      	movs	r2, #0
 80091f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f8:	f000 f980 	bl	80094fc <_lseek_r>
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	4632      	mov	r2, r6
 8009200:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009204:	81a3      	strh	r3, [r4, #12]
 8009206:	4628      	mov	r0, r5
 8009208:	463b      	mov	r3, r7
 800920a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800920e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009212:	f000 b9a7 	b.w	8009564 <_write_r>

08009216 <__sseek>:
 8009216:	b510      	push	{r4, lr}
 8009218:	460c      	mov	r4, r1
 800921a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800921e:	f000 f96d 	bl	80094fc <_lseek_r>
 8009222:	1c43      	adds	r3, r0, #1
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	bf15      	itete	ne
 8009228:	6560      	strne	r0, [r4, #84]	@ 0x54
 800922a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800922e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009232:	81a3      	strheq	r3, [r4, #12]
 8009234:	bf18      	it	ne
 8009236:	81a3      	strhne	r3, [r4, #12]
 8009238:	bd10      	pop	{r4, pc}

0800923a <__sclose>:
 800923a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923e:	f000 b92b 	b.w	8009498 <_close_r>

08009242 <__swbuf_r>:
 8009242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009244:	460e      	mov	r6, r1
 8009246:	4614      	mov	r4, r2
 8009248:	4605      	mov	r5, r0
 800924a:	b118      	cbz	r0, 8009254 <__swbuf_r+0x12>
 800924c:	6a03      	ldr	r3, [r0, #32]
 800924e:	b90b      	cbnz	r3, 8009254 <__swbuf_r+0x12>
 8009250:	f7fe f9a4 	bl	800759c <__sinit>
 8009254:	69a3      	ldr	r3, [r4, #24]
 8009256:	60a3      	str	r3, [r4, #8]
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	071a      	lsls	r2, r3, #28
 800925c:	d501      	bpl.n	8009262 <__swbuf_r+0x20>
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	b943      	cbnz	r3, 8009274 <__swbuf_r+0x32>
 8009262:	4621      	mov	r1, r4
 8009264:	4628      	mov	r0, r5
 8009266:	f000 f82b 	bl	80092c0 <__swsetup_r>
 800926a:	b118      	cbz	r0, 8009274 <__swbuf_r+0x32>
 800926c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009270:	4638      	mov	r0, r7
 8009272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	6922      	ldr	r2, [r4, #16]
 8009278:	b2f6      	uxtb	r6, r6
 800927a:	1a98      	subs	r0, r3, r2
 800927c:	6963      	ldr	r3, [r4, #20]
 800927e:	4637      	mov	r7, r6
 8009280:	4283      	cmp	r3, r0
 8009282:	dc05      	bgt.n	8009290 <__swbuf_r+0x4e>
 8009284:	4621      	mov	r1, r4
 8009286:	4628      	mov	r0, r5
 8009288:	f7ff fbe4 	bl	8008a54 <_fflush_r>
 800928c:	2800      	cmp	r0, #0
 800928e:	d1ed      	bne.n	800926c <__swbuf_r+0x2a>
 8009290:	68a3      	ldr	r3, [r4, #8]
 8009292:	3b01      	subs	r3, #1
 8009294:	60a3      	str	r3, [r4, #8]
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	1c5a      	adds	r2, r3, #1
 800929a:	6022      	str	r2, [r4, #0]
 800929c:	701e      	strb	r6, [r3, #0]
 800929e:	6962      	ldr	r2, [r4, #20]
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d004      	beq.n	80092b0 <__swbuf_r+0x6e>
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	07db      	lsls	r3, r3, #31
 80092aa:	d5e1      	bpl.n	8009270 <__swbuf_r+0x2e>
 80092ac:	2e0a      	cmp	r6, #10
 80092ae:	d1df      	bne.n	8009270 <__swbuf_r+0x2e>
 80092b0:	4621      	mov	r1, r4
 80092b2:	4628      	mov	r0, r5
 80092b4:	f7ff fbce 	bl	8008a54 <_fflush_r>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d0d9      	beq.n	8009270 <__swbuf_r+0x2e>
 80092bc:	e7d6      	b.n	800926c <__swbuf_r+0x2a>
	...

080092c0 <__swsetup_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4b29      	ldr	r3, [pc, #164]	@ (8009368 <__swsetup_r+0xa8>)
 80092c4:	4605      	mov	r5, r0
 80092c6:	6818      	ldr	r0, [r3, #0]
 80092c8:	460c      	mov	r4, r1
 80092ca:	b118      	cbz	r0, 80092d4 <__swsetup_r+0x14>
 80092cc:	6a03      	ldr	r3, [r0, #32]
 80092ce:	b90b      	cbnz	r3, 80092d4 <__swsetup_r+0x14>
 80092d0:	f7fe f964 	bl	800759c <__sinit>
 80092d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d8:	0719      	lsls	r1, r3, #28
 80092da:	d422      	bmi.n	8009322 <__swsetup_r+0x62>
 80092dc:	06da      	lsls	r2, r3, #27
 80092de:	d407      	bmi.n	80092f0 <__swsetup_r+0x30>
 80092e0:	2209      	movs	r2, #9
 80092e2:	602a      	str	r2, [r5, #0]
 80092e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092ec:	81a3      	strh	r3, [r4, #12]
 80092ee:	e033      	b.n	8009358 <__swsetup_r+0x98>
 80092f0:	0758      	lsls	r0, r3, #29
 80092f2:	d512      	bpl.n	800931a <__swsetup_r+0x5a>
 80092f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092f6:	b141      	cbz	r1, 800930a <__swsetup_r+0x4a>
 80092f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092fc:	4299      	cmp	r1, r3
 80092fe:	d002      	beq.n	8009306 <__swsetup_r+0x46>
 8009300:	4628      	mov	r0, r5
 8009302:	f7ff f8f5 	bl	80084f0 <_free_r>
 8009306:	2300      	movs	r3, #0
 8009308:	6363      	str	r3, [r4, #52]	@ 0x34
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009310:	81a3      	strh	r3, [r4, #12]
 8009312:	2300      	movs	r3, #0
 8009314:	6063      	str	r3, [r4, #4]
 8009316:	6923      	ldr	r3, [r4, #16]
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	89a3      	ldrh	r3, [r4, #12]
 800931c:	f043 0308 	orr.w	r3, r3, #8
 8009320:	81a3      	strh	r3, [r4, #12]
 8009322:	6923      	ldr	r3, [r4, #16]
 8009324:	b94b      	cbnz	r3, 800933a <__swsetup_r+0x7a>
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800932c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009330:	d003      	beq.n	800933a <__swsetup_r+0x7a>
 8009332:	4621      	mov	r1, r4
 8009334:	4628      	mov	r0, r5
 8009336:	f000 f83e 	bl	80093b6 <__smakebuf_r>
 800933a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800933e:	f013 0201 	ands.w	r2, r3, #1
 8009342:	d00a      	beq.n	800935a <__swsetup_r+0x9a>
 8009344:	2200      	movs	r2, #0
 8009346:	60a2      	str	r2, [r4, #8]
 8009348:	6962      	ldr	r2, [r4, #20]
 800934a:	4252      	negs	r2, r2
 800934c:	61a2      	str	r2, [r4, #24]
 800934e:	6922      	ldr	r2, [r4, #16]
 8009350:	b942      	cbnz	r2, 8009364 <__swsetup_r+0xa4>
 8009352:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009356:	d1c5      	bne.n	80092e4 <__swsetup_r+0x24>
 8009358:	bd38      	pop	{r3, r4, r5, pc}
 800935a:	0799      	lsls	r1, r3, #30
 800935c:	bf58      	it	pl
 800935e:	6962      	ldrpl	r2, [r4, #20]
 8009360:	60a2      	str	r2, [r4, #8]
 8009362:	e7f4      	b.n	800934e <__swsetup_r+0x8e>
 8009364:	2000      	movs	r0, #0
 8009366:	e7f7      	b.n	8009358 <__swsetup_r+0x98>
 8009368:	2000001c 	.word	0x2000001c

0800936c <__swhatbuf_r>:
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	460c      	mov	r4, r1
 8009370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009374:	4615      	mov	r5, r2
 8009376:	2900      	cmp	r1, #0
 8009378:	461e      	mov	r6, r3
 800937a:	b096      	sub	sp, #88	@ 0x58
 800937c:	da0c      	bge.n	8009398 <__swhatbuf_r+0x2c>
 800937e:	89a3      	ldrh	r3, [r4, #12]
 8009380:	2100      	movs	r1, #0
 8009382:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009386:	bf14      	ite	ne
 8009388:	2340      	movne	r3, #64	@ 0x40
 800938a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800938e:	2000      	movs	r0, #0
 8009390:	6031      	str	r1, [r6, #0]
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	b016      	add	sp, #88	@ 0x58
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	466a      	mov	r2, sp
 800939a:	f000 f88d 	bl	80094b8 <_fstat_r>
 800939e:	2800      	cmp	r0, #0
 80093a0:	dbed      	blt.n	800937e <__swhatbuf_r+0x12>
 80093a2:	9901      	ldr	r1, [sp, #4]
 80093a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093ac:	4259      	negs	r1, r3
 80093ae:	4159      	adcs	r1, r3
 80093b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093b4:	e7eb      	b.n	800938e <__swhatbuf_r+0x22>

080093b6 <__smakebuf_r>:
 80093b6:	898b      	ldrh	r3, [r1, #12]
 80093b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ba:	079d      	lsls	r5, r3, #30
 80093bc:	4606      	mov	r6, r0
 80093be:	460c      	mov	r4, r1
 80093c0:	d507      	bpl.n	80093d2 <__smakebuf_r+0x1c>
 80093c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	6123      	str	r3, [r4, #16]
 80093ca:	2301      	movs	r3, #1
 80093cc:	6163      	str	r3, [r4, #20]
 80093ce:	b003      	add	sp, #12
 80093d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093d2:	466a      	mov	r2, sp
 80093d4:	ab01      	add	r3, sp, #4
 80093d6:	f7ff ffc9 	bl	800936c <__swhatbuf_r>
 80093da:	9f00      	ldr	r7, [sp, #0]
 80093dc:	4605      	mov	r5, r0
 80093de:	4639      	mov	r1, r7
 80093e0:	4630      	mov	r0, r6
 80093e2:	f7ff fa37 	bl	8008854 <_malloc_r>
 80093e6:	b948      	cbnz	r0, 80093fc <__smakebuf_r+0x46>
 80093e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ec:	059a      	lsls	r2, r3, #22
 80093ee:	d4ee      	bmi.n	80093ce <__smakebuf_r+0x18>
 80093f0:	f023 0303 	bic.w	r3, r3, #3
 80093f4:	f043 0302 	orr.w	r3, r3, #2
 80093f8:	81a3      	strh	r3, [r4, #12]
 80093fa:	e7e2      	b.n	80093c2 <__smakebuf_r+0xc>
 80093fc:	89a3      	ldrh	r3, [r4, #12]
 80093fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009406:	81a3      	strh	r3, [r4, #12]
 8009408:	9b01      	ldr	r3, [sp, #4]
 800940a:	6020      	str	r0, [r4, #0]
 800940c:	b15b      	cbz	r3, 8009426 <__smakebuf_r+0x70>
 800940e:	4630      	mov	r0, r6
 8009410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009414:	f000 f862 	bl	80094dc <_isatty_r>
 8009418:	b128      	cbz	r0, 8009426 <__smakebuf_r+0x70>
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	f023 0303 	bic.w	r3, r3, #3
 8009420:	f043 0301 	orr.w	r3, r3, #1
 8009424:	81a3      	strh	r3, [r4, #12]
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	431d      	orrs	r5, r3
 800942a:	81a5      	strh	r5, [r4, #12]
 800942c:	e7cf      	b.n	80093ce <__smakebuf_r+0x18>

0800942e <_putc_r>:
 800942e:	b570      	push	{r4, r5, r6, lr}
 8009430:	460d      	mov	r5, r1
 8009432:	4614      	mov	r4, r2
 8009434:	4606      	mov	r6, r0
 8009436:	b118      	cbz	r0, 8009440 <_putc_r+0x12>
 8009438:	6a03      	ldr	r3, [r0, #32]
 800943a:	b90b      	cbnz	r3, 8009440 <_putc_r+0x12>
 800943c:	f7fe f8ae 	bl	800759c <__sinit>
 8009440:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009442:	07d8      	lsls	r0, r3, #31
 8009444:	d405      	bmi.n	8009452 <_putc_r+0x24>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	0599      	lsls	r1, r3, #22
 800944a:	d402      	bmi.n	8009452 <_putc_r+0x24>
 800944c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800944e:	f7fe f9e0 	bl	8007812 <__retarget_lock_acquire_recursive>
 8009452:	68a3      	ldr	r3, [r4, #8]
 8009454:	3b01      	subs	r3, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	60a3      	str	r3, [r4, #8]
 800945a:	da05      	bge.n	8009468 <_putc_r+0x3a>
 800945c:	69a2      	ldr	r2, [r4, #24]
 800945e:	4293      	cmp	r3, r2
 8009460:	db12      	blt.n	8009488 <_putc_r+0x5a>
 8009462:	b2eb      	uxtb	r3, r5
 8009464:	2b0a      	cmp	r3, #10
 8009466:	d00f      	beq.n	8009488 <_putc_r+0x5a>
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	6022      	str	r2, [r4, #0]
 800946e:	701d      	strb	r5, [r3, #0]
 8009470:	b2ed      	uxtb	r5, r5
 8009472:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009474:	07da      	lsls	r2, r3, #31
 8009476:	d405      	bmi.n	8009484 <_putc_r+0x56>
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	059b      	lsls	r3, r3, #22
 800947c:	d402      	bmi.n	8009484 <_putc_r+0x56>
 800947e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009480:	f7fe f9c8 	bl	8007814 <__retarget_lock_release_recursive>
 8009484:	4628      	mov	r0, r5
 8009486:	bd70      	pop	{r4, r5, r6, pc}
 8009488:	4629      	mov	r1, r5
 800948a:	4622      	mov	r2, r4
 800948c:	4630      	mov	r0, r6
 800948e:	f7ff fed8 	bl	8009242 <__swbuf_r>
 8009492:	4605      	mov	r5, r0
 8009494:	e7ed      	b.n	8009472 <_putc_r+0x44>
	...

08009498 <_close_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	2300      	movs	r3, #0
 800949c:	4d05      	ldr	r5, [pc, #20]	@ (80094b4 <_close_r+0x1c>)
 800949e:	4604      	mov	r4, r0
 80094a0:	4608      	mov	r0, r1
 80094a2:	602b      	str	r3, [r5, #0]
 80094a4:	f7f8 fe8c 	bl	80021c0 <_close>
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	d102      	bne.n	80094b2 <_close_r+0x1a>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	b103      	cbz	r3, 80094b2 <_close_r+0x1a>
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	20002230 	.word	0x20002230

080094b8 <_fstat_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	2300      	movs	r3, #0
 80094bc:	4d06      	ldr	r5, [pc, #24]	@ (80094d8 <_fstat_r+0x20>)
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	4611      	mov	r1, r2
 80094c4:	602b      	str	r3, [r5, #0]
 80094c6:	f7f8 fe86 	bl	80021d6 <_fstat>
 80094ca:	1c43      	adds	r3, r0, #1
 80094cc:	d102      	bne.n	80094d4 <_fstat_r+0x1c>
 80094ce:	682b      	ldr	r3, [r5, #0]
 80094d0:	b103      	cbz	r3, 80094d4 <_fstat_r+0x1c>
 80094d2:	6023      	str	r3, [r4, #0]
 80094d4:	bd38      	pop	{r3, r4, r5, pc}
 80094d6:	bf00      	nop
 80094d8:	20002230 	.word	0x20002230

080094dc <_isatty_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	2300      	movs	r3, #0
 80094e0:	4d05      	ldr	r5, [pc, #20]	@ (80094f8 <_isatty_r+0x1c>)
 80094e2:	4604      	mov	r4, r0
 80094e4:	4608      	mov	r0, r1
 80094e6:	602b      	str	r3, [r5, #0]
 80094e8:	f7f8 fe84 	bl	80021f4 <_isatty>
 80094ec:	1c43      	adds	r3, r0, #1
 80094ee:	d102      	bne.n	80094f6 <_isatty_r+0x1a>
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	b103      	cbz	r3, 80094f6 <_isatty_r+0x1a>
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	20002230 	.word	0x20002230

080094fc <_lseek_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4604      	mov	r4, r0
 8009500:	4608      	mov	r0, r1
 8009502:	4611      	mov	r1, r2
 8009504:	2200      	movs	r2, #0
 8009506:	4d05      	ldr	r5, [pc, #20]	@ (800951c <_lseek_r+0x20>)
 8009508:	602a      	str	r2, [r5, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	f7f8 fe7c 	bl	8002208 <_lseek>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_lseek_r+0x1e>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_lseek_r+0x1e>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	20002230 	.word	0x20002230

08009520 <_read_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4604      	mov	r4, r0
 8009524:	4608      	mov	r0, r1
 8009526:	4611      	mov	r1, r2
 8009528:	2200      	movs	r2, #0
 800952a:	4d05      	ldr	r5, [pc, #20]	@ (8009540 <_read_r+0x20>)
 800952c:	602a      	str	r2, [r5, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	f7f8 fe0d 	bl	800214e <_read>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d102      	bne.n	800953e <_read_r+0x1e>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	b103      	cbz	r3, 800953e <_read_r+0x1e>
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	20002230 	.word	0x20002230

08009544 <_sbrk_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	2300      	movs	r3, #0
 8009548:	4d05      	ldr	r5, [pc, #20]	@ (8009560 <_sbrk_r+0x1c>)
 800954a:	4604      	mov	r4, r0
 800954c:	4608      	mov	r0, r1
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	f7f8 fe66 	bl	8002220 <_sbrk>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	d102      	bne.n	800955e <_sbrk_r+0x1a>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	b103      	cbz	r3, 800955e <_sbrk_r+0x1a>
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	20002230 	.word	0x20002230

08009564 <_write_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4604      	mov	r4, r0
 8009568:	4608      	mov	r0, r1
 800956a:	4611      	mov	r1, r2
 800956c:	2200      	movs	r2, #0
 800956e:	4d05      	ldr	r5, [pc, #20]	@ (8009584 <_write_r+0x20>)
 8009570:	602a      	str	r2, [r5, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	f7f8 fe08 	bl	8002188 <_write>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d102      	bne.n	8009582 <_write_r+0x1e>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	b103      	cbz	r3, 8009582 <_write_r+0x1e>
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	20002230 	.word	0x20002230

08009588 <__assert_func>:
 8009588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800958a:	4614      	mov	r4, r2
 800958c:	461a      	mov	r2, r3
 800958e:	4b09      	ldr	r3, [pc, #36]	@ (80095b4 <__assert_func+0x2c>)
 8009590:	4605      	mov	r5, r0
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68d8      	ldr	r0, [r3, #12]
 8009596:	b954      	cbnz	r4, 80095ae <__assert_func+0x26>
 8009598:	4b07      	ldr	r3, [pc, #28]	@ (80095b8 <__assert_func+0x30>)
 800959a:	461c      	mov	r4, r3
 800959c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095a0:	9100      	str	r1, [sp, #0]
 80095a2:	462b      	mov	r3, r5
 80095a4:	4905      	ldr	r1, [pc, #20]	@ (80095bc <__assert_func+0x34>)
 80095a6:	f000 f833 	bl	8009610 <fiprintf>
 80095aa:	f000 f850 	bl	800964e <abort>
 80095ae:	4b04      	ldr	r3, [pc, #16]	@ (80095c0 <__assert_func+0x38>)
 80095b0:	e7f4      	b.n	800959c <__assert_func+0x14>
 80095b2:	bf00      	nop
 80095b4:	2000001c 	.word	0x2000001c
 80095b8:	08009c8e 	.word	0x08009c8e
 80095bc:	08009c60 	.word	0x08009c60
 80095c0:	08009c53 	.word	0x08009c53

080095c4 <_calloc_r>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	fba1 5402 	umull	r5, r4, r1, r2
 80095ca:	b93c      	cbnz	r4, 80095dc <_calloc_r+0x18>
 80095cc:	4629      	mov	r1, r5
 80095ce:	f7ff f941 	bl	8008854 <_malloc_r>
 80095d2:	4606      	mov	r6, r0
 80095d4:	b928      	cbnz	r0, 80095e2 <_calloc_r+0x1e>
 80095d6:	2600      	movs	r6, #0
 80095d8:	4630      	mov	r0, r6
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	220c      	movs	r2, #12
 80095de:	6002      	str	r2, [r0, #0]
 80095e0:	e7f9      	b.n	80095d6 <_calloc_r+0x12>
 80095e2:	462a      	mov	r2, r5
 80095e4:	4621      	mov	r1, r4
 80095e6:	f7fe f887 	bl	80076f8 <memset>
 80095ea:	e7f5      	b.n	80095d8 <_calloc_r+0x14>

080095ec <__ascii_mbtowc>:
 80095ec:	b082      	sub	sp, #8
 80095ee:	b901      	cbnz	r1, 80095f2 <__ascii_mbtowc+0x6>
 80095f0:	a901      	add	r1, sp, #4
 80095f2:	b142      	cbz	r2, 8009606 <__ascii_mbtowc+0x1a>
 80095f4:	b14b      	cbz	r3, 800960a <__ascii_mbtowc+0x1e>
 80095f6:	7813      	ldrb	r3, [r2, #0]
 80095f8:	600b      	str	r3, [r1, #0]
 80095fa:	7812      	ldrb	r2, [r2, #0]
 80095fc:	1e10      	subs	r0, r2, #0
 80095fe:	bf18      	it	ne
 8009600:	2001      	movne	r0, #1
 8009602:	b002      	add	sp, #8
 8009604:	4770      	bx	lr
 8009606:	4610      	mov	r0, r2
 8009608:	e7fb      	b.n	8009602 <__ascii_mbtowc+0x16>
 800960a:	f06f 0001 	mvn.w	r0, #1
 800960e:	e7f8      	b.n	8009602 <__ascii_mbtowc+0x16>

08009610 <fiprintf>:
 8009610:	b40e      	push	{r1, r2, r3}
 8009612:	b503      	push	{r0, r1, lr}
 8009614:	4601      	mov	r1, r0
 8009616:	ab03      	add	r3, sp, #12
 8009618:	4805      	ldr	r0, [pc, #20]	@ (8009630 <fiprintf+0x20>)
 800961a:	f853 2b04 	ldr.w	r2, [r3], #4
 800961e:	6800      	ldr	r0, [r0, #0]
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	f7fe ffd5 	bl	80085d0 <_vfiprintf_r>
 8009626:	b002      	add	sp, #8
 8009628:	f85d eb04 	ldr.w	lr, [sp], #4
 800962c:	b003      	add	sp, #12
 800962e:	4770      	bx	lr
 8009630:	2000001c 	.word	0x2000001c

08009634 <__ascii_wctomb>:
 8009634:	4603      	mov	r3, r0
 8009636:	4608      	mov	r0, r1
 8009638:	b141      	cbz	r1, 800964c <__ascii_wctomb+0x18>
 800963a:	2aff      	cmp	r2, #255	@ 0xff
 800963c:	d904      	bls.n	8009648 <__ascii_wctomb+0x14>
 800963e:	228a      	movs	r2, #138	@ 0x8a
 8009640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009644:	601a      	str	r2, [r3, #0]
 8009646:	4770      	bx	lr
 8009648:	2001      	movs	r0, #1
 800964a:	700a      	strb	r2, [r1, #0]
 800964c:	4770      	bx	lr

0800964e <abort>:
 800964e:	2006      	movs	r0, #6
 8009650:	b508      	push	{r3, lr}
 8009652:	f000 f82b 	bl	80096ac <raise>
 8009656:	2001      	movs	r0, #1
 8009658:	f7f8 fd6e 	bl	8002138 <_exit>

0800965c <_raise_r>:
 800965c:	291f      	cmp	r1, #31
 800965e:	b538      	push	{r3, r4, r5, lr}
 8009660:	4605      	mov	r5, r0
 8009662:	460c      	mov	r4, r1
 8009664:	d904      	bls.n	8009670 <_raise_r+0x14>
 8009666:	2316      	movs	r3, #22
 8009668:	6003      	str	r3, [r0, #0]
 800966a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800966e:	bd38      	pop	{r3, r4, r5, pc}
 8009670:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009672:	b112      	cbz	r2, 800967a <_raise_r+0x1e>
 8009674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009678:	b94b      	cbnz	r3, 800968e <_raise_r+0x32>
 800967a:	4628      	mov	r0, r5
 800967c:	f000 f830 	bl	80096e0 <_getpid_r>
 8009680:	4622      	mov	r2, r4
 8009682:	4601      	mov	r1, r0
 8009684:	4628      	mov	r0, r5
 8009686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800968a:	f000 b817 	b.w	80096bc <_kill_r>
 800968e:	2b01      	cmp	r3, #1
 8009690:	d00a      	beq.n	80096a8 <_raise_r+0x4c>
 8009692:	1c59      	adds	r1, r3, #1
 8009694:	d103      	bne.n	800969e <_raise_r+0x42>
 8009696:	2316      	movs	r3, #22
 8009698:	6003      	str	r3, [r0, #0]
 800969a:	2001      	movs	r0, #1
 800969c:	e7e7      	b.n	800966e <_raise_r+0x12>
 800969e:	2100      	movs	r1, #0
 80096a0:	4620      	mov	r0, r4
 80096a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80096a6:	4798      	blx	r3
 80096a8:	2000      	movs	r0, #0
 80096aa:	e7e0      	b.n	800966e <_raise_r+0x12>

080096ac <raise>:
 80096ac:	4b02      	ldr	r3, [pc, #8]	@ (80096b8 <raise+0xc>)
 80096ae:	4601      	mov	r1, r0
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	f7ff bfd3 	b.w	800965c <_raise_r>
 80096b6:	bf00      	nop
 80096b8:	2000001c 	.word	0x2000001c

080096bc <_kill_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	2300      	movs	r3, #0
 80096c0:	4d06      	ldr	r5, [pc, #24]	@ (80096dc <_kill_r+0x20>)
 80096c2:	4604      	mov	r4, r0
 80096c4:	4608      	mov	r0, r1
 80096c6:	4611      	mov	r1, r2
 80096c8:	602b      	str	r3, [r5, #0]
 80096ca:	f7f8 fd25 	bl	8002118 <_kill>
 80096ce:	1c43      	adds	r3, r0, #1
 80096d0:	d102      	bne.n	80096d8 <_kill_r+0x1c>
 80096d2:	682b      	ldr	r3, [r5, #0]
 80096d4:	b103      	cbz	r3, 80096d8 <_kill_r+0x1c>
 80096d6:	6023      	str	r3, [r4, #0]
 80096d8:	bd38      	pop	{r3, r4, r5, pc}
 80096da:	bf00      	nop
 80096dc:	20002230 	.word	0x20002230

080096e0 <_getpid_r>:
 80096e0:	f7f8 bd13 	b.w	800210a <_getpid>

080096e4 <_init>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	bf00      	nop
 80096e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ea:	bc08      	pop	{r3}
 80096ec:	469e      	mov	lr, r3
 80096ee:	4770      	bx	lr

080096f0 <_fini>:
 80096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f2:	bf00      	nop
 80096f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f6:	bc08      	pop	{r3}
 80096f8:	469e      	mov	lr, r3
 80096fa:	4770      	bx	lr
