
A1tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000961c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  08009730  08009730  0000a730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de8  08009de8  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009de8  08009de8  0000ade8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009df0  08009df0  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009df0  08009df0  0000adf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009df4  08009df4  0000adf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009df8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000244c  200001d8  08009fd0  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002624  08009fd0  0000b624  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013591  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ead  00000000  00000000  0001e792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00021640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf7  00000000  00000000  000225d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e2a  00000000  00000000  000231cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012042  00000000  00000000  00026ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092db1  00000000  00000000  0003903b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbdec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a8  00000000  00000000  000cbe30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d0ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009714 	.word	0x08009714

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08009714 	.word	0x08009714

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__io_putchar>:
void Uartcom(void *argument);

/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d4c:	1d39      	adds	r1, r7, #4
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d52:	2201      	movs	r2, #1
 8000d54:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <__io_putchar+0x20>)
 8000d56:	f003 f801 	bl	8003d5c <HAL_UART_Transmit>
  return ch;
 8000d5a:	687b      	ldr	r3, [r7, #4]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000026c 	.word	0x2000026c

08000d68 <ADC_SetActiveChannel>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig={0};
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
	sConfig.Channel=AdcChannel;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
	sConfig.Rank=1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	613b      	str	r3, [r7, #16]
	//sConfig.SamplingTime=ADC_SAMPLETIME_3CYCLES;
	if(HAL_ADC_ConfigChannel(hadc, &sConfig)!=HAL_OK){
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f001 fdb9 	bl	8002904 <HAL_ADC_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <ADC_SetActiveChannel+0x34>
		Error_Handler();
 8000d98:	f001 f840 	bl	8001e1c <Error_Handler>
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <ADC_measure>:
float ADC_measure(uint32_t ADC_CHANNEL){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	ADC_SetActiveChannel(&hadc1, ADC_CHANNEL);
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	480e      	ldr	r0, [pc, #56]	@ (8000de8 <ADC_measure+0x44>)
 8000db0:	f7ff ffda 	bl	8000d68 <ADC_SetActiveChannel>
	HAL_ADC_Start(&hadc1);
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <ADC_measure+0x44>)
 8000db6:	f001 fbe5 	bl	8002584 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK){
 8000dba:	210a      	movs	r1, #10
 8000dbc:	480a      	ldr	r0, [pc, #40]	@ (8000de8 <ADC_measure+0x44>)
 8000dbe:	f001 fc8f 	bl	80026e0 <HAL_ADC_PollForConversion>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d108      	bne.n	8000dda <ADC_measure+0x36>
		return HAL_ADC_GetValue(&hadc1);
 8000dc8:	4807      	ldr	r0, [pc, #28]	@ (8000de8 <ADC_measure+0x44>)
 8000dca:	f001 fd8f 	bl	80028ec <HAL_ADC_GetValue>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5f 	bl	8000c94 <__aeabi_ui2f>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e001      	b.n	8000dde <ADC_measure+0x3a>
	}else return 0;
 8000dda:	f04f 0300 	mov.w	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001f4 	.word	0x200001f4
 8000dec:	00000000 	.word	0x00000000

08000df0 <performTest>:
void performTest(VoltageLevels *LevelsStruct){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

	LevelsStruct->level11=ADC_measure(ADC_CHANNEL_7)*3.3/4095-0.35;
 8000df8:	2007      	movs	r0, #7
 8000dfa:	f7ff ffd3 	bl	8000da4 <ADC_measure>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fb11 	bl	8000428 <__aeabi_f2d>
 8000e06:	a384      	add	r3, pc, #528	@ (adr r3, 8001018 <performTest+0x228>)
 8000e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0c:	f7ff fb64 	bl	80004d8 <__aeabi_dmul>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	a381      	add	r3, pc, #516	@ (adr r3, 8001020 <performTest+0x230>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	f7ff fc85 	bl	800072c <__aeabi_ddiv>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	a37f      	add	r3, pc, #508	@ (adr r3, 8001028 <performTest+0x238>)
 8000e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e30:	f7ff f99a 	bl	8000168 <__aeabi_dsub>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f7ff fe24 	bl	8000a88 <__aeabi_d2f>
 8000e40:	4602      	mov	r2, r0
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	619a      	str	r2, [r3, #24]
	LevelsStruct->level15=ADC_measure(ADC_CHANNEL_15)*2*3.3/4095;
 8000e46:	200f      	movs	r0, #15
 8000e48:	f7ff ffac 	bl	8000da4 <ADC_measure>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fe6f 	bl	8000b34 <__addsf3>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fae5 	bl	8000428 <__aeabi_f2d>
 8000e5e:	a36e      	add	r3, pc, #440	@ (adr r3, 8001018 <performTest+0x228>)
 8000e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e64:	f7ff fb38 	bl	80004d8 <__aeabi_dmul>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	a36b      	add	r3, pc, #428	@ (adr r3, 8001020 <performTest+0x230>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	f7ff fc59 	bl	800072c <__aeabi_ddiv>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f7ff fe01 	bl	8000a88 <__aeabi_d2f>
 8000e86:	4602      	mov	r2, r0
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
	LevelsStruct->level178=ADC_measure(ADC_CHANNEL_8)*3.3/4095;
 8000e8c:	2008      	movs	r0, #8
 8000e8e:	f7ff ff89 	bl	8000da4 <ADC_measure>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fac7 	bl	8000428 <__aeabi_f2d>
 8000e9a:	a35f      	add	r3, pc, #380	@ (adr r3, 8001018 <performTest+0x228>)
 8000e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea0:	f7ff fb1a 	bl	80004d8 <__aeabi_dmul>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	a35c      	add	r3, pc, #368	@ (adr r3, 8001020 <performTest+0x230>)
 8000eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb2:	f7ff fc3b 	bl	800072c <__aeabi_ddiv>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f7ff fde3 	bl	8000a88 <__aeabi_d2f>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	61da      	str	r2, [r3, #28]
	LevelsStruct->level18=ADC_measure(ADC_CHANNEL_4)*3.3/4095;
 8000ec8:	2004      	movs	r0, #4
 8000eca:	f7ff ff6b 	bl	8000da4 <ADC_measure>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff faa9 	bl	8000428 <__aeabi_f2d>
 8000ed6:	a350      	add	r3, pc, #320	@ (adr r3, 8001018 <performTest+0x228>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f7ff fafc 	bl	80004d8 <__aeabi_dmul>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	a34d      	add	r3, pc, #308	@ (adr r3, 8001020 <performTest+0x230>)
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	f7ff fc1d 	bl	800072c <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fdc5 	bl	8000a88 <__aeabi_d2f>
 8000efe:	4602      	mov	r2, r0
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	621a      	str	r2, [r3, #32]
	LevelsStruct->level25=ADC_measure(ADC_CHANNEL_11)*2*3.3/4095;
 8000f04:	200b      	movs	r0, #11
 8000f06:	f7ff ff4d 	bl	8000da4 <ADC_measure>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fe10 	bl	8000b34 <__addsf3>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fa86 	bl	8000428 <__aeabi_f2d>
 8000f1c:	a33e      	add	r3, pc, #248	@ (adr r3, 8001018 <performTest+0x228>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fad9 	bl	80004d8 <__aeabi_dmul>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	a33c      	add	r3, pc, #240	@ (adr r3, 8001020 <performTest+0x230>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff fbfa 	bl	800072c <__aeabi_ddiv>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fda2 	bl	8000a88 <__aeabi_d2f>
 8000f44:	4602      	mov	r2, r0
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60da      	str	r2, [r3, #12]
	LevelsStruct->level28=ADC_measure(ADC_CHANNEL_1)*3.3/4095;
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f7ff ff2a 	bl	8000da4 <ADC_measure>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa68 	bl	8000428 <__aeabi_f2d>
 8000f58:	a32f      	add	r3, pc, #188	@ (adr r3, 8001018 <performTest+0x228>)
 8000f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5e:	f7ff fabb 	bl	80004d8 <__aeabi_dmul>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	a32d      	add	r3, pc, #180	@ (adr r3, 8001020 <performTest+0x230>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fbdc 	bl	800072c <__aeabi_ddiv>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fd84 	bl	8000a88 <__aeabi_d2f>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	615a      	str	r2, [r3, #20]
	LevelsStruct->level30=ADC_measure(ADC_CHANNEL_6)*3.3/4095;
 8000f86:	2006      	movs	r0, #6
 8000f88:	f7ff ff0c 	bl	8000da4 <ADC_measure>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fa4a 	bl	8000428 <__aeabi_f2d>
 8000f94:	a320      	add	r3, pc, #128	@ (adr r3, 8001018 <performTest+0x228>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	f7ff fa9d 	bl	80004d8 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	a31e      	add	r3, pc, #120	@ (adr r3, 8001020 <performTest+0x230>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fbbe 	bl	800072c <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f7ff fd66 	bl	8000a88 <__aeabi_d2f>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	611a      	str	r2, [r3, #16]
	LevelsStruct->level42=ADC_measure(ADC_CHANNEL_10)*3.3*2/4095;
 8000fc2:	200a      	movs	r0, #10
 8000fc4:	f7ff feee 	bl	8000da4 <ADC_measure>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fa2c 	bl	8000428 <__aeabi_f2d>
 8000fd0:	a311      	add	r3, pc, #68	@ (adr r3, 8001018 <performTest+0x228>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff fa7f 	bl	80004d8 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	f7ff f8c1 	bl	800016c <__adddf3>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	a30b      	add	r3, pc, #44	@ (adr r3, 8001020 <performTest+0x230>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff fb98 	bl	800072c <__aeabi_ddiv>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fd40 	bl	8000a88 <__aeabi_d2f>
 8001008:	4602      	mov	r2, r0
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	66666666 	.word	0x66666666
 800101c:	400a6666 	.word	0x400a6666
 8001020:	00000000 	.word	0x00000000
 8001024:	40affe00 	.word	0x40affe00
 8001028:	66666666 	.word	0x66666666
 800102c:	3fd66666 	.word	0x3fd66666

08001030 <compare>:
void compare(VoltageLevels *comp, VoltageLevels *levels){
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	printf("Test:");
 800103a:	48ab      	ldr	r0, [pc, #684]	@ (80012e8 <compare+0x2b8>)
 800103c:	f006 fafc 	bl	8007638 <iprintf>
	printf(levels->test);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f006 faf8 	bl	8007638 <iprintf>
	printf("\n");
 8001048:	200a      	movs	r0, #10
 800104a:	f006 fb07 	bl	800765c <putchar>
	if((levels->level11<=1.1*comp->level11)&&(levels->level11>=0.95*comp->level11)){
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f9e8 	bl	8000428 <__aeabi_f2d>
 8001058:	4604      	mov	r4, r0
 800105a:	460d      	mov	r5, r1
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f9e1 	bl	8000428 <__aeabi_f2d>
 8001066:	a39a      	add	r3, pc, #616	@ (adr r3, 80012d0 <compare+0x2a0>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff fa34 	bl	80004d8 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4620      	mov	r0, r4
 8001076:	4629      	mov	r1, r5
 8001078:	f7ff fcaa 	bl	80009d0 <__aeabi_dcmple>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d01d      	beq.n	80010be <compare+0x8e>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f9ce 	bl	8000428 <__aeabi_f2d>
 800108c:	4604      	mov	r4, r0
 800108e:	460d      	mov	r5, r1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f9c7 	bl	8000428 <__aeabi_f2d>
 800109a:	a38f      	add	r3, pc, #572	@ (adr r3, 80012d8 <compare+0x2a8>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fa1a 	bl	80004d8 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4620      	mov	r0, r4
 80010aa:	4629      	mov	r1, r5
 80010ac:	f7ff fc9a 	bl	80009e4 <__aeabi_dcmpge>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <compare+0x8e>
		printf("1,1V ok\n");
 80010b6:	488d      	ldr	r0, [pc, #564]	@ (80012ec <compare+0x2bc>)
 80010b8:	f006 fb2e 	bl	8007718 <puts>
 80010bc:	e009      	b.n	80010d2 <compare+0xa2>
	}
	else printf("1,1V error, value:%f\n",levels->level11);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f9b0 	bl	8000428 <__aeabi_f2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4888      	ldr	r0, [pc, #544]	@ (80012f0 <compare+0x2c0>)
 80010ce:	f006 fab3 	bl	8007638 <iprintf>
	if((levels->level15<=1.05*comp->level15)&&(levels->level15>=0.95*comp->level15)){
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f9a6 	bl	8000428 <__aeabi_f2d>
 80010dc:	4604      	mov	r4, r0
 80010de:	460d      	mov	r5, r1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f99f 	bl	8000428 <__aeabi_f2d>
 80010ea:	a37d      	add	r3, pc, #500	@ (adr r3, 80012e0 <compare+0x2b0>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	f7ff f9f2 	bl	80004d8 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4620      	mov	r0, r4
 80010fa:	4629      	mov	r1, r5
 80010fc:	f7ff fc68 	bl	80009d0 <__aeabi_dcmple>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d01d      	beq.n	8001142 <compare+0x112>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f98c 	bl	8000428 <__aeabi_f2d>
 8001110:	4604      	mov	r4, r0
 8001112:	460d      	mov	r5, r1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f985 	bl	8000428 <__aeabi_f2d>
 800111e:	a36e      	add	r3, pc, #440	@ (adr r3, 80012d8 <compare+0x2a8>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff f9d8 	bl	80004d8 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff fc58 	bl	80009e4 <__aeabi_dcmpge>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <compare+0x112>
			printf("1)5V ok\n");
 800113a:	486e      	ldr	r0, [pc, #440]	@ (80012f4 <compare+0x2c4>)
 800113c:	f006 faec 	bl	8007718 <puts>
 8001140:	e009      	b.n	8001156 <compare+0x126>
		}
		else printf("1)5V error, value:%f\n",levels->level15);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f96e 	bl	8000428 <__aeabi_f2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4869      	ldr	r0, [pc, #420]	@ (80012f8 <compare+0x2c8>)
 8001152:	f006 fa71 	bl	8007638 <iprintf>
	if((levels->level25<=1.05*comp->level25)&&(levels->level25>=0.95*comp->level25)){
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f964 	bl	8000428 <__aeabi_f2d>
 8001160:	4604      	mov	r4, r0
 8001162:	460d      	mov	r5, r1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f95d 	bl	8000428 <__aeabi_f2d>
 800116e:	a35c      	add	r3, pc, #368	@ (adr r3, 80012e0 <compare+0x2b0>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff f9b0 	bl	80004d8 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7ff fc26 	bl	80009d0 <__aeabi_dcmple>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d01d      	beq.n	80011c6 <compare+0x196>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f94a 	bl	8000428 <__aeabi_f2d>
 8001194:	4604      	mov	r4, r0
 8001196:	460d      	mov	r5, r1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f943 	bl	8000428 <__aeabi_f2d>
 80011a2:	a34d      	add	r3, pc, #308	@ (adr r3, 80012d8 <compare+0x2a8>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4620      	mov	r0, r4
 80011b2:	4629      	mov	r1, r5
 80011b4:	f7ff fc16 	bl	80009e4 <__aeabi_dcmpge>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <compare+0x196>
			printf("2)5V ok\n");
 80011be:	484f      	ldr	r0, [pc, #316]	@ (80012fc <compare+0x2cc>)
 80011c0:	f006 faaa 	bl	8007718 <puts>
 80011c4:	e009      	b.n	80011da <compare+0x1aa>
		}
		else printf("2)5V error, value:%f\n",levels->level25);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f92c 	bl	8000428 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	484a      	ldr	r0, [pc, #296]	@ (8001300 <compare+0x2d0>)
 80011d6:	f006 fa2f 	bl	8007638 <iprintf>
	if((levels->level30<=1.05*comp->level30)&&(levels->level30>=0.95*comp->level30)){
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f922 	bl	8000428 <__aeabi_f2d>
 80011e4:	4604      	mov	r4, r0
 80011e6:	460d      	mov	r5, r1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f91b 	bl	8000428 <__aeabi_f2d>
 80011f2:	a33b      	add	r3, pc, #236	@ (adr r3, 80012e0 <compare+0x2b0>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff f96e 	bl	80004d8 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4620      	mov	r0, r4
 8001202:	4629      	mov	r1, r5
 8001204:	f7ff fbe4 	bl	80009d0 <__aeabi_dcmple>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01d      	beq.n	800124a <compare+0x21a>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f908 	bl	8000428 <__aeabi_f2d>
 8001218:	4604      	mov	r4, r0
 800121a:	460d      	mov	r5, r1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f901 	bl	8000428 <__aeabi_f2d>
 8001226:	a32c      	add	r3, pc, #176	@ (adr r3, 80012d8 <compare+0x2a8>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f954 	bl	80004d8 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4620      	mov	r0, r4
 8001236:	4629      	mov	r1, r5
 8001238:	f7ff fbd4 	bl	80009e4 <__aeabi_dcmpge>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <compare+0x21a>
			printf("3V ok\n");
 8001242:	4830      	ldr	r0, [pc, #192]	@ (8001304 <compare+0x2d4>)
 8001244:	f006 fa68 	bl	8007718 <puts>
 8001248:	e009      	b.n	800125e <compare+0x22e>
		}
		else printf("3V error, value:%f\n",levels->level30);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f8ea 	bl	8000428 <__aeabi_f2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	482b      	ldr	r0, [pc, #172]	@ (8001308 <compare+0x2d8>)
 800125a:	f006 f9ed 	bl	8007638 <iprintf>
	if((levels->level28<=1.05*comp->level28)&&(levels->level28>=0.95*comp->level28)){
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f8e0 	bl	8000428 <__aeabi_f2d>
 8001268:	4604      	mov	r4, r0
 800126a:	460d      	mov	r5, r1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f8d9 	bl	8000428 <__aeabi_f2d>
 8001276:	a31a      	add	r3, pc, #104	@ (adr r3, 80012e0 <compare+0x2b0>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff f92c 	bl	80004d8 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4620      	mov	r0, r4
 8001286:	4629      	mov	r1, r5
 8001288:	f7ff fba2 	bl	80009d0 <__aeabi_dcmple>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d03e      	beq.n	8001310 <compare+0x2e0>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f8c6 	bl	8000428 <__aeabi_f2d>
 800129c:	4604      	mov	r4, r0
 800129e:	460d      	mov	r5, r1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f8bf 	bl	8000428 <__aeabi_f2d>
 80012aa:	a30b      	add	r3, pc, #44	@ (adr r3, 80012d8 <compare+0x2a8>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7ff f912 	bl	80004d8 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4620      	mov	r0, r4
 80012ba:	4629      	mov	r1, r5
 80012bc:	f7ff fb92 	bl	80009e4 <__aeabi_dcmpge>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d024      	beq.n	8001310 <compare+0x2e0>
			printf("2,8V ok\n");
 80012c6:	4811      	ldr	r0, [pc, #68]	@ (800130c <compare+0x2dc>)
 80012c8:	f006 fa26 	bl	8007718 <puts>
 80012cc:	e02a      	b.n	8001324 <compare+0x2f4>
 80012ce:	bf00      	nop
 80012d0:	9999999a 	.word	0x9999999a
 80012d4:	3ff19999 	.word	0x3ff19999
 80012d8:	66666666 	.word	0x66666666
 80012dc:	3fee6666 	.word	0x3fee6666
 80012e0:	cccccccd 	.word	0xcccccccd
 80012e4:	3ff0cccc 	.word	0x3ff0cccc
 80012e8:	08009740 	.word	0x08009740
 80012ec:	08009748 	.word	0x08009748
 80012f0:	08009750 	.word	0x08009750
 80012f4:	08009768 	.word	0x08009768
 80012f8:	08009770 	.word	0x08009770
 80012fc:	08009788 	.word	0x08009788
 8001300:	08009790 	.word	0x08009790
 8001304:	080097a8 	.word	0x080097a8
 8001308:	080097b0 	.word	0x080097b0
 800130c:	080097c4 	.word	0x080097c4
		}
		else printf("2,8V error, value:%f\n",levels->level28);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f887 	bl	8000428 <__aeabi_f2d>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	486c      	ldr	r0, [pc, #432]	@ (80014d0 <compare+0x4a0>)
 8001320:	f006 f98a 	bl	8007638 <iprintf>
	if((levels->level178<=1.05*comp->level178)&&(levels->level178>=0.95*comp->level178)){
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f87d 	bl	8000428 <__aeabi_f2d>
 800132e:	4604      	mov	r4, r0
 8001330:	460d      	mov	r5, r1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f876 	bl	8000428 <__aeabi_f2d>
 800133c:	a360      	add	r3, pc, #384	@ (adr r3, 80014c0 <compare+0x490>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff f8c9 	bl	80004d8 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4620      	mov	r0, r4
 800134c:	4629      	mov	r1, r5
 800134e:	f7ff fb3f 	bl	80009d0 <__aeabi_dcmple>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01d      	beq.n	8001394 <compare+0x364>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f863 	bl	8000428 <__aeabi_f2d>
 8001362:	4604      	mov	r4, r0
 8001364:	460d      	mov	r5, r1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f85c 	bl	8000428 <__aeabi_f2d>
 8001370:	a355      	add	r3, pc, #340	@ (adr r3, 80014c8 <compare+0x498>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff f8af 	bl	80004d8 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4620      	mov	r0, r4
 8001380:	4629      	mov	r1, r5
 8001382:	f7ff fb2f 	bl	80009e4 <__aeabi_dcmpge>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <compare+0x364>
			printf("1,78V ok\n");
 800138c:	4851      	ldr	r0, [pc, #324]	@ (80014d4 <compare+0x4a4>)
 800138e:	f006 f9c3 	bl	8007718 <puts>
 8001392:	e009      	b.n	80013a8 <compare+0x378>
		}
		else printf("1,78V error, value:%f\n",levels->level178);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f845 	bl	8000428 <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	484d      	ldr	r0, [pc, #308]	@ (80014d8 <compare+0x4a8>)
 80013a4:	f006 f948 	bl	8007638 <iprintf>
	if((levels->level18<=1.05*comp->level18)&&(levels->level18>=0.95*comp->level18)){
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f83b 	bl	8000428 <__aeabi_f2d>
 80013b2:	4604      	mov	r4, r0
 80013b4:	460d      	mov	r5, r1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f834 	bl	8000428 <__aeabi_f2d>
 80013c0:	a33f      	add	r3, pc, #252	@ (adr r3, 80014c0 <compare+0x490>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f887 	bl	80004d8 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7ff fafd 	bl	80009d0 <__aeabi_dcmple>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d01d      	beq.n	8001418 <compare+0x3e8>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f821 	bl	8000428 <__aeabi_f2d>
 80013e6:	4604      	mov	r4, r0
 80013e8:	460d      	mov	r5, r1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f81a 	bl	8000428 <__aeabi_f2d>
 80013f4:	a334      	add	r3, pc, #208	@ (adr r3, 80014c8 <compare+0x498>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f86d 	bl	80004d8 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4620      	mov	r0, r4
 8001404:	4629      	mov	r1, r5
 8001406:	f7ff faed 	bl	80009e4 <__aeabi_dcmpge>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <compare+0x3e8>
			printf("1,8V ok\n");
 8001410:	4832      	ldr	r0, [pc, #200]	@ (80014dc <compare+0x4ac>)
 8001412:	f006 f981 	bl	8007718 <puts>
 8001416:	e009      	b.n	800142c <compare+0x3fc>
		}
		else printf("1,8V error, value:%f\n",levels->level18);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f803 	bl	8000428 <__aeabi_f2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	482e      	ldr	r0, [pc, #184]	@ (80014e0 <compare+0x4b0>)
 8001428:	f006 f906 	bl	8007638 <iprintf>
	if((levels->level42<=1.05*comp->level42)&&(levels->level42>=0.95*comp->level42)){
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe fff9 	bl	8000428 <__aeabi_f2d>
 8001436:	4604      	mov	r4, r0
 8001438:	460d      	mov	r5, r1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe fff2 	bl	8000428 <__aeabi_f2d>
 8001444:	a31e      	add	r3, pc, #120	@ (adr r3, 80014c0 <compare+0x490>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f845 	bl	80004d8 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4620      	mov	r0, r4
 8001454:	4629      	mov	r1, r5
 8001456:	f7ff fabb 	bl	80009d0 <__aeabi_dcmple>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01d      	beq.n	800149c <compare+0x46c>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe ffdf 	bl	8000428 <__aeabi_f2d>
 800146a:	4604      	mov	r4, r0
 800146c:	460d      	mov	r5, r1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe ffd8 	bl	8000428 <__aeabi_f2d>
 8001478:	a313      	add	r3, pc, #76	@ (adr r3, 80014c8 <compare+0x498>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f82b 	bl	80004d8 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4620      	mov	r0, r4
 8001488:	4629      	mov	r1, r5
 800148a:	f7ff faab 	bl	80009e4 <__aeabi_dcmpge>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <compare+0x46c>
			printf("4,2V ok\n");
 8001494:	4813      	ldr	r0, [pc, #76]	@ (80014e4 <compare+0x4b4>)
 8001496:	f006 f93f 	bl	8007718 <puts>
 800149a:	e009      	b.n	80014b0 <compare+0x480>
		}
		else printf("4,2V error, value:%f\n",levels->level42);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe ffc1 	bl	8000428 <__aeabi_f2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	480f      	ldr	r0, [pc, #60]	@ (80014e8 <compare+0x4b8>)
 80014ac:	f006 f8c4 	bl	8007638 <iprintf>
	printf("*************************\n");
 80014b0:	480e      	ldr	r0, [pc, #56]	@ (80014ec <compare+0x4bc>)
 80014b2:	f006 f931 	bl	8007718 <puts>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bdb0      	pop	{r4, r5, r7, pc}
 80014be:	bf00      	nop
 80014c0:	cccccccd 	.word	0xcccccccd
 80014c4:	3ff0cccc 	.word	0x3ff0cccc
 80014c8:	66666666 	.word	0x66666666
 80014cc:	3fee6666 	.word	0x3fee6666
 80014d0:	080097cc 	.word	0x080097cc
 80014d4:	080097e4 	.word	0x080097e4
 80014d8:	080097f0 	.word	0x080097f0
 80014dc:	08009808 	.word	0x08009808
 80014e0:	08009810 	.word	0x08009810
 80014e4:	08009828 	.word	0x08009828
 80014e8:	08009830 	.word	0x08009830
 80014ec:	08009848 	.word	0x08009848

080014f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f4:	f000 ff0c 	bl	8002310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f8:	f000 f82c 	bl	8001554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fc:	f000 f942 	bl	8001784 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001500:	f000 f8ec 	bl	80016dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001504:	f000 f8c0 	bl	8001688 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001508:	f000 f880 	bl	800160c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800150c:	f000 f910 	bl	8001730 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001510:	f002 fe36 	bl	8004180 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of testing */
  testingHandle = osThreadNew(Test, NULL, &testing_attributes);
 8001514:	4a09      	ldr	r2, [pc, #36]	@ (800153c <main+0x4c>)
 8001516:	2100      	movs	r1, #0
 8001518:	4809      	ldr	r0, [pc, #36]	@ (8001540 <main+0x50>)
 800151a:	f002 fe97 	bl	800424c <osThreadNew>
 800151e:	4603      	mov	r3, r0
 8001520:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <main+0x54>)
 8001522:	6013      	str	r3, [r2, #0]

  /* creation of UARTcom */
  UARTcomHandle = osThreadNew(Uartcom, NULL, &UARTcom_attributes);
 8001524:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <main+0x58>)
 8001526:	2100      	movs	r1, #0
 8001528:	4808      	ldr	r0, [pc, #32]	@ (800154c <main+0x5c>)
 800152a:	f002 fe8f 	bl	800424c <osThreadNew>
 800152e:	4603      	mov	r3, r0
 8001530:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <main+0x60>)
 8001532:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001534:	f002 fe56 	bl	80041e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <main+0x48>
 800153c:	080099f0 	.word	0x080099f0
 8001540:	08001861 	.word	0x08001861
 8001544:	200002fc 	.word	0x200002fc
 8001548:	08009a14 	.word	0x08009a14
 800154c:	08001de1 	.word	0x08001de1
 8001550:	20000300 	.word	0x20000300

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	@ 0x50
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800155e:	2228      	movs	r2, #40	@ 0x28
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f006 f8e0 	bl	8007728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001584:	2301      	movs	r3, #1
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001588:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001592:	2301      	movs	r3, #1
 8001594:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001596:	2302      	movs	r3, #2
 8001598:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800159e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80015a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015aa:	4618      	mov	r0, r3
 80015ac:	f001 fe0a 	bl	80031c4 <HAL_RCC_OscConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015b6:	f000 fc31 	bl	8001e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ba:	230f      	movs	r3, #15
 80015bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015be:	2302      	movs	r3, #2
 80015c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2101      	movs	r1, #1
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 f876 	bl	80036c8 <HAL_RCC_ClockConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015e2:	f000 fc1b 	bl	8001e1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015e6:	2302      	movs	r3, #2
 80015e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80015ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 f9f6 	bl	80039e4 <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015fe:	f000 fc0d 	bl	8001e1c <Error_Handler>
  }
}
 8001602:	bf00      	nop
 8001604:	3750      	adds	r7, #80	@ 0x50
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_ADC1_Init+0x74>)
 800161e:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <MX_ADC1_Init+0x78>)
 8001620:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_ADC1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <MX_ADC1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800162e:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_ADC1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <MX_ADC1_Init+0x74>)
 8001636:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800163a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800163c:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <MX_ADC1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <MX_ADC1_Init+0x74>)
 8001644:	2201      	movs	r2, #1
 8001646:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001648:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_ADC1_Init+0x74>)
 800164a:	f000 fec3 	bl	80023d4 <HAL_ADC_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001654:	f000 fbe2 	bl	8001e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001658:	2301      	movs	r3, #1
 800165a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800165c:	2301      	movs	r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_ADC1_Init+0x74>)
 800166a:	f001 f94b 	bl	8002904 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001674:	f000 fbd2 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200001f4 	.word	0x200001f4
 8001684:	40012400 	.word	0x40012400

08001688 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 800168e:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <MX_USART1_UART_Init+0x50>)
 8001690:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016c0:	f002 fafc 	bl	8003cbc <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ca:	f000 fba7 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000224 	.word	0x20000224
 80016d8:	40013800 	.word	0x40013800

080016dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	@ (800172c <MX_USART2_UART_Init+0x50>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 8001714:	f002 fad2 	bl	8003cbc <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800171e:	f000 fb7d 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000026c 	.word	0x2000026c
 800172c:	40004400 	.word	0x40004400

08001730 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <MX_USART3_UART_Init+0x4c>)
 8001736:	4a12      	ldr	r2, [pc, #72]	@ (8001780 <MX_USART3_UART_Init+0x50>)
 8001738:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <MX_USART3_UART_Init+0x4c>)
 800173c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001740:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <MX_USART3_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <MX_USART3_UART_Init+0x4c>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <MX_USART3_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b09      	ldr	r3, [pc, #36]	@ (800177c <MX_USART3_UART_Init+0x4c>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b08      	ldr	r3, [pc, #32]	@ (800177c <MX_USART3_UART_Init+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <MX_USART3_UART_Init+0x4c>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	@ (800177c <MX_USART3_UART_Init+0x4c>)
 8001768:	f002 faa8 	bl	8003cbc <HAL_UART_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001772:	f000 fb53 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200002b4 	.word	0x200002b4
 8001780:	40004800 	.word	0x40004800

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001798:	4b2d      	ldr	r3, [pc, #180]	@ (8001850 <MX_GPIO_Init+0xcc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a2c      	ldr	r2, [pc, #176]	@ (8001850 <MX_GPIO_Init+0xcc>)
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001850 <MX_GPIO_Init+0xcc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b0:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <MX_GPIO_Init+0xcc>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a26      	ldr	r2, [pc, #152]	@ (8001850 <MX_GPIO_Init+0xcc>)
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <MX_GPIO_Init+0xcc>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <MX_GPIO_Init+0xcc>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a20      	ldr	r2, [pc, #128]	@ (8001850 <MX_GPIO_Init+0xcc>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <MX_GPIO_Init+0xcc>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <MX_GPIO_Init+0xcc>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001850 <MX_GPIO_Init+0xcc>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <MX_GPIO_Init+0xcc>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2120      	movs	r1, #32
 80017fc:	4815      	ldr	r0, [pc, #84]	@ (8001854 <MX_GPIO_Init+0xd0>)
 80017fe:	f001 fca7 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <MX_GPIO_Init+0xd4>)
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4619      	mov	r1, r3
 8001816:	4811      	ldr	r0, [pc, #68]	@ (800185c <MX_GPIO_Init+0xd8>)
 8001818:	f001 fb16 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800181c:	2320      	movs	r3, #32
 800181e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2302      	movs	r3, #2
 800182a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	4619      	mov	r1, r3
 8001832:	4808      	ldr	r0, [pc, #32]	@ (8001854 <MX_GPIO_Init+0xd0>)
 8001834:	f001 fb08 	bl	8002e48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2105      	movs	r1, #5
 800183c:	2028      	movs	r0, #40	@ 0x28
 800183e:	f001 facc 	bl	8002dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001842:	2028      	movs	r0, #40	@ 0x28
 8001844:	f001 fae5 	bl	8002e12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	40010800 	.word	0x40010800
 8001858:	10110000 	.word	0x10110000
 800185c:	40011000 	.word	0x40011000

08001860 <Test>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Test */
void Test(void *argument)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 8001866:	af00      	add	r7, sp, #0
 8001868:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800186c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001870:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	VoltageLevels toComp;
	strcpy(toComp.test,"com");
 8001872:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001876:	4a5c      	ldr	r2, [pc, #368]	@ (80019e8 <Test+0x188>)
 8001878:	601a      	str	r2, [r3, #0]
	toComp.level11=1.1;
 800187a:	4b5c      	ldr	r3, [pc, #368]	@ (80019ec <Test+0x18c>)
 800187c:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
	toComp.level15=5.0;
 8001880:	4b5b      	ldr	r3, [pc, #364]	@ (80019f0 <Test+0x190>)
 8001882:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
	toComp.level25=5.0;
 8001886:	4b5a      	ldr	r3, [pc, #360]	@ (80019f0 <Test+0x190>)
 8001888:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
	toComp.level30=3.0;
 800188c:	4b59      	ldr	r3, [pc, #356]	@ (80019f4 <Test+0x194>)
 800188e:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
	toComp.level28=2.8;
 8001892:	4b59      	ldr	r3, [pc, #356]	@ (80019f8 <Test+0x198>)
 8001894:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
	toComp.level178=1.78;
 8001898:	4b58      	ldr	r3, [pc, #352]	@ (80019fc <Test+0x19c>)
 800189a:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
	toComp.level18=1.8;
 800189e:	4b58      	ldr	r3, [pc, #352]	@ (8001a00 <Test+0x1a0>)
 80018a0:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
	toComp.level42=4.2;
 80018a4:	4b57      	ldr	r3, [pc, #348]	@ (8001a04 <Test+0x1a4>)
 80018a6:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
	VoltageLevels levels45;
	strcpy(levels45.test,"4,5");
 80018aa:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <Test+0x1a8>)
 80018b0:	601a      	str	r2, [r3, #0]
	VoltageLevels levels5;
	strcpy(levels5.test,"5");
 80018b2:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80018b6:	2235      	movs	r2, #53	@ 0x35
 80018b8:	801a      	strh	r2, [r3, #0]
	VoltageLevels levels6;
	strcpy(levels6.test,"6");
 80018ba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80018be:	2236      	movs	r2, #54	@ 0x36
 80018c0:	801a      	strh	r2, [r3, #0]
	VoltageLevels levels7;
	strcpy(levels7.test,"7");
 80018c2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80018c6:	2237      	movs	r2, #55	@ 0x37
 80018c8:	801a      	strh	r2, [r3, #0]
	VoltageLevels levels8;
	strcpy(levels8.test,"8");
 80018ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018ce:	2238      	movs	r2, #56	@ 0x38
 80018d0:	801a      	strh	r2, [r3, #0]
	VoltageLevels levels9;
	strcpy(levels9.test,"9");
 80018d2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80018d6:	2239      	movs	r2, #57	@ 0x39
 80018d8:	801a      	strh	r2, [r3, #0]
	VoltageLevels levels10;
	strcpy(levels10.test,"10");
 80018da:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80018de:	4a4b      	ldr	r2, [pc, #300]	@ (8001a0c <Test+0x1ac>)
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	4611      	mov	r1, r2
 80018e4:	8019      	strh	r1, [r3, #0]
 80018e6:	3302      	adds	r3, #2
 80018e8:	0c12      	lsrs	r2, r2, #16
 80018ea:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels11;
	strcpy(levels11.test,"11");
 80018ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018f0:	4a47      	ldr	r2, [pc, #284]	@ (8001a10 <Test+0x1b0>)
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	4611      	mov	r1, r2
 80018f6:	8019      	strh	r1, [r3, #0]
 80018f8:	3302      	adds	r3, #2
 80018fa:	0c12      	lsrs	r2, r2, #16
 80018fc:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels12;
	strcpy(levels12.test,"12");
 80018fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001902:	4a44      	ldr	r2, [pc, #272]	@ (8001a14 <Test+0x1b4>)
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	4611      	mov	r1, r2
 8001908:	8019      	strh	r1, [r3, #0]
 800190a:	3302      	adds	r3, #2
 800190c:	0c12      	lsrs	r2, r2, #16
 800190e:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels13;
	strcpy(levels13.test,"13");
 8001910:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001914:	4a40      	ldr	r2, [pc, #256]	@ (8001a18 <Test+0x1b8>)
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	4611      	mov	r1, r2
 800191a:	8019      	strh	r1, [r3, #0]
 800191c:	3302      	adds	r3, #2
 800191e:	0c12      	lsrs	r2, r2, #16
 8001920:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels14;
	strcpy(levels14.test,"14");
 8001922:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001926:	4a3d      	ldr	r2, [pc, #244]	@ (8001a1c <Test+0x1bc>)
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	4611      	mov	r1, r2
 800192c:	8019      	strh	r1, [r3, #0]
 800192e:	3302      	adds	r3, #2
 8001930:	0c12      	lsrs	r2, r2, #16
 8001932:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels15;
	strcpy(levels15.test,"15");
 8001934:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001938:	4a39      	ldr	r2, [pc, #228]	@ (8001a20 <Test+0x1c0>)
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	4611      	mov	r1, r2
 800193e:	8019      	strh	r1, [r3, #0]
 8001940:	3302      	adds	r3, #2
 8001942:	0c12      	lsrs	r2, r2, #16
 8001944:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels16;
	strcpy(levels16.test,"16");
 8001946:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800194a:	4a36      	ldr	r2, [pc, #216]	@ (8001a24 <Test+0x1c4>)
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	4611      	mov	r1, r2
 8001950:	8019      	strh	r1, [r3, #0]
 8001952:	3302      	adds	r3, #2
 8001954:	0c12      	lsrs	r2, r2, #16
 8001956:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels17;
	strcpy(levels17.test,"17");
 8001958:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800195c:	4a32      	ldr	r2, [pc, #200]	@ (8001a28 <Test+0x1c8>)
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	4611      	mov	r1, r2
 8001962:	8019      	strh	r1, [r3, #0]
 8001964:	3302      	adds	r3, #2
 8001966:	0c12      	lsrs	r2, r2, #16
 8001968:	701a      	strb	r2, [r3, #0]
	VoltageLevels levels175;
	strcpy(levels175.test,"17,5");
 800196a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800196e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8001972:	4a2e      	ldr	r2, [pc, #184]	@ (8001a2c <Test+0x1cc>)
 8001974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001978:	6018      	str	r0, [r3, #0]
 800197a:	3304      	adds	r3, #4
 800197c:	7019      	strb	r1, [r3, #0]
	VoltageLevels levels18;
	strcpy(levels18.test,"18");
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	4a2b      	ldr	r2, [pc, #172]	@ (8001a30 <Test+0x1d0>)
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	4611      	mov	r1, r2
 8001988:	8019      	strh	r1, [r3, #0]
 800198a:	3302      	adds	r3, #2
 800198c:	0c12      	lsrs	r2, r2, #16
 800198e:	701a      	strb	r2, [r3, #0]

  HAL_ADC_Start(&hadc1);
 8001990:	4828      	ldr	r0, [pc, #160]	@ (8001a34 <Test+0x1d4>)
 8001992:	f000 fdf7 	bl	8002584 <HAL_ADC_Start>
  /* Infinite loop */

  while(1){


	  if(state==0){
 8001996:	4b28      	ldr	r3, [pc, #160]	@ (8001a38 <Test+0x1d8>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d156      	bne.n	8001a4c <Test+0x1ec>
		  HAL_UART_Transmit(&huart3, (uint8_t *)"<09100000000>", 13, HAL_MAX_DELAY);
 800199e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019a2:	220d      	movs	r2, #13
 80019a4:	4925      	ldr	r1, [pc, #148]	@ (8001a3c <Test+0x1dc>)
 80019a6:	4826      	ldr	r0, [pc, #152]	@ (8001a40 <Test+0x1e0>)
 80019a8:	f002 f9d8 	bl	8003d5c <HAL_UART_Transmit>
		  //CDC_Transmit_FS("<09100000000>",13);
		  osDelay(50);
 80019ac:	2032      	movs	r0, #50	@ 0x32
 80019ae:	f002 fcf7 	bl	80043a0 <osDelay>

		  HAL_UART_Transmit(&huart3, (uint8_t *)"<01004580000>", 13, HAL_MAX_DELAY);
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019b6:	220d      	movs	r2, #13
 80019b8:	4922      	ldr	r1, [pc, #136]	@ (8001a44 <Test+0x1e4>)
 80019ba:	4821      	ldr	r0, [pc, #132]	@ (8001a40 <Test+0x1e0>)
 80019bc:	f002 f9ce 	bl	8003d5c <HAL_UART_Transmit>
		  //CDC_Transmit_FS("<01004580000>", 13);
		  osDelay(50);
 80019c0:	2032      	movs	r0, #50	@ 0x32
 80019c2:	f002 fced 	bl	80043a0 <osDelay>

		  HAL_UART_Transmit(&huart3, (uint8_t *)"<03006920000>", 13, HAL_MAX_DELAY);
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ca:	220d      	movs	r2, #13
 80019cc:	491e      	ldr	r1, [pc, #120]	@ (8001a48 <Test+0x1e8>)
 80019ce:	481c      	ldr	r0, [pc, #112]	@ (8001a40 <Test+0x1e0>)
 80019d0:	f002 f9c4 	bl	8003d5c <HAL_UART_Transmit>
		  //CDC_Transmit_FS("<03006920001>",13);
		  osDelay(50);
 80019d4:	2032      	movs	r0, #50	@ 0x32
 80019d6:	f002 fce3 	bl	80043a0 <osDelay>

		  ++state;
 80019da:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <Test+0x1d8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	3301      	adds	r3, #1
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <Test+0x1d8>)
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e7d6      	b.n	8001996 <Test+0x136>
 80019e8:	006d6f63 	.word	0x006d6f63
 80019ec:	3f8ccccd 	.word	0x3f8ccccd
 80019f0:	40a00000 	.word	0x40a00000
 80019f4:	40400000 	.word	0x40400000
 80019f8:	40333333 	.word	0x40333333
 80019fc:	3fe3d70a 	.word	0x3fe3d70a
 8001a00:	3fe66666 	.word	0x3fe66666
 8001a04:	40866666 	.word	0x40866666
 8001a08:	00352c34 	.word	0x00352c34
 8001a0c:	08009864 	.word	0x08009864
 8001a10:	08009868 	.word	0x08009868
 8001a14:	0800986c 	.word	0x0800986c
 8001a18:	08009870 	.word	0x08009870
 8001a1c:	08009874 	.word	0x08009874
 8001a20:	08009878 	.word	0x08009878
 8001a24:	0800987c 	.word	0x0800987c
 8001a28:	08009880 	.word	0x08009880
 8001a2c:	08009884 	.word	0x08009884
 8001a30:	0800988c 	.word	0x0800988c
 8001a34:	200001f4 	.word	0x200001f4
 8001a38:	20000aed 	.word	0x20000aed
 8001a3c:	08009890 	.word	0x08009890
 8001a40:	200002b4 	.word	0x200002b4
 8001a44:	080098a0 	.word	0x080098a0
 8001a48:	080098b0 	.word	0x080098b0
	  }
  else{


	  //CDC_Transmit_FS("<01004500001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01004500001>", 13, HAL_MAX_DELAY);
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a50:	220d      	movs	r2, #13
 8001a52:	49cd      	ldr	r1, [pc, #820]	@ (8001d88 <Test+0x528>)
 8001a54:	48cd      	ldr	r0, [pc, #820]	@ (8001d8c <Test+0x52c>)
 8001a56:	f002 f981 	bl	8003d5c <HAL_UART_Transmit>
	  osDelay(1000);
 8001a5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a5e:	f002 fc9f 	bl	80043a0 <osDelay>
	  performTest(&levels45);
 8001a62:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f9c2 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01005000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01005000001>", 13, HAL_MAX_DELAY);
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a70:	220d      	movs	r2, #13
 8001a72:	49c7      	ldr	r1, [pc, #796]	@ (8001d90 <Test+0x530>)
 8001a74:	48c5      	ldr	r0, [pc, #788]	@ (8001d8c <Test+0x52c>)
 8001a76:	f002 f971 	bl	8003d5c <HAL_UART_Transmit>
	  	  osDelay(1000);
 8001a7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a7e:	f002 fc8f 	bl	80043a0 <osDelay>
	  performTest(&levels5);
 8001a82:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f9b2 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01006000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01006000001>", 13, HAL_MAX_DELAY);
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a90:	220d      	movs	r2, #13
 8001a92:	49c0      	ldr	r1, [pc, #768]	@ (8001d94 <Test+0x534>)
 8001a94:	48bd      	ldr	r0, [pc, #756]	@ (8001d8c <Test+0x52c>)
 8001a96:	f002 f961 	bl	8003d5c <HAL_UART_Transmit>
	  	  osDelay(1000);
 8001a9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a9e:	f002 fc7f 	bl	80043a0 <osDelay>
	  performTest(&levels6);
 8001aa2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f9a2 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01007000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01007000001>", 13, HAL_MAX_DELAY);
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ab0:	220d      	movs	r2, #13
 8001ab2:	49b9      	ldr	r1, [pc, #740]	@ (8001d98 <Test+0x538>)
 8001ab4:	48b5      	ldr	r0, [pc, #724]	@ (8001d8c <Test+0x52c>)
 8001ab6:	f002 f951 	bl	8003d5c <HAL_UART_Transmit>
	  	  osDelay(1000);
 8001aba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001abe:	f002 fc6f 	bl	80043a0 <osDelay>
	  performTest(&levels7);
 8001ac2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f992 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01008000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01008000001>", 13, HAL_MAX_DELAY);
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ad0:	220d      	movs	r2, #13
 8001ad2:	49b2      	ldr	r1, [pc, #712]	@ (8001d9c <Test+0x53c>)
 8001ad4:	48ad      	ldr	r0, [pc, #692]	@ (8001d8c <Test+0x52c>)
 8001ad6:	f002 f941 	bl	8003d5c <HAL_UART_Transmit>
	  	  osDelay(1000);
 8001ada:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ade:	f002 fc5f 	bl	80043a0 <osDelay>
	  performTest(&levels8);
 8001ae2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f982 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01009000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01009000001>", 13, HAL_MAX_DELAY);
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001af0:	220d      	movs	r2, #13
 8001af2:	49ab      	ldr	r1, [pc, #684]	@ (8001da0 <Test+0x540>)
 8001af4:	48a5      	ldr	r0, [pc, #660]	@ (8001d8c <Test+0x52c>)
 8001af6:	f002 f931 	bl	8003d5c <HAL_UART_Transmit>
	  	  osDelay(1000);
 8001afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001afe:	f002 fc4f 	bl	80043a0 <osDelay>
	  performTest(&levels9);
 8001b02:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f972 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01010000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01010000001>", 13, HAL_MAX_DELAY);
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b10:	220d      	movs	r2, #13
 8001b12:	49a4      	ldr	r1, [pc, #656]	@ (8001da4 <Test+0x544>)
 8001b14:	489d      	ldr	r0, [pc, #628]	@ (8001d8c <Test+0x52c>)
 8001b16:	f002 f921 	bl	8003d5c <HAL_UART_Transmit>
	  	  osDelay(1000);
 8001b1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b1e:	f002 fc3f 	bl	80043a0 <osDelay>
	  performTest(&levels10);
 8001b22:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f962 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01011000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01011000001>", 13, HAL_MAX_DELAY);
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b30:	220d      	movs	r2, #13
 8001b32:	499d      	ldr	r1, [pc, #628]	@ (8001da8 <Test+0x548>)
 8001b34:	4895      	ldr	r0, [pc, #596]	@ (8001d8c <Test+0x52c>)
 8001b36:	f002 f911 	bl	8003d5c <HAL_UART_Transmit>
	  	  	  osDelay(1000);
 8001b3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b3e:	f002 fc2f 	bl	80043a0 <osDelay>
	  performTest(&levels11);
 8001b42:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f952 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01012000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01012000001>", 13, HAL_MAX_DELAY);
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b50:	220d      	movs	r2, #13
 8001b52:	4996      	ldr	r1, [pc, #600]	@ (8001dac <Test+0x54c>)
 8001b54:	488d      	ldr	r0, [pc, #564]	@ (8001d8c <Test+0x52c>)
 8001b56:	f002 f901 	bl	8003d5c <HAL_UART_Transmit>
	  	  	  osDelay(1000);
 8001b5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b5e:	f002 fc1f 	bl	80043a0 <osDelay>
	  performTest(&levels12);
 8001b62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f942 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01013000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01013000001>", 13, HAL_MAX_DELAY);
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b70:	220d      	movs	r2, #13
 8001b72:	498f      	ldr	r1, [pc, #572]	@ (8001db0 <Test+0x550>)
 8001b74:	4885      	ldr	r0, [pc, #532]	@ (8001d8c <Test+0x52c>)
 8001b76:	f002 f8f1 	bl	8003d5c <HAL_UART_Transmit>
	  	  	  osDelay(1000);
 8001b7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b7e:	f002 fc0f 	bl	80043a0 <osDelay>
	  performTest(&levels13);
 8001b82:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f932 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01014000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01014000001>", 13, HAL_MAX_DELAY);
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b90:	220d      	movs	r2, #13
 8001b92:	4988      	ldr	r1, [pc, #544]	@ (8001db4 <Test+0x554>)
 8001b94:	487d      	ldr	r0, [pc, #500]	@ (8001d8c <Test+0x52c>)
 8001b96:	f002 f8e1 	bl	8003d5c <HAL_UART_Transmit>
	  	  	  osDelay(1000);
 8001b9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b9e:	f002 fbff 	bl	80043a0 <osDelay>
	  performTest(&levels14);
 8001ba2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f922 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01015000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01015000001>", 13, HAL_MAX_DELAY);
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bb0:	220d      	movs	r2, #13
 8001bb2:	4981      	ldr	r1, [pc, #516]	@ (8001db8 <Test+0x558>)
 8001bb4:	4875      	ldr	r0, [pc, #468]	@ (8001d8c <Test+0x52c>)
 8001bb6:	f002 f8d1 	bl	8003d5c <HAL_UART_Transmit>
	  	  	  osDelay(1000);
 8001bba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bbe:	f002 fbef 	bl	80043a0 <osDelay>
	  performTest(&levels15);
 8001bc2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f912 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01016000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01016000001>", 13, HAL_MAX_DELAY);
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bd0:	220d      	movs	r2, #13
 8001bd2:	497a      	ldr	r1, [pc, #488]	@ (8001dbc <Test+0x55c>)
 8001bd4:	486d      	ldr	r0, [pc, #436]	@ (8001d8c <Test+0x52c>)
 8001bd6:	f002 f8c1 	bl	8003d5c <HAL_UART_Transmit>
	  	  	  osDelay(1000);
 8001bda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bde:	f002 fbdf 	bl	80043a0 <osDelay>
	  performTest(&levels16);
 8001be2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f902 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01017000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01017000001>", 13, HAL_MAX_DELAY);
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bf0:	220d      	movs	r2, #13
 8001bf2:	4973      	ldr	r1, [pc, #460]	@ (8001dc0 <Test+0x560>)
 8001bf4:	4865      	ldr	r0, [pc, #404]	@ (8001d8c <Test+0x52c>)
 8001bf6:	f002 f8b1 	bl	8003d5c <HAL_UART_Transmit>
	  	  	  osDelay(1000);
 8001bfa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bfe:	f002 fbcf 	bl	80043a0 <osDelay>
	  performTest(&levels17);
 8001c02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f8f2 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01017500001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01017500001>", 13, HAL_MAX_DELAY);
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c10:	220d      	movs	r2, #13
 8001c12:	496c      	ldr	r1, [pc, #432]	@ (8001dc4 <Test+0x564>)
 8001c14:	485d      	ldr	r0, [pc, #372]	@ (8001d8c <Test+0x52c>)
 8001c16:	f002 f8a1 	bl	8003d5c <HAL_UART_Transmit>
	  	  	  osDelay(1000);
 8001c1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c1e:	f002 fbbf 	bl	80043a0 <osDelay>
	  performTest(&levels175);
 8001c22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f8e2 	bl	8000df0 <performTest>

	  //CDC_Transmit_FS("<01018000001>",13);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"<01018000001>", 13, HAL_MAX_DELAY);
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c30:	220d      	movs	r2, #13
 8001c32:	4965      	ldr	r1, [pc, #404]	@ (8001dc8 <Test+0x568>)
 8001c34:	4855      	ldr	r0, [pc, #340]	@ (8001d8c <Test+0x52c>)
 8001c36:	f002 f891 	bl	8003d5c <HAL_UART_Transmit>
	  	  	  osDelay(1000);
 8001c3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c3e:	f002 fbaf 	bl	80043a0 <osDelay>
	  performTest(&levels18);
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f8d2 	bl	8000df0 <performTest>

	  	  osDelay(20000);
 8001c4c:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001c50:	f002 fba6 	bl	80043a0 <osDelay>
	  compare(&toComp,&levels45);
 8001c54:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8001c58:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f9e6 	bl	8001030 <compare>
	  compare(&toComp,&levels5);
 8001c64:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001c68:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f9de 	bl	8001030 <compare>
	  compare(&toComp,&levels6);
 8001c74:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8001c78:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f9d6 	bl	8001030 <compare>
	  compare(&toComp,&levels7);
 8001c84:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 8001c88:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f9ce 	bl	8001030 <compare>
	  compare(&toComp,&levels8);
 8001c94:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8001c98:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f9c6 	bl	8001030 <compare>
	  compare(&toComp,&levels9);
 8001ca4:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8001ca8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f9be 	bl	8001030 <compare>
	  compare(&toComp,&levels10);
 8001cb4:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8001cb8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f9b6 	bl	8001030 <compare>
	  compare(&toComp,&levels11);
 8001cc4:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8001cc8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff f9ae 	bl	8001030 <compare>
	  compare(&toComp,&levels12);
 8001cd4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001cd8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f9a6 	bl	8001030 <compare>
	  compare(&toComp,&levels13);
 8001ce4:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8001ce8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f99e 	bl	8001030 <compare>
	  compare(&toComp,&levels14);
 8001cf4:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8001cf8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f996 	bl	8001030 <compare>
	  compare(&toComp,&levels15);
 8001d04:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001d08:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f98e 	bl	8001030 <compare>
	  compare(&toComp,&levels16);
 8001d14:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8001d18:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f986 	bl	8001030 <compare>
	  compare(&toComp,&levels17);
 8001d24:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001d28:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f97e 	bl	8001030 <compare>
	  compare(&toComp,&levels175);
 8001d34:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001d38:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f976 	bl	8001030 <compare>
	  HAL_UART_Transmit(&huart2, "somUART\n", 8, HAL_MAX_DELAY);
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d48:	2208      	movs	r2, #8
 8001d4a:	4920      	ldr	r1, [pc, #128]	@ (8001dcc <Test+0x56c>)
 8001d4c:	4820      	ldr	r0, [pc, #128]	@ (8001dd0 <Test+0x570>)
 8001d4e:	f002 f805 	bl	8003d5c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, &znakrx1, sizeof(znakrx1), HAL_MAX_DELAY);
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d56:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 8001d5a:	491e      	ldr	r1, [pc, #120]	@ (8001dd4 <Test+0x574>)
 8001d5c:	481c      	ldr	r0, [pc, #112]	@ (8001dd0 <Test+0x570>)
 8001d5e:	f001 fffd 	bl	8003d5c <HAL_UART_Transmit>
	  printf(znakrx1);
 8001d62:	481c      	ldr	r0, [pc, #112]	@ (8001dd4 <Test+0x574>)
 8001d64:	f005 fc68 	bl	8007638 <iprintf>
	  HAL_UART_Transmit(&huart2, "\n", 1, HAL_MAX_DELAY);
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	491a      	ldr	r1, [pc, #104]	@ (8001dd8 <Test+0x578>)
 8001d70:	4817      	ldr	r0, [pc, #92]	@ (8001dd0 <Test+0x570>)
 8001d72:	f001 fff3 	bl	8003d5c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, "END\n", 4, HAL_MAX_DELAY);
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	4917      	ldr	r1, [pc, #92]	@ (8001ddc <Test+0x57c>)
 8001d7e:	4814      	ldr	r0, [pc, #80]	@ (8001dd0 <Test+0x570>)
 8001d80:	f001 ffec 	bl	8003d5c <HAL_UART_Transmit>
	  if(state==0){
 8001d84:	e607      	b.n	8001996 <Test+0x136>
 8001d86:	bf00      	nop
 8001d88:	080098c0 	.word	0x080098c0
 8001d8c:	200002b4 	.word	0x200002b4
 8001d90:	080098d0 	.word	0x080098d0
 8001d94:	080098e0 	.word	0x080098e0
 8001d98:	080098f0 	.word	0x080098f0
 8001d9c:	08009900 	.word	0x08009900
 8001da0:	08009910 	.word	0x08009910
 8001da4:	08009920 	.word	0x08009920
 8001da8:	08009930 	.word	0x08009930
 8001dac:	08009940 	.word	0x08009940
 8001db0:	08009950 	.word	0x08009950
 8001db4:	08009960 	.word	0x08009960
 8001db8:	08009970 	.word	0x08009970
 8001dbc:	08009980 	.word	0x08009980
 8001dc0:	08009990 	.word	0x08009990
 8001dc4:	080099a0 	.word	0x080099a0
 8001dc8:	080099b0 	.word	0x080099b0
 8001dcc:	080099c0 	.word	0x080099c0
 8001dd0:	2000026c 	.word	0x2000026c
 8001dd4:	20000304 	.word	0x20000304
 8001dd8:	080099cc 	.word	0x080099cc
 8001ddc:	080099d0 	.word	0x080099d0

08001de0 <Uartcom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uartcom */
void Uartcom(void *argument)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Uartcom */
  /* Infinite loop */
  for(;;)
  {

    HAL_UART_Receive(&huart3, &znakrx1[place],1,0xFFFF);
 8001de8:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <Uartcom+0x30>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <Uartcom+0x34>)
 8001df0:	18d1      	adds	r1, r2, r3
 8001df2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001df6:	2201      	movs	r2, #1
 8001df8:	4807      	ldr	r0, [pc, #28]	@ (8001e18 <Uartcom+0x38>)
 8001dfa:	f002 f832 	bl	8003e62 <HAL_UART_Receive>
    ++place;
 8001dfe:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <Uartcom+0x30>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b02      	ldr	r3, [pc, #8]	@ (8001e10 <Uartcom+0x30>)
 8001e08:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive(&huart3, &znakrx1[place],1,0xFFFF);
 8001e0a:	bf00      	nop
 8001e0c:	e7ec      	b.n	8001de8 <Uartcom+0x8>
 8001e0e:	bf00      	nop
 8001e10:	20000aec 	.word	0x20000aec
 8001e14:	20000304 	.word	0x20000304
 8001e18:	200002b4 	.word	0x200002b4

08001e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e20:	b672      	cpsid	i
}
 8001e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <Error_Handler+0x8>

08001e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e2e:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <HAL_MspInit+0x68>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	4a17      	ldr	r2, [pc, #92]	@ (8001e90 <HAL_MspInit+0x68>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6193      	str	r3, [r2, #24]
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_MspInit+0x68>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_MspInit+0x68>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4a11      	ldr	r2, [pc, #68]	@ (8001e90 <HAL_MspInit+0x68>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e50:	61d3      	str	r3, [r2, #28]
 8001e52:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <HAL_MspInit+0x68>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	210f      	movs	r1, #15
 8001e62:	f06f 0001 	mvn.w	r0, #1
 8001e66:	f000 ffb8 	bl	8002dda <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_MspInit+0x6c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <HAL_MspInit+0x6c>)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40010000 	.word	0x40010000

08001e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	@ 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0318 	add.w	r3, r7, #24
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f5c <HAL_ADC_MspInit+0xc4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d14d      	bne.n	8001f54 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eb8:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a28      	ldr	r2, [pc, #160]	@ (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed0:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a22      	ldr	r2, [pc, #136]	@ (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001ed6:	f043 0310 	orr.w	r3, r3, #16
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b20      	ldr	r3, [pc, #128]	@ (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a1c      	ldr	r2, [pc, #112]	@ (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a16      	ldr	r2, [pc, #88]	@ (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = VIN42_Pin|VIN25_Pin|Vin15_Pin;
 8001f18:	2323      	movs	r3, #35	@ 0x23
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f20:	f107 0318 	add.w	r3, r7, #24
 8001f24:	4619      	mov	r1, r3
 8001f26:	480f      	ldr	r0, [pc, #60]	@ (8001f64 <HAL_ADC_MspInit+0xcc>)
 8001f28:	f000 ff8e 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VIN28_Pin|VIN18_Pin|VIN30_Pin|VIN11_Pin;
 8001f2c:	23d2      	movs	r3, #210	@ 0xd2
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f30:	2303      	movs	r3, #3
 8001f32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f34:	f107 0318 	add.w	r3, r7, #24
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480b      	ldr	r0, [pc, #44]	@ (8001f68 <HAL_ADC_MspInit+0xd0>)
 8001f3c:	f000 ff84 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VIN178_Pin;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f44:	2303      	movs	r3, #3
 8001f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VIN178_GPIO_Port, &GPIO_InitStruct);
 8001f48:	f107 0318 	add.w	r3, r7, #24
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4807      	ldr	r0, [pc, #28]	@ (8001f6c <HAL_ADC_MspInit+0xd4>)
 8001f50:	f000 ff7a 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f54:	bf00      	nop
 8001f56:	3728      	adds	r7, #40	@ 0x28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40012400 	.word	0x40012400
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40011000 	.word	0x40011000
 8001f68:	40010800 	.word	0x40010800
 8001f6c:	40010c00 	.word	0x40010c00

08001f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	@ 0x30
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0320 	add.w	r3, r7, #32
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a4d      	ldr	r2, [pc, #308]	@ (80020c0 <HAL_UART_MspInit+0x150>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d132      	bne.n	8001ff6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f90:	4b4c      	ldr	r3, [pc, #304]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a4b      	ldr	r2, [pc, #300]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 8001f96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b49      	ldr	r3, [pc, #292]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b46      	ldr	r3, [pc, #280]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a45      	ldr	r2, [pc, #276]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0320 	add.w	r3, r7, #32
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	483c      	ldr	r0, [pc, #240]	@ (80020c8 <HAL_UART_MspInit+0x158>)
 8001fd6:	f000 ff37 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 0320 	add.w	r3, r7, #32
 8001fec:	4619      	mov	r1, r3
 8001fee:	4836      	ldr	r0, [pc, #216]	@ (80020c8 <HAL_UART_MspInit+0x158>)
 8001ff0:	f000 ff2a 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ff4:	e060      	b.n	80020b8 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a34      	ldr	r2, [pc, #208]	@ (80020cc <HAL_UART_MspInit+0x15c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d124      	bne.n	800204a <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002000:	4b30      	ldr	r3, [pc, #192]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4a2f      	ldr	r2, [pc, #188]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 8002006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800200a:	61d3      	str	r3, [r2, #28]
 800200c:	4b2d      	ldr	r3, [pc, #180]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	4b2a      	ldr	r3, [pc, #168]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a29      	ldr	r2, [pc, #164]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b27      	ldr	r3, [pc, #156]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002030:	230c      	movs	r3, #12
 8002032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2302      	movs	r3, #2
 800203a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	f107 0320 	add.w	r3, r7, #32
 8002040:	4619      	mov	r1, r3
 8002042:	4821      	ldr	r0, [pc, #132]	@ (80020c8 <HAL_UART_MspInit+0x158>)
 8002044:	f000 ff00 	bl	8002e48 <HAL_GPIO_Init>
}
 8002048:	e036      	b.n	80020b8 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a20      	ldr	r2, [pc, #128]	@ (80020d0 <HAL_UART_MspInit+0x160>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d131      	bne.n	80020b8 <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002054:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	4a1a      	ldr	r2, [pc, #104]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 800205a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800205e:	61d3      	str	r3, [r2, #28]
 8002060:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a14      	ldr	r2, [pc, #80]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 8002072:	f043 0308 	orr.w	r3, r3, #8
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <HAL_UART_MspInit+0x154>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002084:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	f107 0320 	add.w	r3, r7, #32
 8002096:	4619      	mov	r1, r3
 8002098:	480e      	ldr	r0, [pc, #56]	@ (80020d4 <HAL_UART_MspInit+0x164>)
 800209a:	f000 fed5 	bl	8002e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800209e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 0320 	add.w	r3, r7, #32
 80020b0:	4619      	mov	r1, r3
 80020b2:	4808      	ldr	r0, [pc, #32]	@ (80020d4 <HAL_UART_MspInit+0x164>)
 80020b4:	f000 fec8 	bl	8002e48 <HAL_GPIO_Init>
}
 80020b8:	bf00      	nop
 80020ba:	3730      	adds	r7, #48	@ 0x30
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40013800 	.word	0x40013800
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40010800 	.word	0x40010800
 80020cc:	40004400 	.word	0x40004400
 80020d0:	40004800 	.word	0x40004800
 80020d4:	40010c00 	.word	0x40010c00

080020d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <NMI_Handler+0x4>

080020e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <HardFault_Handler+0x4>

080020e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <MemManage_Handler+0x4>

080020f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <BusFault_Handler+0x4>

080020f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <UsageFault_Handler+0x4>

08002100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002110:	f000 f944 	bl	800239c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002114:	f003 fd9e 	bl	8005c54 <xTaskGetSchedulerState>
 8002118:	4603      	mov	r3, r0
 800211a:	2b01      	cmp	r3, #1
 800211c:	d001      	beq.n	8002122 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800211e:	f004 fb0b 	bl	8006738 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}

08002126 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800212a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800212e:	f001 f827 	bl	8003180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}

08002136 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  return 1;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <_kill>:

int _kill(int pid, int sig)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800214e:	f005 fb4d 	bl	80077ec <__errno>
 8002152:	4603      	mov	r3, r0
 8002154:	2216      	movs	r2, #22
 8002156:	601a      	str	r2, [r3, #0]
  return -1;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_exit>:

void _exit (int status)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800216c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ffe7 	bl	8002144 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002176:	bf00      	nop
 8002178:	e7fd      	b.n	8002176 <_exit+0x12>

0800217a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e00a      	b.n	80021a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800218c:	f3af 8000 	nop.w
 8002190:	4601      	mov	r1, r0
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	60ba      	str	r2, [r7, #8]
 8002198:	b2ca      	uxtb	r2, r1
 800219a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3301      	adds	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	dbf0      	blt.n	800218c <_read+0x12>
  }

  return len;
 80021aa:	687b      	ldr	r3, [r7, #4]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	e009      	b.n	80021da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	60ba      	str	r2, [r7, #8]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fdb8 	bl	8000d44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	3301      	adds	r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	429a      	cmp	r2, r3
 80021e0:	dbf1      	blt.n	80021c6 <_write+0x12>
  }
  return len;
 80021e2:	687b      	ldr	r3, [r7, #4]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_close>:

int _close(int file)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002212:	605a      	str	r2, [r3, #4]
  return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <_isatty>:

int _isatty(int file)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002228:	2301      	movs	r3, #1
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002254:	4a14      	ldr	r2, [pc, #80]	@ (80022a8 <_sbrk+0x5c>)
 8002256:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <_sbrk+0x60>)
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d102      	bne.n	800226e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002268:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <_sbrk+0x64>)
 800226a:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <_sbrk+0x68>)
 800226c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226e:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	429a      	cmp	r2, r3
 800227a:	d207      	bcs.n	800228c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800227c:	f005 fab6 	bl	80077ec <__errno>
 8002280:	4603      	mov	r3, r0
 8002282:	220c      	movs	r2, #12
 8002284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002286:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800228a:	e009      	b.n	80022a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800228c:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002292:	4b07      	ldr	r3, [pc, #28]	@ (80022b0 <_sbrk+0x64>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	4a05      	ldr	r2, [pc, #20]	@ (80022b0 <_sbrk+0x64>)
 800229c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229e:	68fb      	ldr	r3, [r7, #12]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20005000 	.word	0x20005000
 80022ac:	00000400 	.word	0x00000400
 80022b0:	20000af0 	.word	0x20000af0
 80022b4:	20002628 	.word	0x20002628

080022b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c4:	f7ff fff8 	bl	80022b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c8:	480b      	ldr	r0, [pc, #44]	@ (80022f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022ca:	490c      	ldr	r1, [pc, #48]	@ (80022fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002300 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d0:	e002      	b.n	80022d8 <LoopCopyDataInit>

080022d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d6:	3304      	adds	r3, #4

080022d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022dc:	d3f9      	bcc.n	80022d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022de:	4a09      	ldr	r2, [pc, #36]	@ (8002304 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022e0:	4c09      	ldr	r4, [pc, #36]	@ (8002308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e4:	e001      	b.n	80022ea <LoopFillZerobss>

080022e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e8:	3204      	adds	r2, #4

080022ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ec:	d3fb      	bcc.n	80022e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ee:	f005 fa83 	bl	80077f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022f2:	f7ff f8fd 	bl	80014f0 <main>
  bx lr
 80022f6:	4770      	bx	lr
  ldr r0, =_sdata
 80022f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022fc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002300:	08009df8 	.word	0x08009df8
  ldr r2, =_sbss
 8002304:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002308:	20002624 	.word	0x20002624

0800230c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800230c:	e7fe      	b.n	800230c <ADC1_2_IRQHandler>
	...

08002310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <HAL_Init+0x28>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a07      	ldr	r2, [pc, #28]	@ (8002338 <HAL_Init+0x28>)
 800231a:	f043 0310 	orr.w	r3, r3, #16
 800231e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002320:	2003      	movs	r0, #3
 8002322:	f000 fd4f 	bl	8002dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002326:	200f      	movs	r0, #15
 8002328:	f000 f808 	bl	800233c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800232c:	f7ff fd7c 	bl	8001e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40022000 	.word	0x40022000

0800233c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002344:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <HAL_InitTick+0x54>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <HAL_InitTick+0x58>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002352:	fbb3 f3f1 	udiv	r3, r3, r1
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fd67 	bl	8002e2e <HAL_SYSTICK_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e00e      	b.n	8002388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b0f      	cmp	r3, #15
 800236e:	d80a      	bhi.n	8002386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002370:	2200      	movs	r2, #0
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002378:	f000 fd2f 	bl	8002dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800237c:	4a06      	ldr	r2, [pc, #24]	@ (8002398 <HAL_InitTick+0x5c>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e000      	b.n	8002388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000000 	.word	0x20000000
 8002394:	20000008 	.word	0x20000008
 8002398:	20000004 	.word	0x20000004

0800239c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <HAL_IncTick+0x1c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_IncTick+0x20>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	4a03      	ldr	r2, [pc, #12]	@ (80023bc <HAL_IncTick+0x20>)
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	20000008 	.word	0x20000008
 80023bc:	20000af4 	.word	0x20000af4

080023c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return uwTick;
 80023c4:	4b02      	ldr	r3, [pc, #8]	@ (80023d0 <HAL_GetTick+0x10>)
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	20000af4 	.word	0x20000af4

080023d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0be      	b.n	8002574 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fd40 	bl	8001e98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fbc5 	bl	8002ba8 <ADC_ConversionStop_Disable>
 800241e:	4603      	mov	r3, r0
 8002420:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	f040 8099 	bne.w	8002562 <HAL_ADC_Init+0x18e>
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 8095 	bne.w	8002562 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002440:	f023 0302 	bic.w	r3, r3, #2
 8002444:	f043 0202 	orr.w	r2, r3, #2
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002454:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7b1b      	ldrb	r3, [r3, #12]
 800245a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800245c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	4313      	orrs	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800246c:	d003      	beq.n	8002476 <HAL_ADC_Init+0xa2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <HAL_ADC_Init+0xa8>
 8002476:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800247a:	e000      	b.n	800247e <HAL_ADC_Init+0xaa>
 800247c:	2300      	movs	r3, #0
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7d1b      	ldrb	r3, [r3, #20]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d119      	bne.n	80024c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7b1b      	ldrb	r3, [r3, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d109      	bne.n	80024a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	3b01      	subs	r3, #1
 800249a:	035a      	lsls	r2, r3, #13
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	e00b      	b.n	80024c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	f043 0220 	orr.w	r2, r3, #32
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	4b28      	ldr	r3, [pc, #160]	@ (800257c <HAL_ADC_Init+0x1a8>)
 80024dc:	4013      	ands	r3, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024f0:	d003      	beq.n	80024fa <HAL_ADC_Init+0x126>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d104      	bne.n	8002504 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	3b01      	subs	r3, #1
 8002500:	051b      	lsls	r3, r3, #20
 8002502:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	430a      	orrs	r2, r1
 8002516:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	4b18      	ldr	r3, [pc, #96]	@ (8002580 <HAL_ADC_Init+0x1ac>)
 8002520:	4013      	ands	r3, r2
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	429a      	cmp	r2, r3
 8002526:	d10b      	bne.n	8002540 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	f023 0303 	bic.w	r3, r3, #3
 8002536:	f043 0201 	orr.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800253e:	e018      	b.n	8002572 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	f023 0312 	bic.w	r3, r3, #18
 8002548:	f043 0210 	orr.w	r2, r3, #16
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002560:	e007      	b.n	8002572 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	f043 0210 	orr.w	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002572:	7dfb      	ldrb	r3, [r7, #23]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	ffe1f7fd 	.word	0xffe1f7fd
 8002580:	ff1f0efe 	.word	0xff1f0efe

08002584 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_ADC_Start+0x1a>
 800259a:	2302      	movs	r3, #2
 800259c:	e098      	b.n	80026d0 <HAL_ADC_Start+0x14c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 faa4 	bl	8002af4 <ADC_Enable>
 80025ac:	4603      	mov	r3, r0
 80025ae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 8087 	bne.w	80026c6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a41      	ldr	r2, [pc, #260]	@ (80026d8 <HAL_ADC_Start+0x154>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d105      	bne.n	80025e2 <HAL_ADC_Start+0x5e>
 80025d6:	4b41      	ldr	r3, [pc, #260]	@ (80026dc <HAL_ADC_Start+0x158>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d115      	bne.n	800260e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d026      	beq.n	800264a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002600:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002604:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800260c:	e01d      	b.n	800264a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002612:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a2f      	ldr	r2, [pc, #188]	@ (80026dc <HAL_ADC_Start+0x158>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d004      	beq.n	800262e <HAL_ADC_Start+0xaa>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2b      	ldr	r2, [pc, #172]	@ (80026d8 <HAL_ADC_Start+0x154>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10d      	bne.n	800264a <HAL_ADC_Start+0xc6>
 800262e:	4b2b      	ldr	r3, [pc, #172]	@ (80026dc <HAL_ADC_Start+0x158>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002642:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265a:	f023 0206 	bic.w	r2, r3, #6
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002662:	e002      	b.n	800266a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f06f 0202 	mvn.w	r2, #2
 800267a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002686:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800268a:	d113      	bne.n	80026b4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002690:	4a11      	ldr	r2, [pc, #68]	@ (80026d8 <HAL_ADC_Start+0x154>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d105      	bne.n	80026a2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002696:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_ADC_Start+0x158>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d108      	bne.n	80026b4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	e00c      	b.n	80026ce <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	e003      	b.n	80026ce <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40012800 	.word	0x40012800
 80026dc:	40012400 	.word	0x40012400

080026e0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80026f6:	f7ff fe63 	bl	80023c0 <HAL_GetTick>
 80026fa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270e:	f043 0220 	orr.w	r2, r3, #32
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0d3      	b.n	80028ca <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d131      	bne.n	8002794 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002736:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800273a:	2b00      	cmp	r3, #0
 800273c:	d12a      	bne.n	8002794 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800273e:	e021      	b.n	8002784 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002746:	d01d      	beq.n	8002784 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_ADC_PollForConversion+0x7e>
 800274e:	f7ff fe37 	bl	80023c0 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d212      	bcs.n	8002784 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	f043 0204 	orr.w	r2, r3, #4
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0a2      	b.n	80028ca <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0d6      	beq.n	8002740 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002792:	e070      	b.n	8002876 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002794:	4b4f      	ldr	r3, [pc, #316]	@ (80028d4 <HAL_ADC_PollForConversion+0x1f4>)
 8002796:	681c      	ldr	r4, [r3, #0]
 8002798:	2002      	movs	r0, #2
 800279a:	f001 f9d9 	bl	8003b50 <HAL_RCCEx_GetPeriphCLKFreq>
 800279e:	4603      	mov	r3, r0
 80027a0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6919      	ldr	r1, [r3, #16]
 80027aa:	4b4b      	ldr	r3, [pc, #300]	@ (80028d8 <HAL_ADC_PollForConversion+0x1f8>)
 80027ac:	400b      	ands	r3, r1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d118      	bne.n	80027e4 <HAL_ADC_PollForConversion+0x104>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68d9      	ldr	r1, [r3, #12]
 80027b8:	4b48      	ldr	r3, [pc, #288]	@ (80028dc <HAL_ADC_PollForConversion+0x1fc>)
 80027ba:	400b      	ands	r3, r1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d111      	bne.n	80027e4 <HAL_ADC_PollForConversion+0x104>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6919      	ldr	r1, [r3, #16]
 80027c6:	4b46      	ldr	r3, [pc, #280]	@ (80028e0 <HAL_ADC_PollForConversion+0x200>)
 80027c8:	400b      	ands	r3, r1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d108      	bne.n	80027e0 <HAL_ADC_PollForConversion+0x100>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68d9      	ldr	r1, [r3, #12]
 80027d4:	4b43      	ldr	r3, [pc, #268]	@ (80028e4 <HAL_ADC_PollForConversion+0x204>)
 80027d6:	400b      	ands	r3, r1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_PollForConversion+0x100>
 80027dc:	2314      	movs	r3, #20
 80027de:	e020      	b.n	8002822 <HAL_ADC_PollForConversion+0x142>
 80027e0:	2329      	movs	r3, #41	@ 0x29
 80027e2:	e01e      	b.n	8002822 <HAL_ADC_PollForConversion+0x142>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6919      	ldr	r1, [r3, #16]
 80027ea:	4b3d      	ldr	r3, [pc, #244]	@ (80028e0 <HAL_ADC_PollForConversion+0x200>)
 80027ec:	400b      	ands	r3, r1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_ADC_PollForConversion+0x120>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68d9      	ldr	r1, [r3, #12]
 80027f8:	4b3a      	ldr	r3, [pc, #232]	@ (80028e4 <HAL_ADC_PollForConversion+0x204>)
 80027fa:	400b      	ands	r3, r1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00d      	beq.n	800281c <HAL_ADC_PollForConversion+0x13c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6919      	ldr	r1, [r3, #16]
 8002806:	4b38      	ldr	r3, [pc, #224]	@ (80028e8 <HAL_ADC_PollForConversion+0x208>)
 8002808:	400b      	ands	r3, r1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d108      	bne.n	8002820 <HAL_ADC_PollForConversion+0x140>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68d9      	ldr	r1, [r3, #12]
 8002814:	4b34      	ldr	r3, [pc, #208]	@ (80028e8 <HAL_ADC_PollForConversion+0x208>)
 8002816:	400b      	ands	r3, r1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_ADC_PollForConversion+0x140>
 800281c:	2354      	movs	r3, #84	@ 0x54
 800281e:	e000      	b.n	8002822 <HAL_ADC_PollForConversion+0x142>
 8002820:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002828:	e021      	b.n	800286e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002830:	d01a      	beq.n	8002868 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d007      	beq.n	8002848 <HAL_ADC_PollForConversion+0x168>
 8002838:	f7ff fdc2 	bl	80023c0 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d20f      	bcs.n	8002868 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	429a      	cmp	r2, r3
 800284e:	d90b      	bls.n	8002868 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	f043 0204 	orr.w	r2, r3, #4
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e030      	b.n	80028ca <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3301      	adds	r3, #1
 800286c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	429a      	cmp	r2, r3
 8002874:	d8d9      	bhi.n	800282a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f06f 0212 	mvn.w	r2, #18
 800287e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002896:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800289a:	d115      	bne.n	80028c8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d111      	bne.n	80028c8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd90      	pop	{r4, r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000000 	.word	0x20000000
 80028d8:	24924924 	.word	0x24924924
 80028dc:	00924924 	.word	0x00924924
 80028e0:	12492492 	.word	0x12492492
 80028e4:	00492492 	.word	0x00492492
 80028e8:	00249249 	.word	0x00249249

080028ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x20>
 8002920:	2302      	movs	r3, #2
 8002922:	e0dc      	b.n	8002ade <HAL_ADC_ConfigChannel+0x1da>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d81c      	bhi.n	800296e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	3b05      	subs	r3, #5
 8002946:	221f      	movs	r2, #31
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	4019      	ands	r1, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	3b05      	subs	r3, #5
 8002960:	fa00 f203 	lsl.w	r2, r0, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	635a      	str	r2, [r3, #52]	@ 0x34
 800296c:	e03c      	b.n	80029e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d81c      	bhi.n	80029b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	3b23      	subs	r3, #35	@ 0x23
 8002988:	221f      	movs	r2, #31
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	4019      	ands	r1, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	3b23      	subs	r3, #35	@ 0x23
 80029a2:	fa00 f203 	lsl.w	r2, r0, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80029ae:	e01b      	b.n	80029e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	3b41      	subs	r3, #65	@ 0x41
 80029c2:	221f      	movs	r2, #31
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	4019      	ands	r1, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	3b41      	subs	r3, #65	@ 0x41
 80029dc:	fa00 f203 	lsl.w	r2, r0, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	d91c      	bls.n	8002a2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68d9      	ldr	r1, [r3, #12]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	3b1e      	subs	r3, #30
 8002a02:	2207      	movs	r2, #7
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	4019      	ands	r1, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6898      	ldr	r0, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	3b1e      	subs	r3, #30
 8002a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	e019      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6919      	ldr	r1, [r3, #16]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	4019      	ands	r1, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6898      	ldr	r0, [r3, #8]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	fa00 f203 	lsl.w	r2, r0, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d003      	beq.n	8002a6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a6a:	2b11      	cmp	r3, #17
 8002a6c:	d132      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d125      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d126      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002a94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a9e:	4b13      	ldr	r3, [pc, #76]	@ (8002aec <HAL_ADC_ConfigChannel+0x1e8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a13      	ldr	r2, [pc, #76]	@ (8002af0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	0c9a      	lsrs	r2, r3, #18
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ab4:	e002      	b.n	8002abc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f9      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x1b2>
 8002ac2:	e007      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	40012400 	.word	0x40012400
 8002aec:	20000000 	.word	0x20000000
 8002af0:	431bde83 	.word	0x431bde83

08002af4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d040      	beq.n	8002b94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b22:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba0 <ADC_Enable+0xac>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba4 <ADC_Enable+0xb0>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	0c9b      	lsrs	r3, r3, #18
 8002b2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b30:	e002      	b.n	8002b38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f9      	bne.n	8002b32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b3e:	f7ff fc3f 	bl	80023c0 <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b44:	e01f      	b.n	8002b86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b46:	f7ff fc3b 	bl	80023c0 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d918      	bls.n	8002b86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d011      	beq.n	8002b86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	f043 0210 	orr.w	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e007      	b.n	8002b96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d1d8      	bne.n	8002b46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	431bde83 	.word	0x431bde83

08002ba8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d12e      	bne.n	8002c20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bd2:	f7ff fbf5 	bl	80023c0 <HAL_GetTick>
 8002bd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bd8:	e01b      	b.n	8002c12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bda:	f7ff fbf1 	bl	80023c0 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d914      	bls.n	8002c12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10d      	bne.n	8002c12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfa:	f043 0210 	orr.w	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	f043 0201 	orr.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e007      	b.n	8002c22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d0dc      	beq.n	8002bda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5e:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	60d3      	str	r3, [r2, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4906      	ldr	r1, [pc, #24]	@ (8002cc4 <__NVIC_EnableIRQ+0x34>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	e000e100 	.word	0xe000e100

08002cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	6039      	str	r1, [r7, #0]
 8002cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	db0a      	blt.n	8002cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	490c      	ldr	r1, [pc, #48]	@ (8002d14 <__NVIC_SetPriority+0x4c>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	440b      	add	r3, r1
 8002cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf0:	e00a      	b.n	8002d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4908      	ldr	r1, [pc, #32]	@ (8002d18 <__NVIC_SetPriority+0x50>)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	3b04      	subs	r3, #4
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	440b      	add	r3, r1
 8002d06:	761a      	strb	r2, [r3, #24]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000e100 	.word	0xe000e100
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f1c3 0307 	rsb	r3, r3, #7
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	bf28      	it	cs
 8002d3a:	2304      	movcs	r3, #4
 8002d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3304      	adds	r3, #4
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d902      	bls.n	8002d4c <NVIC_EncodePriority+0x30>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3b03      	subs	r3, #3
 8002d4a:	e000      	b.n	8002d4e <NVIC_EncodePriority+0x32>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	401a      	ands	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	4313      	orrs	r3, r2
         );
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3724      	adds	r7, #36	@ 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d90:	d301      	bcc.n	8002d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00f      	b.n	8002db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d96:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <SysTick_Config+0x40>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9e:	210f      	movs	r1, #15
 8002da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002da4:	f7ff ff90 	bl	8002cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da8:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <SysTick_Config+0x40>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dae:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <SysTick_Config+0x40>)
 8002db0:	2207      	movs	r2, #7
 8002db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	e000e010 	.word	0xe000e010

08002dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ff2d 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dec:	f7ff ff42 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	6978      	ldr	r0, [r7, #20]
 8002df8:	f7ff ff90 	bl	8002d1c <NVIC_EncodePriority>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff5f 	bl	8002cc8 <__NVIC_SetPriority>
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff35 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ffa2 	bl	8002d80 <SysTick_Config>
 8002e3c:	4603      	mov	r3, r0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b08b      	sub	sp, #44	@ 0x2c
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5a:	e169      	b.n	8003130 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	f040 8158 	bne.w	800312a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4a9a      	ldr	r2, [pc, #616]	@ (80030e8 <HAL_GPIO_Init+0x2a0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d05e      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
 8002e84:	4a98      	ldr	r2, [pc, #608]	@ (80030e8 <HAL_GPIO_Init+0x2a0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d875      	bhi.n	8002f76 <HAL_GPIO_Init+0x12e>
 8002e8a:	4a98      	ldr	r2, [pc, #608]	@ (80030ec <HAL_GPIO_Init+0x2a4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d058      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
 8002e90:	4a96      	ldr	r2, [pc, #600]	@ (80030ec <HAL_GPIO_Init+0x2a4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d86f      	bhi.n	8002f76 <HAL_GPIO_Init+0x12e>
 8002e96:	4a96      	ldr	r2, [pc, #600]	@ (80030f0 <HAL_GPIO_Init+0x2a8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d052      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
 8002e9c:	4a94      	ldr	r2, [pc, #592]	@ (80030f0 <HAL_GPIO_Init+0x2a8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d869      	bhi.n	8002f76 <HAL_GPIO_Init+0x12e>
 8002ea2:	4a94      	ldr	r2, [pc, #592]	@ (80030f4 <HAL_GPIO_Init+0x2ac>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d04c      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
 8002ea8:	4a92      	ldr	r2, [pc, #584]	@ (80030f4 <HAL_GPIO_Init+0x2ac>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d863      	bhi.n	8002f76 <HAL_GPIO_Init+0x12e>
 8002eae:	4a92      	ldr	r2, [pc, #584]	@ (80030f8 <HAL_GPIO_Init+0x2b0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d046      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
 8002eb4:	4a90      	ldr	r2, [pc, #576]	@ (80030f8 <HAL_GPIO_Init+0x2b0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d85d      	bhi.n	8002f76 <HAL_GPIO_Init+0x12e>
 8002eba:	2b12      	cmp	r3, #18
 8002ebc:	d82a      	bhi.n	8002f14 <HAL_GPIO_Init+0xcc>
 8002ebe:	2b12      	cmp	r3, #18
 8002ec0:	d859      	bhi.n	8002f76 <HAL_GPIO_Init+0x12e>
 8002ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec8 <HAL_GPIO_Init+0x80>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002f43 	.word	0x08002f43
 8002ecc:	08002f1d 	.word	0x08002f1d
 8002ed0:	08002f2f 	.word	0x08002f2f
 8002ed4:	08002f71 	.word	0x08002f71
 8002ed8:	08002f77 	.word	0x08002f77
 8002edc:	08002f77 	.word	0x08002f77
 8002ee0:	08002f77 	.word	0x08002f77
 8002ee4:	08002f77 	.word	0x08002f77
 8002ee8:	08002f77 	.word	0x08002f77
 8002eec:	08002f77 	.word	0x08002f77
 8002ef0:	08002f77 	.word	0x08002f77
 8002ef4:	08002f77 	.word	0x08002f77
 8002ef8:	08002f77 	.word	0x08002f77
 8002efc:	08002f77 	.word	0x08002f77
 8002f00:	08002f77 	.word	0x08002f77
 8002f04:	08002f77 	.word	0x08002f77
 8002f08:	08002f77 	.word	0x08002f77
 8002f0c:	08002f25 	.word	0x08002f25
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	4a79      	ldr	r2, [pc, #484]	@ (80030fc <HAL_GPIO_Init+0x2b4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f1a:	e02c      	b.n	8002f76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	623b      	str	r3, [r7, #32]
          break;
 8002f22:	e029      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	623b      	str	r3, [r7, #32]
          break;
 8002f2c:	e024      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	3308      	adds	r3, #8
 8002f34:	623b      	str	r3, [r7, #32]
          break;
 8002f36:	e01f      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	623b      	str	r3, [r7, #32]
          break;
 8002f40:	e01a      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	623b      	str	r3, [r7, #32]
          break;
 8002f4e:	e013      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f58:	2308      	movs	r3, #8
 8002f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	611a      	str	r2, [r3, #16]
          break;
 8002f62:	e009      	b.n	8002f78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f64:	2308      	movs	r3, #8
 8002f66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	615a      	str	r2, [r3, #20]
          break;
 8002f6e:	e003      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
          break;
 8002f74:	e000      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          break;
 8002f76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2bff      	cmp	r3, #255	@ 0xff
 8002f7c:	d801      	bhi.n	8002f82 <HAL_GPIO_Init+0x13a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	e001      	b.n	8002f86 <HAL_GPIO_Init+0x13e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2bff      	cmp	r3, #255	@ 0xff
 8002f8c:	d802      	bhi.n	8002f94 <HAL_GPIO_Init+0x14c>
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	e002      	b.n	8002f9a <HAL_GPIO_Init+0x152>
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	3b08      	subs	r3, #8
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	210f      	movs	r1, #15
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	401a      	ands	r2, r3
 8002fac:	6a39      	ldr	r1, [r7, #32]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80b1 	beq.w	800312a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fc8:	4b4d      	ldr	r3, [pc, #308]	@ (8003100 <HAL_GPIO_Init+0x2b8>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	4a4c      	ldr	r2, [pc, #304]	@ (8003100 <HAL_GPIO_Init+0x2b8>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6193      	str	r3, [r2, #24]
 8002fd4:	4b4a      	ldr	r3, [pc, #296]	@ (8003100 <HAL_GPIO_Init+0x2b8>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fe0:	4a48      	ldr	r2, [pc, #288]	@ (8003104 <HAL_GPIO_Init+0x2bc>)
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	220f      	movs	r2, #15
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4013      	ands	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a40      	ldr	r2, [pc, #256]	@ (8003108 <HAL_GPIO_Init+0x2c0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d013      	beq.n	8003034 <HAL_GPIO_Init+0x1ec>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a3f      	ldr	r2, [pc, #252]	@ (800310c <HAL_GPIO_Init+0x2c4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00d      	beq.n	8003030 <HAL_GPIO_Init+0x1e8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a3e      	ldr	r2, [pc, #248]	@ (8003110 <HAL_GPIO_Init+0x2c8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d007      	beq.n	800302c <HAL_GPIO_Init+0x1e4>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3d      	ldr	r2, [pc, #244]	@ (8003114 <HAL_GPIO_Init+0x2cc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_GPIO_Init+0x1e0>
 8003024:	2303      	movs	r3, #3
 8003026:	e006      	b.n	8003036 <HAL_GPIO_Init+0x1ee>
 8003028:	2304      	movs	r3, #4
 800302a:	e004      	b.n	8003036 <HAL_GPIO_Init+0x1ee>
 800302c:	2302      	movs	r3, #2
 800302e:	e002      	b.n	8003036 <HAL_GPIO_Init+0x1ee>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_GPIO_Init+0x1ee>
 8003034:	2300      	movs	r3, #0
 8003036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003038:	f002 0203 	and.w	r2, r2, #3
 800303c:	0092      	lsls	r2, r2, #2
 800303e:	4093      	lsls	r3, r2
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003046:	492f      	ldr	r1, [pc, #188]	@ (8003104 <HAL_GPIO_Init+0x2bc>)
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	3302      	adds	r3, #2
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003060:	4b2d      	ldr	r3, [pc, #180]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	492c      	ldr	r1, [pc, #176]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	608b      	str	r3, [r1, #8]
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800306e:	4b2a      	ldr	r3, [pc, #168]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	43db      	mvns	r3, r3
 8003076:	4928      	ldr	r1, [pc, #160]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 8003078:	4013      	ands	r3, r2
 800307a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003088:	4b23      	ldr	r3, [pc, #140]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	4922      	ldr	r1, [pc, #136]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	60cb      	str	r3, [r1, #12]
 8003094:	e006      	b.n	80030a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003096:	4b20      	ldr	r3, [pc, #128]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	43db      	mvns	r3, r3
 800309e:	491e      	ldr	r1, [pc, #120]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d006      	beq.n	80030be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030b0:	4b19      	ldr	r3, [pc, #100]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4918      	ldr	r1, [pc, #96]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
 80030bc:	e006      	b.n	80030cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030be:	4b16      	ldr	r3, [pc, #88]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	4914      	ldr	r1, [pc, #80]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d021      	beq.n	800311c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	490e      	ldr	r1, [pc, #56]	@ (8003118 <HAL_GPIO_Init+0x2d0>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
 80030e4:	e021      	b.n	800312a <HAL_GPIO_Init+0x2e2>
 80030e6:	bf00      	nop
 80030e8:	10320000 	.word	0x10320000
 80030ec:	10310000 	.word	0x10310000
 80030f0:	10220000 	.word	0x10220000
 80030f4:	10210000 	.word	0x10210000
 80030f8:	10120000 	.word	0x10120000
 80030fc:	10110000 	.word	0x10110000
 8003100:	40021000 	.word	0x40021000
 8003104:	40010000 	.word	0x40010000
 8003108:	40010800 	.word	0x40010800
 800310c:	40010c00 	.word	0x40010c00
 8003110:	40011000 	.word	0x40011000
 8003114:	40011400 	.word	0x40011400
 8003118:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800311c:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_GPIO_Init+0x304>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	43db      	mvns	r3, r3
 8003124:	4909      	ldr	r1, [pc, #36]	@ (800314c <HAL_GPIO_Init+0x304>)
 8003126:	4013      	ands	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	3301      	adds	r3, #1
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	f47f ae8e 	bne.w	8002e5c <HAL_GPIO_Init+0x14>
  }
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	372c      	adds	r7, #44	@ 0x2c
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	40010400 	.word	0x40010400

08003150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
 800315c:	4613      	mov	r3, r2
 800315e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003160:	787b      	ldrb	r3, [r7, #1]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003166:	887a      	ldrh	r2, [r7, #2]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800316c:	e003      	b.n	8003176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800316e:	887b      	ldrh	r3, [r7, #2]
 8003170:	041a      	lsls	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800318a:	4b08      	ldr	r3, [pc, #32]	@ (80031ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d006      	beq.n	80031a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003196:	4a05      	ldr	r2, [pc, #20]	@ (80031ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f806 	bl	80031b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40010400 	.word	0x40010400

080031b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e272      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8087 	beq.w	80032f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031e4:	4b92      	ldr	r3, [pc, #584]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d00c      	beq.n	800320a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d112      	bne.n	8003222 <HAL_RCC_OscConfig+0x5e>
 80031fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003208:	d10b      	bne.n	8003222 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320a:	4b89      	ldr	r3, [pc, #548]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d06c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x12c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d168      	bne.n	80032f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e24c      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x76>
 800322c:	4b80      	ldr	r3, [pc, #512]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a7f      	ldr	r2, [pc, #508]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	e02e      	b.n	8003298 <HAL_RCC_OscConfig+0xd4>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x98>
 8003242:	4b7b      	ldr	r3, [pc, #492]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a7a      	ldr	r2, [pc, #488]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b78      	ldr	r3, [pc, #480]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a77      	ldr	r2, [pc, #476]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003254:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e01d      	b.n	8003298 <HAL_RCC_OscConfig+0xd4>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0xbc>
 8003266:	4b72      	ldr	r3, [pc, #456]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a71      	ldr	r2, [pc, #452]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 800326c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b6f      	ldr	r3, [pc, #444]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a6e      	ldr	r2, [pc, #440]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e00b      	b.n	8003298 <HAL_RCC_OscConfig+0xd4>
 8003280:	4b6b      	ldr	r3, [pc, #428]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6a      	ldr	r2, [pc, #424]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b68      	ldr	r3, [pc, #416]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a67      	ldr	r2, [pc, #412]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003296:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d013      	beq.n	80032c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7ff f88e 	bl	80023c0 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a8:	f7ff f88a 	bl	80023c0 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	@ 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e200      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0xe4>
 80032c6:	e014      	b.n	80032f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7ff f87a 	bl	80023c0 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d0:	f7ff f876 	bl	80023c0 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	@ 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1ec      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e2:	4b53      	ldr	r3, [pc, #332]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x10c>
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d063      	beq.n	80033c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800330a:	4b49      	ldr	r3, [pc, #292]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b08      	cmp	r3, #8
 8003314:	d11c      	bne.n	8003350 <HAL_RCC_OscConfig+0x18c>
 8003316:	4b46      	ldr	r3, [pc, #280]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d116      	bne.n	8003350 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	4b43      	ldr	r3, [pc, #268]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_RCC_OscConfig+0x176>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d001      	beq.n	800333a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e1c0      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333a:	4b3d      	ldr	r3, [pc, #244]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4939      	ldr	r1, [pc, #228]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334e:	e03a      	b.n	80033c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003358:	4b36      	ldr	r3, [pc, #216]	@ (8003434 <HAL_RCC_OscConfig+0x270>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7ff f82f 	bl	80023c0 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003366:	f7ff f82b 	bl	80023c0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1a1      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003378:	4b2d      	ldr	r3, [pc, #180]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003384:	4b2a      	ldr	r3, [pc, #168]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4927      	ldr	r1, [pc, #156]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]
 8003398:	e015      	b.n	80033c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800339a:	4b26      	ldr	r3, [pc, #152]	@ (8003434 <HAL_RCC_OscConfig+0x270>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7ff f80e 	bl	80023c0 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a8:	f7ff f80a 	bl	80023c0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e180      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d03a      	beq.n	8003448 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d019      	beq.n	800340e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033da:	4b17      	ldr	r3, [pc, #92]	@ (8003438 <HAL_RCC_OscConfig+0x274>)
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7fe ffee 	bl	80023c0 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e8:	f7fe ffea 	bl	80023c0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e160      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003430 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003406:	2001      	movs	r0, #1
 8003408:	f000 face 	bl	80039a8 <RCC_Delay>
 800340c:	e01c      	b.n	8003448 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340e:	4b0a      	ldr	r3, [pc, #40]	@ (8003438 <HAL_RCC_OscConfig+0x274>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003414:	f7fe ffd4 	bl	80023c0 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341a:	e00f      	b.n	800343c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341c:	f7fe ffd0 	bl	80023c0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d908      	bls.n	800343c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e146      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	42420000 	.word	0x42420000
 8003438:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343c:	4b92      	ldr	r3, [pc, #584]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e9      	bne.n	800341c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80a6 	beq.w	80035a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003456:	2300      	movs	r3, #0
 8003458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345a:	4b8b      	ldr	r3, [pc, #556]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	4b88      	ldr	r3, [pc, #544]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4a87      	ldr	r2, [pc, #540]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003470:	61d3      	str	r3, [r2, #28]
 8003472:	4b85      	ldr	r3, [pc, #532]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	4b82      	ldr	r3, [pc, #520]	@ (800368c <HAL_RCC_OscConfig+0x4c8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d118      	bne.n	80034c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348e:	4b7f      	ldr	r3, [pc, #508]	@ (800368c <HAL_RCC_OscConfig+0x4c8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a7e      	ldr	r2, [pc, #504]	@ (800368c <HAL_RCC_OscConfig+0x4c8>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349a:	f7fe ff91 	bl	80023c0 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a2:	f7fe ff8d 	bl	80023c0 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b64      	cmp	r3, #100	@ 0x64
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e103      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	4b75      	ldr	r3, [pc, #468]	@ (800368c <HAL_RCC_OscConfig+0x4c8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x312>
 80034c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6213      	str	r3, [r2, #32]
 80034d4:	e02d      	b.n	8003532 <HAL_RCC_OscConfig+0x36e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x334>
 80034de:	4b6a      	ldr	r3, [pc, #424]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4a69      	ldr	r2, [pc, #420]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6213      	str	r3, [r2, #32]
 80034ea:	4b67      	ldr	r3, [pc, #412]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	4a66      	ldr	r2, [pc, #408]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	f023 0304 	bic.w	r3, r3, #4
 80034f4:	6213      	str	r3, [r2, #32]
 80034f6:	e01c      	b.n	8003532 <HAL_RCC_OscConfig+0x36e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d10c      	bne.n	800351a <HAL_RCC_OscConfig+0x356>
 8003500:	4b61      	ldr	r3, [pc, #388]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4a60      	ldr	r2, [pc, #384]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	f043 0304 	orr.w	r3, r3, #4
 800350a:	6213      	str	r3, [r2, #32]
 800350c:	4b5e      	ldr	r3, [pc, #376]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4a5d      	ldr	r2, [pc, #372]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6213      	str	r3, [r2, #32]
 8003518:	e00b      	b.n	8003532 <HAL_RCC_OscConfig+0x36e>
 800351a:	4b5b      	ldr	r3, [pc, #364]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4a5a      	ldr	r2, [pc, #360]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	6213      	str	r3, [r2, #32]
 8003526:	4b58      	ldr	r3, [pc, #352]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	4a57      	ldr	r2, [pc, #348]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	f023 0304 	bic.w	r3, r3, #4
 8003530:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d015      	beq.n	8003566 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353a:	f7fe ff41 	bl	80023c0 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fe ff3d 	bl	80023c0 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003550:	4293      	cmp	r3, r2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0b1      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	4b4b      	ldr	r3, [pc, #300]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ee      	beq.n	8003542 <HAL_RCC_OscConfig+0x37e>
 8003564:	e014      	b.n	8003590 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003566:	f7fe ff2b 	bl	80023c0 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fe ff27 	bl	80023c0 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e09b      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003584:	4b40      	ldr	r3, [pc, #256]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ee      	bne.n	800356e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d105      	bne.n	80035a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003596:	4b3c      	ldr	r3, [pc, #240]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	4a3b      	ldr	r2, [pc, #236]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8087 	beq.w	80036ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ac:	4b36      	ldr	r3, [pc, #216]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d061      	beq.n	800367c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d146      	bne.n	800364e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c0:	4b33      	ldr	r3, [pc, #204]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7fe fefb 	bl	80023c0 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fe fef7 	bl	80023c0 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e06d      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e0:	4b29      	ldr	r3, [pc, #164]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f0      	bne.n	80035ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f4:	d108      	bne.n	8003608 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035f6:	4b24      	ldr	r3, [pc, #144]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4921      	ldr	r1, [pc, #132]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003608:	4b1f      	ldr	r3, [pc, #124]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a19      	ldr	r1, [r3, #32]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	430b      	orrs	r3, r1
 800361a:	491b      	ldr	r1, [pc, #108]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003620:	4b1b      	ldr	r3, [pc, #108]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fe fecb 	bl	80023c0 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362e:	f7fe fec7 	bl	80023c0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e03d      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003640:	4b11      	ldr	r3, [pc, #68]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x46a>
 800364c:	e035      	b.n	80036ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b10      	ldr	r3, [pc, #64]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe feb4 	bl	80023c0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe feb0 	bl	80023c0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e026      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366e:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x498>
 800367a:	e01e      	b.n	80036ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d107      	bne.n	8003694 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e019      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
 8003690:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003694:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <HAL_RCC_OscConfig+0x500>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000

080036c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0d0      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d910      	bls.n	800370c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b67      	ldr	r3, [pc, #412]	@ (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 0207 	bic.w	r2, r3, #7
 80036f2:	4965      	ldr	r1, [pc, #404]	@ (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b63      	ldr	r3, [pc, #396]	@ (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b8      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003724:	4b59      	ldr	r3, [pc, #356]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a58      	ldr	r2, [pc, #352]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800372e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800373c:	4b53      	ldr	r3, [pc, #332]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4a52      	ldr	r2, [pc, #328]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003746:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b50      	ldr	r3, [pc, #320]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	494d      	ldr	r1, [pc, #308]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d040      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b47      	ldr	r3, [pc, #284]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d115      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07f      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003786:	4b41      	ldr	r3, [pc, #260]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e073      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003796:	4b3d      	ldr	r3, [pc, #244]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e06b      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037a6:	4b39      	ldr	r3, [pc, #228]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f023 0203 	bic.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4936      	ldr	r1, [pc, #216]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b8:	f7fe fe02 	bl	80023c0 <HAL_GetTick>
 80037bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c0:	f7fe fdfe 	bl	80023c0 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e053      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	4b2d      	ldr	r3, [pc, #180]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 020c 	and.w	r2, r3, #12
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d1eb      	bne.n	80037c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e8:	4b27      	ldr	r3, [pc, #156]	@ (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d210      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b24      	ldr	r3, [pc, #144]	@ (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 0207 	bic.w	r2, r3, #7
 80037fe:	4922      	ldr	r1, [pc, #136]	@ (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b20      	ldr	r3, [pc, #128]	@ (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e032      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003824:	4b19      	ldr	r3, [pc, #100]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4916      	ldr	r1, [pc, #88]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003842:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	490e      	ldr	r1, [pc, #56]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	4313      	orrs	r3, r2
 8003854:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003856:	f000 f821 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800385a:	4602      	mov	r2, r0
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	490a      	ldr	r1, [pc, #40]	@ (8003890 <HAL_RCC_ClockConfig+0x1c8>)
 8003868:	5ccb      	ldrb	r3, [r1, r3]
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a09      	ldr	r2, [pc, #36]	@ (8003894 <HAL_RCC_ClockConfig+0x1cc>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003872:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <HAL_RCC_ClockConfig+0x1d0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fd60 	bl	800233c <HAL_InitTick>

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40022000 	.word	0x40022000
 800388c:	40021000 	.word	0x40021000
 8003890:	08009a38 	.word	0x08009a38
 8003894:	20000000 	.word	0x20000000
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	2300      	movs	r3, #0
 80038b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x94>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d002      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x30>
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_GetSysClockFreq+0x36>
 80038ca:	e027      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038cc:	4b19      	ldr	r3, [pc, #100]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ce:	613b      	str	r3, [r7, #16]
      break;
 80038d0:	e027      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	0c9b      	lsrs	r3, r3, #18
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	4a17      	ldr	r2, [pc, #92]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038dc:	5cd3      	ldrb	r3, [r2, r3]
 80038de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d010      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ea:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x94>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	0c5b      	lsrs	r3, r3, #17
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	4a11      	ldr	r2, [pc, #68]	@ (800393c <HAL_RCC_GetSysClockFreq+0xa0>)
 80038f6:	5cd3      	ldrb	r3, [r2, r3]
 80038f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x98>)
 80038fe:	fb03 f202 	mul.w	r2, r3, r2
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	fbb2 f3f3 	udiv	r3, r2, r3
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e004      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a0c      	ldr	r2, [pc, #48]	@ (8003940 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003910:	fb02 f303 	mul.w	r3, r2, r3
 8003914:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	613b      	str	r3, [r7, #16]
      break;
 800391a:	e002      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x98>)
 800391e:	613b      	str	r3, [r7, #16]
      break;
 8003920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003922:	693b      	ldr	r3, [r7, #16]
}
 8003924:	4618      	mov	r0, r3
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	007a1200 	.word	0x007a1200
 8003938:	08009a50 	.word	0x08009a50
 800393c:	08009a60 	.word	0x08009a60
 8003940:	003d0900 	.word	0x003d0900

08003944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003948:	4b02      	ldr	r3, [pc, #8]	@ (8003954 <HAL_RCC_GetHCLKFreq+0x10>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	20000000 	.word	0x20000000

08003958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800395c:	f7ff fff2 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	@ (800397c <HAL_RCC_GetPCLK1Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000
 800397c:	08009a48 	.word	0x08009a48

08003980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003984:	f7ff ffde 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003988:	4602      	mov	r2, r0
 800398a:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	0adb      	lsrs	r3, r3, #11
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	4903      	ldr	r1, [pc, #12]	@ (80039a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003996:	5ccb      	ldrb	r3, [r1, r3]
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000
 80039a4:	08009a48 	.word	0x08009a48

080039a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039b0:	4b0a      	ldr	r3, [pc, #40]	@ (80039dc <RCC_Delay+0x34>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0a      	ldr	r2, [pc, #40]	@ (80039e0 <RCC_Delay+0x38>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	0a5b      	lsrs	r3, r3, #9
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039c4:	bf00      	nop
  }
  while (Delay --);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1e5a      	subs	r2, r3, #1
 80039ca:	60fa      	str	r2, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f9      	bne.n	80039c4 <RCC_Delay+0x1c>
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	20000000 	.word	0x20000000
 80039e0:	10624dd3 	.word	0x10624dd3

080039e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d07d      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a00:	2300      	movs	r3, #0
 8003a02:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a04:	4b4f      	ldr	r3, [pc, #316]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10d      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a10:	4b4c      	ldr	r3, [pc, #304]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4a4b      	ldr	r2, [pc, #300]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	61d3      	str	r3, [r2, #28]
 8003a1c:	4b49      	ldr	r3, [pc, #292]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	4b46      	ldr	r3, [pc, #280]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d118      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a38:	4b43      	ldr	r3, [pc, #268]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a42      	ldr	r2, [pc, #264]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a44:	f7fe fcbc 	bl	80023c0 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4a:	e008      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4c:	f7fe fcb8 	bl	80023c0 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	@ 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e06d      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a6a:	4b36      	ldr	r3, [pc, #216]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d02e      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d027      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a88:	4b2e      	ldr	r3, [pc, #184]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a92:	4b2e      	ldr	r3, [pc, #184]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a98:	4b2c      	ldr	r3, [pc, #176]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a9e:	4a29      	ldr	r2, [pc, #164]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d014      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aae:	f7fe fc87 	bl	80023c0 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab4:	e00a      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab6:	f7fe fc83 	bl	80023c0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e036      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003acc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0ee      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4917      	ldr	r1, [pc, #92]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af0:	4b14      	ldr	r3, [pc, #80]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	4a13      	ldr	r2, [pc, #76]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b08:	4b0e      	ldr	r3, [pc, #56]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	490b      	ldr	r1, [pc, #44]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b26:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	4904      	ldr	r1, [pc, #16]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40007000 	.word	0x40007000
 8003b4c:	42420440 	.word	0x42420440

08003b50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	2300      	movs	r3, #0
 8003b62:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	f200 808a 	bhi.w	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d045      	beq.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d075      	beq.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b86:	e082      	b.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003b88:	4b46      	ldr	r3, [pc, #280]	@ (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b8e:	4b45      	ldr	r3, [pc, #276]	@ (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d07b      	beq.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	0c9b      	lsrs	r3, r3, #18
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	4a41      	ldr	r2, [pc, #260]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003ba4:	5cd3      	ldrb	r3, [r2, r3]
 8003ba6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d015      	beq.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	0c5b      	lsrs	r3, r3, #17
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	4a3b      	ldr	r2, [pc, #236]	@ (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003bbe:	5cd3      	ldrb	r3, [r2, r3]
 8003bc0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00d      	beq.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bcc:	4a38      	ldr	r2, [pc, #224]	@ (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	e004      	b.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4a34      	ldr	r2, [pc, #208]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003be8:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	61bb      	str	r3, [r7, #24]
      break;
 8003bfa:	e04a      	b.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	61bb      	str	r3, [r7, #24]
      break;
 8003c0a:	e042      	b.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003c0c:	4b25      	ldr	r3, [pc, #148]	@ (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c1c:	d108      	bne.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003c28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	e01f      	b.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c3a:	d109      	bne.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003c48:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	e00f      	b.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c5a:	d11c      	bne.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d016      	beq.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003c68:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003c6c:	61bb      	str	r3, [r7, #24]
      break;
 8003c6e:	e012      	b.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c70:	e011      	b.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c72:	f7ff fe85 	bl	8003980 <HAL_RCC_GetPCLK2Freq>
 8003c76:	4602      	mov	r2, r0
 8003c78:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	0b9b      	lsrs	r3, r3, #14
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	3301      	adds	r3, #1
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	61bb      	str	r3, [r7, #24]
      break;
 8003c8c:	e004      	b.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e002      	b.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c92:	bf00      	nop
 8003c94:	e000      	b.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c96:	bf00      	nop
    }
  }
  return (frequency);
 8003c98:	69bb      	ldr	r3, [r7, #24]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	08009a64 	.word	0x08009a64
 8003cac:	08009a74 	.word	0x08009a74
 8003cb0:	007a1200 	.word	0x007a1200
 8003cb4:	003d0900 	.word	0x003d0900
 8003cb8:	aaaaaaab 	.word	0xaaaaaaab

08003cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e042      	b.n	8003d54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fe f944 	bl	8001f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2224      	movs	r2, #36	@ 0x24
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f9af 	bl	8004064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	@ 0x28
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d16d      	bne.n	8003e58 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_UART_Transmit+0x2c>
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e066      	b.n	8003e5a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2221      	movs	r2, #33	@ 0x21
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d9a:	f7fe fb11 	bl	80023c0 <HAL_GetTick>
 8003d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	88fa      	ldrh	r2, [r7, #6]
 8003da4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	88fa      	ldrh	r2, [r7, #6]
 8003daa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db4:	d108      	bne.n	8003dc8 <HAL_UART_Transmit+0x6c>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d104      	bne.n	8003dc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	e003      	b.n	8003dd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dd0:	e02a      	b.n	8003e28 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2180      	movs	r1, #128	@ 0x80
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f8d2 	bl	8003f86 <UART_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e036      	b.n	8003e5a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	3302      	adds	r3, #2
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e007      	b.n	8003e1a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1cf      	bne.n	8003dd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2140      	movs	r1, #64	@ 0x40
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f8a2 	bl	8003f86 <UART_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e006      	b.n	8003e5a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e000      	b.n	8003e5a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b08a      	sub	sp, #40	@ 0x28
 8003e66:	af02      	add	r7, sp, #8
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	603b      	str	r3, [r7, #0]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d17c      	bne.n	8003f7c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_UART_Receive+0x2c>
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e075      	b.n	8003f7e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2222      	movs	r2, #34	@ 0x22
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ea6:	f7fe fa8b 	bl	80023c0 <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	88fa      	ldrh	r2, [r7, #6]
 8003eb6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec0:	d108      	bne.n	8003ed4 <HAL_UART_Receive+0x72>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e003      	b.n	8003edc <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003edc:	e043      	b.n	8003f66 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2120      	movs	r1, #32
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f84c 	bl	8003f86 <UART_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e042      	b.n	8003f7e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10c      	bne.n	8003f18 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	3302      	adds	r3, #2
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	e01f      	b.n	8003f58 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f20:	d007      	beq.n	8003f32 <HAL_UART_Receive+0xd0>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <HAL_UART_Receive+0xde>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	e008      	b.n	8003f52 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3301      	adds	r3, #1
 8003f56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1b6      	bne.n	8003ede <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e000      	b.n	8003f7e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
  }
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b090      	sub	sp, #64	@ 0x40
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f96:	e050      	b.n	800403a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f9e:	d04c      	beq.n	800403a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d007      	beq.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa6:	f7fe fa0b 	bl	80023c0 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d241      	bcs.n	800403a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	330c      	adds	r3, #12
 8003fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fd6:	637a      	str	r2, [r7, #52]	@ 0x34
 8003fd8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e5      	bne.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3314      	adds	r3, #20
 8003ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3314      	adds	r3, #20
 8004008:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800400a:	623a      	str	r2, [r7, #32]
 800400c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	69f9      	ldr	r1, [r7, #28]
 8004010:	6a3a      	ldr	r2, [r7, #32]
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	61bb      	str	r3, [r7, #24]
   return(result);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e5      	bne.n	8003fea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e00f      	b.n	800405a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	429a      	cmp	r2, r3
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	429a      	cmp	r2, r3
 8004056:	d09f      	beq.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3740      	adds	r7, #64	@ 0x40
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800409e:	f023 030c 	bic.w	r3, r3, #12
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	430b      	orrs	r3, r1
 80040aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004178 <UART_SetConfig+0x114>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d103      	bne.n	80040d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040cc:	f7ff fc58 	bl	8003980 <HAL_RCC_GetPCLK2Freq>
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	e002      	b.n	80040da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7ff fc40 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 80040d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009a      	lsls	r2, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	4a22      	ldr	r2, [pc, #136]	@ (800417c <UART_SetConfig+0x118>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	0119      	lsls	r1, r3, #4
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009a      	lsls	r2, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004110:	4b1a      	ldr	r3, [pc, #104]	@ (800417c <UART_SetConfig+0x118>)
 8004112:	fba3 0302 	umull	r0, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2064      	movs	r0, #100	@ 0x64
 800411a:	fb00 f303 	mul.w	r3, r0, r3
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	3332      	adds	r3, #50	@ 0x32
 8004124:	4a15      	ldr	r2, [pc, #84]	@ (800417c <UART_SetConfig+0x118>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004130:	4419      	add	r1, r3
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fbb2 f2f3 	udiv	r2, r2, r3
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <UART_SetConfig+0x118>)
 800414a:	fba3 0302 	umull	r0, r3, r3, r2
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2064      	movs	r0, #100	@ 0x64
 8004152:	fb00 f303 	mul.w	r3, r0, r3
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	3332      	adds	r3, #50	@ 0x32
 800415c:	4a07      	ldr	r2, [pc, #28]	@ (800417c <UART_SetConfig+0x118>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	440a      	add	r2, r1
 800416e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40013800 	.word	0x40013800
 800417c:	51eb851f 	.word	0x51eb851f

08004180 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004186:	f3ef 8305 	mrs	r3, IPSR
 800418a:	60bb      	str	r3, [r7, #8]
  return(result);
 800418c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004192:	f3ef 8310 	mrs	r3, PRIMASK
 8004196:	607b      	str	r3, [r7, #4]
  return(result);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <osKernelInitialize+0x32>
 800419e:	4b10      	ldr	r3, [pc, #64]	@ (80041e0 <osKernelInitialize+0x60>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d109      	bne.n	80041ba <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041a6:	f3ef 8311 	mrs	r3, BASEPRI
 80041aa:	603b      	str	r3, [r7, #0]
  return(result);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80041b2:	f06f 0305 	mvn.w	r3, #5
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e00c      	b.n	80041d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041ba:	4b09      	ldr	r3, [pc, #36]	@ (80041e0 <osKernelInitialize+0x60>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d105      	bne.n	80041ce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80041c2:	4b07      	ldr	r3, [pc, #28]	@ (80041e0 <osKernelInitialize+0x60>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e002      	b.n	80041d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041d4:	68fb      	ldr	r3, [r7, #12]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	20000af8 	.word	0x20000af8

080041e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ea:	f3ef 8305 	mrs	r3, IPSR
 80041ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80041f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10f      	bne.n	8004216 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f6:	f3ef 8310 	mrs	r3, PRIMASK
 80041fa:	607b      	str	r3, [r7, #4]
  return(result);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <osKernelStart+0x32>
 8004202:	4b11      	ldr	r3, [pc, #68]	@ (8004248 <osKernelStart+0x64>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d109      	bne.n	800421e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800420a:	f3ef 8311 	mrs	r3, BASEPRI
 800420e:	603b      	str	r3, [r7, #0]
  return(result);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004216:	f06f 0305 	mvn.w	r3, #5
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e00e      	b.n	800423c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800421e:	4b0a      	ldr	r3, [pc, #40]	@ (8004248 <osKernelStart+0x64>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d107      	bne.n	8004236 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004226:	4b08      	ldr	r3, [pc, #32]	@ (8004248 <osKernelStart+0x64>)
 8004228:	2202      	movs	r2, #2
 800422a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800422c:	f001 f8a8 	bl	8005380 <vTaskStartScheduler>
      stat = osOK;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e002      	b.n	800423c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800423a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800423c:	68fb      	ldr	r3, [r7, #12]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000af8 	.word	0x20000af8

0800424c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b092      	sub	sp, #72	@ 0x48
 8004250:	af04      	add	r7, sp, #16
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800425c:	f3ef 8305 	mrs	r3, IPSR
 8004260:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004264:	2b00      	cmp	r3, #0
 8004266:	f040 8094 	bne.w	8004392 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800426a:	f3ef 8310 	mrs	r3, PRIMASK
 800426e:	623b      	str	r3, [r7, #32]
  return(result);
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 808d 	bne.w	8004392 <osThreadNew+0x146>
 8004278:	4b48      	ldr	r3, [pc, #288]	@ (800439c <osThreadNew+0x150>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d106      	bne.n	800428e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004280:	f3ef 8311 	mrs	r3, BASEPRI
 8004284:	61fb      	str	r3, [r7, #28]
  return(result);
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f040 8082 	bne.w	8004392 <osThreadNew+0x146>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d07e      	beq.n	8004392 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004294:	2380      	movs	r3, #128	@ 0x80
 8004296:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004298:	2318      	movs	r3, #24
 800429a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800429c:	2300      	movs	r3, #0
 800429e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80042a0:	f107 031b 	add.w	r3, r7, #27
 80042a4:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042aa:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d045      	beq.n	800433e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <osThreadNew+0x74>
        name = attr->name;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <osThreadNew+0x9a>
 80042d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d6:	2b38      	cmp	r3, #56	@ 0x38
 80042d8:	d805      	bhi.n	80042e6 <osThreadNew+0x9a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <osThreadNew+0x9e>
        return (NULL);
 80042e6:	2300      	movs	r3, #0
 80042e8:	e054      	b.n	8004394 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	089b      	lsrs	r3, r3, #2
 80042f8:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00e      	beq.n	8004320 <osThreadNew+0xd4>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2ba7      	cmp	r3, #167	@ 0xa7
 8004308:	d90a      	bls.n	8004320 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <osThreadNew+0xd4>
        mem = 1;
 800431a:	2301      	movs	r3, #1
 800431c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800431e:	e010      	b.n	8004342 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10c      	bne.n	8004342 <osThreadNew+0xf6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d108      	bne.n	8004342 <osThreadNew+0xf6>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d104      	bne.n	8004342 <osThreadNew+0xf6>
          mem = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800433c:	e001      	b.n	8004342 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8004342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004344:	2b01      	cmp	r3, #1
 8004346:	d110      	bne.n	800436a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004350:	9202      	str	r2, [sp, #8]
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800435c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fe24 	bl	8004fac <xTaskCreateStatic>
 8004364:	4603      	mov	r3, r0
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e013      	b.n	8004392 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800436a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	d110      	bne.n	8004392 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004372:	b29a      	uxth	r2, r3
 8004374:	f107 0314 	add.w	r3, r7, #20
 8004378:	9301      	str	r3, [sp, #4]
 800437a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fe71 	bl	800506a <xTaskCreate>
 8004388:	4603      	mov	r3, r0
 800438a:	2b01      	cmp	r3, #1
 800438c:	d001      	beq.n	8004392 <osThreadNew+0x146>
          hTask = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004392:	697b      	ldr	r3, [r7, #20]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3738      	adds	r7, #56	@ 0x38
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000af8 	.word	0x20000af8

080043a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043a8:	f3ef 8305 	mrs	r3, IPSR
 80043ac:	613b      	str	r3, [r7, #16]
  return(result);
 80043ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10f      	bne.n	80043d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b4:	f3ef 8310 	mrs	r3, PRIMASK
 80043b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d109      	bne.n	80043d4 <osDelay+0x34>
 80043c0:	4b0d      	ldr	r3, [pc, #52]	@ (80043f8 <osDelay+0x58>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d109      	bne.n	80043dc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043c8:	f3ef 8311 	mrs	r3, BASEPRI
 80043cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <osDelay+0x3c>
    stat = osErrorISR;
 80043d4:	f06f 0305 	mvn.w	r3, #5
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	e007      	b.n	80043ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 ff94 	bl	8005314 <vTaskDelay>
    }
  }

  return (stat);
 80043ec:	697b      	ldr	r3, [r7, #20]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000af8 	.word	0x20000af8

080043fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4a06      	ldr	r2, [pc, #24]	@ (8004424 <vApplicationGetIdleTaskMemory+0x28>)
 800440c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4a05      	ldr	r2, [pc, #20]	@ (8004428 <vApplicationGetIdleTaskMemory+0x2c>)
 8004412:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2280      	movs	r2, #128	@ 0x80
 8004418:	601a      	str	r2, [r3, #0]
}
 800441a:	bf00      	nop
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	20000afc 	.word	0x20000afc
 8004428:	20000ba4 	.word	0x20000ba4

0800442c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a07      	ldr	r2, [pc, #28]	@ (8004458 <vApplicationGetTimerTaskMemory+0x2c>)
 800443c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4a06      	ldr	r2, [pc, #24]	@ (800445c <vApplicationGetTimerTaskMemory+0x30>)
 8004442:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800444a:	601a      	str	r2, [r3, #0]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000da4 	.word	0x20000da4
 800445c:	20000e4c 	.word	0x20000e4c

08004460 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f103 0208 	add.w	r2, r3, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004478:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f103 0208 	add.w	r2, r3, #8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f103 0208 	add.w	r2, r3, #8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr

0800449e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	601a      	str	r2, [r3, #0]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004512:	d103      	bne.n	800451c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	e00c      	b.n	8004536 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3308      	adds	r3, #8
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	e002      	b.n	800452a <vListInsert+0x2e>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	d2f6      	bcs.n	8004524 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	601a      	str	r2, [r3, #0]
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6892      	ldr	r2, [r2, #8]
 8004582:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6852      	ldr	r2, [r2, #4]
 800458c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	429a      	cmp	r2, r3
 8004596:	d103      	bne.n	80045a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	1e5a      	subs	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
	...

080045c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80045ec:	f002 f826 	bl	800663c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f8:	68f9      	ldr	r1, [r7, #12]
 80045fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	441a      	add	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461c:	3b01      	subs	r3, #1
 800461e:	68f9      	ldr	r1, [r7, #12]
 8004620:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	441a      	add	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	22ff      	movs	r2, #255	@ 0xff
 8004630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	22ff      	movs	r2, #255	@ 0xff
 8004638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d114      	bne.n	800466c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01a      	beq.n	8004680 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3310      	adds	r3, #16
 800464e:	4618      	mov	r0, r3
 8004650:	f001 f936 	bl	80058c0 <xTaskRemoveFromEventList>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d012      	beq.n	8004680 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800465a:	4b0d      	ldr	r3, [pc, #52]	@ (8004690 <xQueueGenericReset+0xd0>)
 800465c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	e009      	b.n	8004680 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3310      	adds	r3, #16
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fef5 	bl	8004460 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3324      	adds	r3, #36	@ 0x24
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff fef0 	bl	8004460 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004680:	f002 f80c 	bl	800669c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004684:	2301      	movs	r3, #1
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	e000ed04 	.word	0xe000ed04

08004694 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08e      	sub	sp, #56	@ 0x38
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	e7fd      	b.n	80046bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	e7fd      	b.n	80046da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <xQueueGenericCreateStatic+0x56>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <xQueueGenericCreateStatic+0x5a>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <xQueueGenericCreateStatic+0x5c>
 80046ee:	2300      	movs	r3, #0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	623b      	str	r3, [r7, #32]
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <xQueueGenericCreateStatic+0x84>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <xQueueGenericCreateStatic+0x88>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <xQueueGenericCreateStatic+0x8a>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	61fb      	str	r3, [r7, #28]
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	e7fd      	b.n	8004736 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800473a:	2350      	movs	r3, #80	@ 0x50
 800473c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b50      	cmp	r3, #80	@ 0x50
 8004742:	d00b      	beq.n	800475c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	61bb      	str	r3, [r7, #24]
}
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800476e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	4613      	mov	r3, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f805 	bl	800478c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004784:	4618      	mov	r0, r3
 8004786:	3730      	adds	r7, #48	@ 0x30
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d103      	bne.n	80047a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	e002      	b.n	80047ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047ba:	2101      	movs	r1, #1
 80047bc:	69b8      	ldr	r0, [r7, #24]
 80047be:	f7ff feff 	bl	80045c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08e      	sub	sp, #56	@ 0x38
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047e2:	2300      	movs	r3, #0
 80047e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80047ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <xQueueGenericSend+0x34>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d103      	bne.n	8004816 <xQueueGenericSend+0x42>
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <xQueueGenericSend+0x46>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <xQueueGenericSend+0x48>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10b      	bne.n	8004838 <xQueueGenericSend+0x64>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004832:	bf00      	nop
 8004834:	bf00      	nop
 8004836:	e7fd      	b.n	8004834 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d103      	bne.n	8004846 <xQueueGenericSend+0x72>
 800483e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <xQueueGenericSend+0x76>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <xQueueGenericSend+0x78>
 800484a:	2300      	movs	r3, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10b      	bne.n	8004868 <xQueueGenericSend+0x94>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	623b      	str	r3, [r7, #32]
}
 8004862:	bf00      	nop
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004868:	f001 f9f4 	bl	8005c54 <xTaskGetSchedulerState>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <xQueueGenericSend+0xa4>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <xQueueGenericSend+0xa8>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <xQueueGenericSend+0xaa>
 800487c:	2300      	movs	r3, #0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10b      	bne.n	800489a <xQueueGenericSend+0xc6>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	61fb      	str	r3, [r7, #28]
}
 8004894:	bf00      	nop
 8004896:	bf00      	nop
 8004898:	e7fd      	b.n	8004896 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800489a:	f001 fecf 	bl	800663c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d302      	bcc.n	80048b0 <xQueueGenericSend+0xdc>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d129      	bne.n	8004904 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048b6:	f000 fa0d 	bl	8004cd4 <prvCopyDataToQueue>
 80048ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d010      	beq.n	80048e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c6:	3324      	adds	r3, #36	@ 0x24
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fff9 	bl	80058c0 <xTaskRemoveFromEventList>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048d4:	4b3f      	ldr	r3, [pc, #252]	@ (80049d4 <xQueueGenericSend+0x200>)
 80048d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	e00a      	b.n	80048fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048ec:	4b39      	ldr	r3, [pc, #228]	@ (80049d4 <xQueueGenericSend+0x200>)
 80048ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048fc:	f001 fece 	bl	800669c <vPortExitCritical>
				return pdPASS;
 8004900:	2301      	movs	r3, #1
 8004902:	e063      	b.n	80049cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800490a:	f001 fec7 	bl	800669c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800490e:	2300      	movs	r3, #0
 8004910:	e05c      	b.n	80049cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004918:	f107 0314 	add.w	r3, r7, #20
 800491c:	4618      	mov	r0, r3
 800491e:	f001 f833 	bl	8005988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004922:	2301      	movs	r3, #1
 8004924:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004926:	f001 feb9 	bl	800669c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800492a:	f000 fd99 	bl	8005460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800492e:	f001 fe85 	bl	800663c <vPortEnterCritical>
 8004932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004934:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004938:	b25b      	sxtb	r3, r3
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800493e:	d103      	bne.n	8004948 <xQueueGenericSend+0x174>
 8004940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800494e:	b25b      	sxtb	r3, r3
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004954:	d103      	bne.n	800495e <xQueueGenericSend+0x18a>
 8004956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800495e:	f001 fe9d 	bl	800669c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004962:	1d3a      	adds	r2, r7, #4
 8004964:	f107 0314 	add.w	r3, r7, #20
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f001 f822 	bl	80059b4 <xTaskCheckForTimeOut>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d124      	bne.n	80049c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004976:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004978:	f000 faa4 	bl	8004ec4 <prvIsQueueFull>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d018      	beq.n	80049b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004984:	3310      	adds	r3, #16
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f000 ff46 	bl	800581c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004990:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004992:	f000 fa2f 	bl	8004df4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004996:	f000 fd71 	bl	800547c <xTaskResumeAll>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	f47f af7c 	bne.w	800489a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80049a2:	4b0c      	ldr	r3, [pc, #48]	@ (80049d4 <xQueueGenericSend+0x200>)
 80049a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	e772      	b.n	800489a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049b6:	f000 fa1d 	bl	8004df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049ba:	f000 fd5f 	bl	800547c <xTaskResumeAll>
 80049be:	e76c      	b.n	800489a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049c2:	f000 fa17 	bl	8004df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049c6:	f000 fd59 	bl	800547c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049ca:	2300      	movs	r3, #0
		}
	}
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3738      	adds	r7, #56	@ 0x38
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	e000ed04 	.word	0xe000ed04

080049d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08e      	sub	sp, #56	@ 0x38
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	e7fd      	b.n	8004a04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <xQueueGenericSendFromISR+0x3e>
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <xQueueGenericSendFromISR+0x42>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <xQueueGenericSendFromISR+0x44>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	623b      	str	r3, [r7, #32]
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d103      	bne.n	8004a46 <xQueueGenericSendFromISR+0x6e>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <xQueueGenericSendFromISR+0x72>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <xQueueGenericSendFromISR+0x74>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	61fb      	str	r3, [r7, #28]
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	e7fd      	b.n	8004a64 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a68:	f001 feaa 	bl	80067c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a6c:	f3ef 8211 	mrs	r2, BASEPRI
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61ba      	str	r2, [r7, #24]
 8004a82:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a84:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d302      	bcc.n	8004a9a <xQueueGenericSendFromISR+0xc2>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d12c      	bne.n	8004af4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004aa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aaa:	f000 f913 	bl	8004cd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004aae:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ab6:	d112      	bne.n	8004ade <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d016      	beq.n	8004aee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac2:	3324      	adds	r3, #36	@ 0x24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fefb 	bl	80058c0 <xTaskRemoveFromEventList>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00e      	beq.n	8004aee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e007      	b.n	8004aee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ade:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	b25a      	sxtb	r2, r3
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004aee:	2301      	movs	r3, #1
 8004af0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004af2:	e001      	b.n	8004af8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3738      	adds	r7, #56	@ 0x38
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08c      	sub	sp, #48	@ 0x30
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <xQueueReceive+0x32>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	623b      	str	r3, [r7, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	e7fd      	b.n	8004b3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <xQueueReceive+0x40>
 8004b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <xQueueReceive+0x44>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <xQueueReceive+0x46>
 8004b54:	2300      	movs	r3, #0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <xQueueReceive+0x62>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	61fb      	str	r3, [r7, #28]
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	e7fd      	b.n	8004b6e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b72:	f001 f86f 	bl	8005c54 <xTaskGetSchedulerState>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d102      	bne.n	8004b82 <xQueueReceive+0x72>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <xQueueReceive+0x76>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <xQueueReceive+0x78>
 8004b86:	2300      	movs	r3, #0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10b      	bne.n	8004ba4 <xQueueReceive+0x94>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	61bb      	str	r3, [r7, #24]
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	e7fd      	b.n	8004ba0 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ba4:	f001 fd4a 	bl	800663c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01f      	beq.n	8004bf4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bb8:	f000 f8f6 	bl	8004da8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	1e5a      	subs	r2, r3, #1
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00f      	beq.n	8004bec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bce:	3310      	adds	r3, #16
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fe75 	bl	80058c0 <xTaskRemoveFromEventList>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8004cd0 <xQueueReceive+0x1c0>)
 8004bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bec:	f001 fd56 	bl	800669c <vPortExitCritical>
				return pdPASS;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e069      	b.n	8004cc8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d103      	bne.n	8004c02 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bfa:	f001 fd4f 	bl	800669c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e062      	b.n	8004cc8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c08:	f107 0310 	add.w	r3, r7, #16
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 febb 	bl	8005988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c12:	2301      	movs	r3, #1
 8004c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c16:	f001 fd41 	bl	800669c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c1a:	f000 fc21 	bl	8005460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c1e:	f001 fd0d 	bl	800663c <vPortEnterCritical>
 8004c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c28:	b25b      	sxtb	r3, r3
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c2e:	d103      	bne.n	8004c38 <xQueueReceive+0x128>
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c3e:	b25b      	sxtb	r3, r3
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c44:	d103      	bne.n	8004c4e <xQueueReceive+0x13e>
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c4e:	f001 fd25 	bl	800669c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c52:	1d3a      	adds	r2, r7, #4
 8004c54:	f107 0310 	add.w	r3, r7, #16
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 feaa 	bl	80059b4 <xTaskCheckForTimeOut>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d123      	bne.n	8004cae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c68:	f000 f916 	bl	8004e98 <prvIsQueueEmpty>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d017      	beq.n	8004ca2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	3324      	adds	r3, #36	@ 0x24
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fdce 	bl	800581c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c82:	f000 f8b7 	bl	8004df4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c86:	f000 fbf9 	bl	800547c <xTaskResumeAll>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d189      	bne.n	8004ba4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004c90:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd0 <xQueueReceive+0x1c0>)
 8004c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	e780      	b.n	8004ba4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ca4:	f000 f8a6 	bl	8004df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ca8:	f000 fbe8 	bl	800547c <xTaskResumeAll>
 8004cac:	e77a      	b.n	8004ba4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cb0:	f000 f8a0 	bl	8004df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cb4:	f000 fbe2 	bl	800547c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cba:	f000 f8ed 	bl	8004e98 <prvIsQueueEmpty>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f43f af6f 	beq.w	8004ba4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cc6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3730      	adds	r7, #48	@ 0x30
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	e000ed04 	.word	0xe000ed04

08004cd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10d      	bne.n	8004d0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d14d      	bne.n	8004d96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 ffc6 	bl	8005c90 <xTaskPriorityDisinherit>
 8004d04:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	605a      	str	r2, [r3, #4]
 8004d0c:	e043      	b.n	8004d96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d119      	bne.n	8004d48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6898      	ldr	r0, [r3, #8]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	f002 fd9f 	bl	8007862 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d32b      	bcc.n	8004d96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	609a      	str	r2, [r3, #8]
 8004d46:	e026      	b.n	8004d96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68d8      	ldr	r0, [r3, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d50:	461a      	mov	r2, r3
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	f002 fd85 	bl	8007862 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	425b      	negs	r3, r3
 8004d62:	441a      	add	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d207      	bcs.n	8004d84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	425b      	negs	r3, r3
 8004d7e:	441a      	add	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d105      	bne.n	8004d96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004d9e:	697b      	ldr	r3, [r7, #20]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d018      	beq.n	8004dec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	441a      	add	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d303      	bcc.n	8004ddc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68d9      	ldr	r1, [r3, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de4:	461a      	mov	r2, r3
 8004de6:	6838      	ldr	r0, [r7, #0]
 8004de8:	f002 fd3b 	bl	8007862 <memcpy>
	}
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004dfc:	f001 fc1e 	bl	800663c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e08:	e011      	b.n	8004e2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d012      	beq.n	8004e38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3324      	adds	r3, #36	@ 0x24
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fd52 	bl	80058c0 <xTaskRemoveFromEventList>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e22:	f000 fe2b 	bl	8005a7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	dce9      	bgt.n	8004e0a <prvUnlockQueue+0x16>
 8004e36:	e000      	b.n	8004e3a <prvUnlockQueue+0x46>
					break;
 8004e38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	22ff      	movs	r2, #255	@ 0xff
 8004e3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e42:	f001 fc2b 	bl	800669c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e46:	f001 fbf9 	bl	800663c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e52:	e011      	b.n	8004e78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d012      	beq.n	8004e82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3310      	adds	r3, #16
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fd2d 	bl	80058c0 <xTaskRemoveFromEventList>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e6c:	f000 fe06 	bl	8005a7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e70:	7bbb      	ldrb	r3, [r7, #14]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	dce9      	bgt.n	8004e54 <prvUnlockQueue+0x60>
 8004e80:	e000      	b.n	8004e84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	22ff      	movs	r2, #255	@ 0xff
 8004e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e8c:	f001 fc06 	bl	800669c <vPortExitCritical>
}
 8004e90:	bf00      	nop
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ea0:	f001 fbcc 	bl	800663c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004eac:	2301      	movs	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e001      	b.n	8004eb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eb6:	f001 fbf1 	bl	800669c <vPortExitCritical>

	return xReturn;
 8004eba:	68fb      	ldr	r3, [r7, #12]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ecc:	f001 fbb6 	bl	800663c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d102      	bne.n	8004ee2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004edc:	2301      	movs	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	e001      	b.n	8004ee6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ee6:	f001 fbd9 	bl	800669c <vPortExitCritical>

	return xReturn;
 8004eea:	68fb      	ldr	r3, [r7, #12]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e014      	b.n	8004f2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f04:	4a0e      	ldr	r2, [pc, #56]	@ (8004f40 <vQueueAddToRegistry+0x4c>)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f10:	490b      	ldr	r1, [pc, #44]	@ (8004f40 <vQueueAddToRegistry+0x4c>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f1a:	4a09      	ldr	r2, [pc, #36]	@ (8004f40 <vQueueAddToRegistry+0x4c>)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f26:	e006      	b.n	8004f36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b07      	cmp	r3, #7
 8004f32:	d9e7      	bls.n	8004f04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr
 8004f40:	2000124c 	.word	0x2000124c

08004f44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f54:	f001 fb72 	bl	800663c <vPortEnterCritical>
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f5e:	b25b      	sxtb	r3, r3
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f64:	d103      	bne.n	8004f6e <vQueueWaitForMessageRestricted+0x2a>
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f74:	b25b      	sxtb	r3, r3
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f7a:	d103      	bne.n	8004f84 <vQueueWaitForMessageRestricted+0x40>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f84:	f001 fb8a 	bl	800669c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	3324      	adds	r3, #36	@ 0x24
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fc65 	bl	8005868 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f9e:	6978      	ldr	r0, [r7, #20]
 8004fa0:	f7ff ff28 	bl	8004df4 <prvUnlockQueue>
	}
 8004fa4:	bf00      	nop
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08e      	sub	sp, #56	@ 0x38
 8004fb0:	af04      	add	r7, sp, #16
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	623b      	str	r3, [r7, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	bf00      	nop
 8004fd6:	e7fd      	b.n	8004fd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10b      	bne.n	8004ff6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	61fb      	str	r3, [r7, #28]
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	e7fd      	b.n	8004ff2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ff6:	23a8      	movs	r3, #168	@ 0xa8
 8004ff8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2ba8      	cmp	r3, #168	@ 0xa8
 8004ffe:	d00b      	beq.n	8005018 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	61bb      	str	r3, [r7, #24]
}
 8005012:	bf00      	nop
 8005014:	bf00      	nop
 8005016:	e7fd      	b.n	8005014 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01e      	beq.n	800505c <xTaskCreateStatic+0xb0>
 800501e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01b      	beq.n	800505c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005026:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	2202      	movs	r2, #2
 8005032:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005036:	2300      	movs	r3, #0
 8005038:	9303      	str	r3, [sp, #12]
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	9302      	str	r3, [sp, #8]
 800503e:	f107 0314 	add.w	r3, r7, #20
 8005042:	9301      	str	r3, [sp, #4]
 8005044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f850 	bl	80050f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005054:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005056:	f000 f8ed 	bl	8005234 <prvAddNewTaskToReadyList>
 800505a:	e001      	b.n	8005060 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005060:	697b      	ldr	r3, [r7, #20]
	}
 8005062:	4618      	mov	r0, r3
 8005064:	3728      	adds	r7, #40	@ 0x28
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800506a:	b580      	push	{r7, lr}
 800506c:	b08c      	sub	sp, #48	@ 0x30
 800506e:	af04      	add	r7, sp, #16
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4618      	mov	r0, r3
 8005080:	f001 fbde 	bl	8006840 <pvPortMalloc>
 8005084:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00e      	beq.n	80050aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800508c:	20a8      	movs	r0, #168	@ 0xa8
 800508e:	f001 fbd7 	bl	8006840 <pvPortMalloc>
 8005092:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	631a      	str	r2, [r3, #48]	@ 0x30
 80050a0:	e005      	b.n	80050ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050a2:	6978      	ldr	r0, [r7, #20]
 80050a4:	f001 fc94 	bl	80069d0 <vPortFree>
 80050a8:	e001      	b.n	80050ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d017      	beq.n	80050e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050bc:	88fa      	ldrh	r2, [r7, #6]
 80050be:	2300      	movs	r3, #0
 80050c0:	9303      	str	r3, [sp, #12]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	9302      	str	r3, [sp, #8]
 80050c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f80e 	bl	80050f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050d8:	69f8      	ldr	r0, [r7, #28]
 80050da:	f000 f8ab 	bl	8005234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050de:	2301      	movs	r3, #1
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	e002      	b.n	80050ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050ea:	69bb      	ldr	r3, [r7, #24]
	}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	461a      	mov	r2, r3
 800510c:	21a5      	movs	r1, #165	@ 0xa5
 800510e:	f002 fb0b 	bl	8007728 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800511c:	3b01      	subs	r3, #1
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f023 0307 	bic.w	r3, r3, #7
 800512a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00b      	beq.n	800514e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	617b      	str	r3, [r7, #20]
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	e7fd      	b.n	800514a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	e012      	b.n	800517a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	7819      	ldrb	r1, [r3, #0]
 800515c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	3334      	adds	r3, #52	@ 0x34
 8005164:	460a      	mov	r2, r1
 8005166:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d006      	beq.n	8005182 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	3301      	adds	r3, #1
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d9e9      	bls.n	8005154 <prvInitialiseNewTask+0x60>
 8005180:	e000      	b.n	8005184 <prvInitialiseNewTask+0x90>
		{
			break;
 8005182:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800518c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518e:	2b37      	cmp	r3, #55	@ 0x37
 8005190:	d901      	bls.n	8005196 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005192:	2337      	movs	r3, #55	@ 0x37
 8005194:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800519a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800519c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	2200      	movs	r2, #0
 80051a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051aa:	3304      	adds	r3, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff f976 	bl	800449e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	3318      	adds	r3, #24
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff f971 	bl	800449e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	3354      	adds	r3, #84	@ 0x54
 80051e6:	224c      	movs	r2, #76	@ 0x4c
 80051e8:	2100      	movs	r1, #0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f002 fa9c 	bl	8007728 <memset>
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005228 <prvInitialiseNewTask+0x134>)
 80051f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80051f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f8:	4a0c      	ldr	r2, [pc, #48]	@ (800522c <prvInitialiseNewTask+0x138>)
 80051fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005230 <prvInitialiseNewTask+0x13c>)
 8005200:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	68f9      	ldr	r1, [r7, #12]
 8005206:	69b8      	ldr	r0, [r7, #24]
 8005208:	f001 f926 	bl	8006458 <pxPortInitialiseStack>
 800520c:	4602      	mov	r2, r0
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800521c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800521e:	bf00      	nop
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	200024d8 	.word	0x200024d8
 800522c:	20002540 	.word	0x20002540
 8005230:	200025a8 	.word	0x200025a8

08005234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800523c:	f001 f9fe 	bl	800663c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005240:	4b2d      	ldr	r3, [pc, #180]	@ (80052f8 <prvAddNewTaskToReadyList+0xc4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3301      	adds	r3, #1
 8005246:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <prvAddNewTaskToReadyList+0xc4>)
 8005248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800524a:	4b2c      	ldr	r3, [pc, #176]	@ (80052fc <prvAddNewTaskToReadyList+0xc8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005252:	4a2a      	ldr	r2, [pc, #168]	@ (80052fc <prvAddNewTaskToReadyList+0xc8>)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005258:	4b27      	ldr	r3, [pc, #156]	@ (80052f8 <prvAddNewTaskToReadyList+0xc4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d110      	bne.n	8005282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005260:	f000 fc30 	bl	8005ac4 <prvInitialiseTaskLists>
 8005264:	e00d      	b.n	8005282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005266:	4b26      	ldr	r3, [pc, #152]	@ (8005300 <prvAddNewTaskToReadyList+0xcc>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800526e:	4b23      	ldr	r3, [pc, #140]	@ (80052fc <prvAddNewTaskToReadyList+0xc8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	429a      	cmp	r2, r3
 800527a:	d802      	bhi.n	8005282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800527c:	4a1f      	ldr	r2, [pc, #124]	@ (80052fc <prvAddNewTaskToReadyList+0xc8>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005282:	4b20      	ldr	r3, [pc, #128]	@ (8005304 <prvAddNewTaskToReadyList+0xd0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3301      	adds	r3, #1
 8005288:	4a1e      	ldr	r2, [pc, #120]	@ (8005304 <prvAddNewTaskToReadyList+0xd0>)
 800528a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800528c:	4b1d      	ldr	r3, [pc, #116]	@ (8005304 <prvAddNewTaskToReadyList+0xd0>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005298:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <prvAddNewTaskToReadyList+0xd4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d903      	bls.n	80052a8 <prvAddNewTaskToReadyList+0x74>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a4:	4a18      	ldr	r2, [pc, #96]	@ (8005308 <prvAddNewTaskToReadyList+0xd4>)
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4a15      	ldr	r2, [pc, #84]	@ (800530c <prvAddNewTaskToReadyList+0xd8>)
 80052b6:	441a      	add	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f7ff f8f9 	bl	80044b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052c4:	f001 f9ea 	bl	800669c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <prvAddNewTaskToReadyList+0xcc>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00e      	beq.n	80052ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052d0:	4b0a      	ldr	r3, [pc, #40]	@ (80052fc <prvAddNewTaskToReadyList+0xc8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052da:	429a      	cmp	r2, r3
 80052dc:	d207      	bcs.n	80052ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052de:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <prvAddNewTaskToReadyList+0xdc>)
 80052e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20001760 	.word	0x20001760
 80052fc:	2000128c 	.word	0x2000128c
 8005300:	2000176c 	.word	0x2000176c
 8005304:	2000177c 	.word	0x2000177c
 8005308:	20001768 	.word	0x20001768
 800530c:	20001290 	.word	0x20001290
 8005310:	e000ed04 	.word	0xe000ed04

08005314 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d018      	beq.n	8005358 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005326:	4b14      	ldr	r3, [pc, #80]	@ (8005378 <vTaskDelay+0x64>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <vTaskDelay+0x32>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	60bb      	str	r3, [r7, #8]
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	e7fd      	b.n	8005342 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005346:	f000 f88b 	bl	8005460 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800534a:	2100      	movs	r1, #0
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fd0f 	bl	8005d70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005352:	f000 f893 	bl	800547c <xTaskResumeAll>
 8005356:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d107      	bne.n	800536e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800535e:	4b07      	ldr	r3, [pc, #28]	@ (800537c <vTaskDelay+0x68>)
 8005360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20001788 	.word	0x20001788
 800537c:	e000ed04 	.word	0xe000ed04

08005380 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	@ 0x28
 8005384:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800538a:	2300      	movs	r3, #0
 800538c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800538e:	463a      	mov	r2, r7
 8005390:	1d39      	adds	r1, r7, #4
 8005392:	f107 0308 	add.w	r3, r7, #8
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff f830 	bl	80043fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	9202      	str	r2, [sp, #8]
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	460a      	mov	r2, r1
 80053ae:	4924      	ldr	r1, [pc, #144]	@ (8005440 <vTaskStartScheduler+0xc0>)
 80053b0:	4824      	ldr	r0, [pc, #144]	@ (8005444 <vTaskStartScheduler+0xc4>)
 80053b2:	f7ff fdfb 	bl	8004fac <xTaskCreateStatic>
 80053b6:	4603      	mov	r3, r0
 80053b8:	4a23      	ldr	r2, [pc, #140]	@ (8005448 <vTaskStartScheduler+0xc8>)
 80053ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053bc:	4b22      	ldr	r3, [pc, #136]	@ (8005448 <vTaskStartScheduler+0xc8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053c4:	2301      	movs	r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e001      	b.n	80053ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d102      	bne.n	80053da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053d4:	f000 fd20 	bl	8005e18 <xTimerCreateTimerTask>
 80053d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d11b      	bne.n	8005418 <vTaskStartScheduler+0x98>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	613b      	str	r3, [r7, #16]
}
 80053f2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053f4:	4b15      	ldr	r3, [pc, #84]	@ (800544c <vTaskStartScheduler+0xcc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3354      	adds	r3, #84	@ 0x54
 80053fa:	4a15      	ldr	r2, [pc, #84]	@ (8005450 <vTaskStartScheduler+0xd0>)
 80053fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053fe:	4b15      	ldr	r3, [pc, #84]	@ (8005454 <vTaskStartScheduler+0xd4>)
 8005400:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005404:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005406:	4b14      	ldr	r3, [pc, #80]	@ (8005458 <vTaskStartScheduler+0xd8>)
 8005408:	2201      	movs	r2, #1
 800540a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800540c:	4b13      	ldr	r3, [pc, #76]	@ (800545c <vTaskStartScheduler+0xdc>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005412:	f001 f8a1 	bl	8006558 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005416:	e00f      	b.n	8005438 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800541e:	d10b      	bne.n	8005438 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	60fb      	str	r3, [r7, #12]
}
 8005432:	bf00      	nop
 8005434:	bf00      	nop
 8005436:	e7fd      	b.n	8005434 <vTaskStartScheduler+0xb4>
}
 8005438:	bf00      	nop
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	080099d8 	.word	0x080099d8
 8005444:	08005a95 	.word	0x08005a95
 8005448:	20001784 	.word	0x20001784
 800544c:	2000128c 	.word	0x2000128c
 8005450:	2000001c 	.word	0x2000001c
 8005454:	20001780 	.word	0x20001780
 8005458:	2000176c 	.word	0x2000176c
 800545c:	20001764 	.word	0x20001764

08005460 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005464:	4b04      	ldr	r3, [pc, #16]	@ (8005478 <vTaskSuspendAll+0x18>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3301      	adds	r3, #1
 800546a:	4a03      	ldr	r2, [pc, #12]	@ (8005478 <vTaskSuspendAll+0x18>)
 800546c:	6013      	str	r3, [r2, #0]
}
 800546e:	bf00      	nop
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	20001788 	.word	0x20001788

0800547c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800548a:	4b42      	ldr	r3, [pc, #264]	@ (8005594 <xTaskResumeAll+0x118>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <xTaskResumeAll+0x2e>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	603b      	str	r3, [r7, #0]
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	e7fd      	b.n	80054a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054aa:	f001 f8c7 	bl	800663c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054ae:	4b39      	ldr	r3, [pc, #228]	@ (8005594 <xTaskResumeAll+0x118>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	4a37      	ldr	r2, [pc, #220]	@ (8005594 <xTaskResumeAll+0x118>)
 80054b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054b8:	4b36      	ldr	r3, [pc, #216]	@ (8005594 <xTaskResumeAll+0x118>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d162      	bne.n	8005586 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054c0:	4b35      	ldr	r3, [pc, #212]	@ (8005598 <xTaskResumeAll+0x11c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d05e      	beq.n	8005586 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054c8:	e02f      	b.n	800552a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054ca:	4b34      	ldr	r3, [pc, #208]	@ (800559c <xTaskResumeAll+0x120>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3318      	adds	r3, #24
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff f848 	bl	800456c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3304      	adds	r3, #4
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff f843 	bl	800456c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ea:	4b2d      	ldr	r3, [pc, #180]	@ (80055a0 <xTaskResumeAll+0x124>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d903      	bls.n	80054fa <xTaskResumeAll+0x7e>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	4a2a      	ldr	r2, [pc, #168]	@ (80055a0 <xTaskResumeAll+0x124>)
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4a27      	ldr	r2, [pc, #156]	@ (80055a4 <xTaskResumeAll+0x128>)
 8005508:	441a      	add	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3304      	adds	r3, #4
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f7fe ffd0 	bl	80044b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800551a:	4b23      	ldr	r3, [pc, #140]	@ (80055a8 <xTaskResumeAll+0x12c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005524:	4b21      	ldr	r3, [pc, #132]	@ (80055ac <xTaskResumeAll+0x130>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800552a:	4b1c      	ldr	r3, [pc, #112]	@ (800559c <xTaskResumeAll+0x120>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1cb      	bne.n	80054ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005538:	f000 fb68 	bl	8005c0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800553c:	4b1c      	ldr	r3, [pc, #112]	@ (80055b0 <xTaskResumeAll+0x134>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d010      	beq.n	800556a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005548:	f000 f844 	bl	80055d4 <xTaskIncrementTick>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005552:	4b16      	ldr	r3, [pc, #88]	@ (80055ac <xTaskResumeAll+0x130>)
 8005554:	2201      	movs	r2, #1
 8005556:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1f1      	bne.n	8005548 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005564:	4b12      	ldr	r3, [pc, #72]	@ (80055b0 <xTaskResumeAll+0x134>)
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800556a:	4b10      	ldr	r3, [pc, #64]	@ (80055ac <xTaskResumeAll+0x130>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005572:	2301      	movs	r3, #1
 8005574:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005576:	4b0f      	ldr	r3, [pc, #60]	@ (80055b4 <xTaskResumeAll+0x138>)
 8005578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005586:	f001 f889 	bl	800669c <vPortExitCritical>

	return xAlreadyYielded;
 800558a:	68bb      	ldr	r3, [r7, #8]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20001788 	.word	0x20001788
 8005598:	20001760 	.word	0x20001760
 800559c:	20001720 	.word	0x20001720
 80055a0:	20001768 	.word	0x20001768
 80055a4:	20001290 	.word	0x20001290
 80055a8:	2000128c 	.word	0x2000128c
 80055ac:	20001774 	.word	0x20001774
 80055b0:	20001770 	.word	0x20001770
 80055b4:	e000ed04 	.word	0xe000ed04

080055b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055be:	4b04      	ldr	r3, [pc, #16]	@ (80055d0 <xTaskGetTickCount+0x18>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055c4:	687b      	ldr	r3, [r7, #4]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr
 80055d0:	20001764 	.word	0x20001764

080055d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055de:	4b52      	ldr	r3, [pc, #328]	@ (8005728 <xTaskIncrementTick+0x154>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f040 808f 	bne.w	8005706 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055e8:	4b50      	ldr	r3, [pc, #320]	@ (800572c <xTaskIncrementTick+0x158>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055f0:	4a4e      	ldr	r2, [pc, #312]	@ (800572c <xTaskIncrementTick+0x158>)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d121      	bne.n	8005640 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80055fc:	4b4c      	ldr	r3, [pc, #304]	@ (8005730 <xTaskIncrementTick+0x15c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	603b      	str	r3, [r7, #0]
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	e7fd      	b.n	800561a <xTaskIncrementTick+0x46>
 800561e:	4b44      	ldr	r3, [pc, #272]	@ (8005730 <xTaskIncrementTick+0x15c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	4b43      	ldr	r3, [pc, #268]	@ (8005734 <xTaskIncrementTick+0x160>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a41      	ldr	r2, [pc, #260]	@ (8005730 <xTaskIncrementTick+0x15c>)
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	4a41      	ldr	r2, [pc, #260]	@ (8005734 <xTaskIncrementTick+0x160>)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	4b41      	ldr	r3, [pc, #260]	@ (8005738 <xTaskIncrementTick+0x164>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	4a3f      	ldr	r2, [pc, #252]	@ (8005738 <xTaskIncrementTick+0x164>)
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	f000 fae6 	bl	8005c0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005640:	4b3e      	ldr	r3, [pc, #248]	@ (800573c <xTaskIncrementTick+0x168>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	429a      	cmp	r2, r3
 8005648:	d34e      	bcc.n	80056e8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800564a:	4b39      	ldr	r3, [pc, #228]	@ (8005730 <xTaskIncrementTick+0x15c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <xTaskIncrementTick+0x84>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <xTaskIncrementTick+0x86>
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d004      	beq.n	8005668 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800565e:	4b37      	ldr	r3, [pc, #220]	@ (800573c <xTaskIncrementTick+0x168>)
 8005660:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005664:	601a      	str	r2, [r3, #0]
					break;
 8005666:	e03f      	b.n	80056e8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005668:	4b31      	ldr	r3, [pc, #196]	@ (8005730 <xTaskIncrementTick+0x15c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	d203      	bcs.n	8005688 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005680:	4a2e      	ldr	r2, [pc, #184]	@ (800573c <xTaskIncrementTick+0x168>)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6013      	str	r3, [r2, #0]
						break;
 8005686:	e02f      	b.n	80056e8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	3304      	adds	r3, #4
 800568c:	4618      	mov	r0, r3
 800568e:	f7fe ff6d 	bl	800456c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	3318      	adds	r3, #24
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe ff64 	bl	800456c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056a8:	4b25      	ldr	r3, [pc, #148]	@ (8005740 <xTaskIncrementTick+0x16c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d903      	bls.n	80056b8 <xTaskIncrementTick+0xe4>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	4a22      	ldr	r2, [pc, #136]	@ (8005740 <xTaskIncrementTick+0x16c>)
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005744 <xTaskIncrementTick+0x170>)
 80056c6:	441a      	add	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f7fe fef1 	bl	80044b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005748 <xTaskIncrementTick+0x174>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	429a      	cmp	r2, r3
 80056e0:	d3b3      	bcc.n	800564a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80056e2:	2301      	movs	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056e6:	e7b0      	b.n	800564a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056e8:	4b17      	ldr	r3, [pc, #92]	@ (8005748 <xTaskIncrementTick+0x174>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ee:	4915      	ldr	r1, [pc, #84]	@ (8005744 <xTaskIncrementTick+0x170>)
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d907      	bls.n	8005710 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005700:	2301      	movs	r3, #1
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e004      	b.n	8005710 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005706:	4b11      	ldr	r3, [pc, #68]	@ (800574c <xTaskIncrementTick+0x178>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3301      	adds	r3, #1
 800570c:	4a0f      	ldr	r2, [pc, #60]	@ (800574c <xTaskIncrementTick+0x178>)
 800570e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005710:	4b0f      	ldr	r3, [pc, #60]	@ (8005750 <xTaskIncrementTick+0x17c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005718:	2301      	movs	r3, #1
 800571a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800571c:	697b      	ldr	r3, [r7, #20]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20001788 	.word	0x20001788
 800572c:	20001764 	.word	0x20001764
 8005730:	20001718 	.word	0x20001718
 8005734:	2000171c 	.word	0x2000171c
 8005738:	20001778 	.word	0x20001778
 800573c:	20001780 	.word	0x20001780
 8005740:	20001768 	.word	0x20001768
 8005744:	20001290 	.word	0x20001290
 8005748:	2000128c 	.word	0x2000128c
 800574c:	20001770 	.word	0x20001770
 8005750:	20001774 	.word	0x20001774

08005754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800575a:	4b2a      	ldr	r3, [pc, #168]	@ (8005804 <vTaskSwitchContext+0xb0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005762:	4b29      	ldr	r3, [pc, #164]	@ (8005808 <vTaskSwitchContext+0xb4>)
 8005764:	2201      	movs	r2, #1
 8005766:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005768:	e047      	b.n	80057fa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800576a:	4b27      	ldr	r3, [pc, #156]	@ (8005808 <vTaskSwitchContext+0xb4>)
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005770:	4b26      	ldr	r3, [pc, #152]	@ (800580c <vTaskSwitchContext+0xb8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e011      	b.n	800579c <vTaskSwitchContext+0x48>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <vTaskSwitchContext+0x42>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	607b      	str	r3, [r7, #4]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <vTaskSwitchContext+0x3e>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3b01      	subs	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	491c      	ldr	r1, [pc, #112]	@ (8005810 <vTaskSwitchContext+0xbc>)
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0e3      	beq.n	8005778 <vTaskSwitchContext+0x24>
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4a15      	ldr	r2, [pc, #84]	@ (8005810 <vTaskSwitchContext+0xbc>)
 80057bc:	4413      	add	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	605a      	str	r2, [r3, #4]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	3308      	adds	r3, #8
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d104      	bne.n	80057e0 <vTaskSwitchContext+0x8c>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	605a      	str	r2, [r3, #4]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	4a0b      	ldr	r2, [pc, #44]	@ (8005814 <vTaskSwitchContext+0xc0>)
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	4a08      	ldr	r2, [pc, #32]	@ (800580c <vTaskSwitchContext+0xb8>)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057f0:	4b08      	ldr	r3, [pc, #32]	@ (8005814 <vTaskSwitchContext+0xc0>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3354      	adds	r3, #84	@ 0x54
 80057f6:	4a08      	ldr	r2, [pc, #32]	@ (8005818 <vTaskSwitchContext+0xc4>)
 80057f8:	6013      	str	r3, [r2, #0]
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr
 8005804:	20001788 	.word	0x20001788
 8005808:	20001774 	.word	0x20001774
 800580c:	20001768 	.word	0x20001768
 8005810:	20001290 	.word	0x20001290
 8005814:	2000128c 	.word	0x2000128c
 8005818:	2000001c 	.word	0x2000001c

0800581c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10b      	bne.n	8005844 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	60fb      	str	r3, [r7, #12]
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	e7fd      	b.n	8005840 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005844:	4b07      	ldr	r3, [pc, #28]	@ (8005864 <vTaskPlaceOnEventList+0x48>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3318      	adds	r3, #24
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7fe fe55 	bl	80044fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005852:	2101      	movs	r1, #1
 8005854:	6838      	ldr	r0, [r7, #0]
 8005856:	f000 fa8b 	bl	8005d70 <prvAddCurrentTaskToDelayedList>
}
 800585a:	bf00      	nop
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	2000128c 	.word	0x2000128c

08005868 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10b      	bne.n	8005892 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	617b      	str	r3, [r7, #20]
}
 800588c:	bf00      	nop
 800588e:	bf00      	nop
 8005890:	e7fd      	b.n	800588e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005892:	4b0a      	ldr	r3, [pc, #40]	@ (80058bc <vTaskPlaceOnEventListRestricted+0x54>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3318      	adds	r3, #24
 8005898:	4619      	mov	r1, r3
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7fe fe0b 	bl	80044b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80058a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	68b8      	ldr	r0, [r7, #8]
 80058b0:	f000 fa5e 	bl	8005d70 <prvAddCurrentTaskToDelayedList>
	}
 80058b4:	bf00      	nop
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	2000128c 	.word	0x2000128c

080058c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10b      	bne.n	80058ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	60fb      	str	r3, [r7, #12]
}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	e7fd      	b.n	80058ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	3318      	adds	r3, #24
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fe fe3a 	bl	800456c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005970 <xTaskRemoveFromEventList+0xb0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d11d      	bne.n	800593c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	3304      	adds	r3, #4
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe fe31 	bl	800456c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590e:	4b19      	ldr	r3, [pc, #100]	@ (8005974 <xTaskRemoveFromEventList+0xb4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d903      	bls.n	800591e <xTaskRemoveFromEventList+0x5e>
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591a:	4a16      	ldr	r2, [pc, #88]	@ (8005974 <xTaskRemoveFromEventList+0xb4>)
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4a13      	ldr	r2, [pc, #76]	@ (8005978 <xTaskRemoveFromEventList+0xb8>)
 800592c:	441a      	add	r2, r3
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	3304      	adds	r3, #4
 8005932:	4619      	mov	r1, r3
 8005934:	4610      	mov	r0, r2
 8005936:	f7fe fdbe 	bl	80044b6 <vListInsertEnd>
 800593a:	e005      	b.n	8005948 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	3318      	adds	r3, #24
 8005940:	4619      	mov	r1, r3
 8005942:	480e      	ldr	r0, [pc, #56]	@ (800597c <xTaskRemoveFromEventList+0xbc>)
 8005944:	f7fe fdb7 	bl	80044b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800594c:	4b0c      	ldr	r3, [pc, #48]	@ (8005980 <xTaskRemoveFromEventList+0xc0>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	429a      	cmp	r2, r3
 8005954:	d905      	bls.n	8005962 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005956:	2301      	movs	r3, #1
 8005958:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800595a:	4b0a      	ldr	r3, [pc, #40]	@ (8005984 <xTaskRemoveFromEventList+0xc4>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e001      	b.n	8005966 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005962:	2300      	movs	r3, #0
 8005964:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005966:	697b      	ldr	r3, [r7, #20]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20001788 	.word	0x20001788
 8005974:	20001768 	.word	0x20001768
 8005978:	20001290 	.word	0x20001290
 800597c:	20001720 	.word	0x20001720
 8005980:	2000128c 	.word	0x2000128c
 8005984:	20001774 	.word	0x20001774

08005988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005990:	4b06      	ldr	r3, [pc, #24]	@ (80059ac <vTaskInternalSetTimeOutState+0x24>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005998:	4b05      	ldr	r3, [pc, #20]	@ (80059b0 <vTaskInternalSetTimeOutState+0x28>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	605a      	str	r2, [r3, #4]
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20001778 	.word	0x20001778
 80059b0:	20001764 	.word	0x20001764

080059b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10b      	bne.n	80059dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	613b      	str	r3, [r7, #16]
}
 80059d6:	bf00      	nop
 80059d8:	bf00      	nop
 80059da:	e7fd      	b.n	80059d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10b      	bne.n	80059fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	60fb      	str	r3, [r7, #12]
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	e7fd      	b.n	80059f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80059fa:	f000 fe1f 	bl	800663c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005a74 <xTaskCheckForTimeOut+0xc0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a16:	d102      	bne.n	8005a1e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
 8005a1c:	e023      	b.n	8005a66 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b15      	ldr	r3, [pc, #84]	@ (8005a78 <xTaskCheckForTimeOut+0xc4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d007      	beq.n	8005a3a <xTaskCheckForTimeOut+0x86>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d302      	bcc.n	8005a3a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	e015      	b.n	8005a66 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d20b      	bcs.n	8005a5c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	1ad2      	subs	r2, r2, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7ff ff99 	bl	8005988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	e004      	b.n	8005a66 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a62:	2301      	movs	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a66:	f000 fe19 	bl	800669c <vPortExitCritical>

	return xReturn;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3720      	adds	r7, #32
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20001764 	.word	0x20001764
 8005a78:	20001778 	.word	0x20001778

08005a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a80:	4b03      	ldr	r3, [pc, #12]	@ (8005a90 <vTaskMissedYield+0x14>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
}
 8005a86:	bf00      	nop
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20001774 	.word	0x20001774

08005a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a9c:	f000 f852 	bl	8005b44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005aa0:	4b06      	ldr	r3, [pc, #24]	@ (8005abc <prvIdleTask+0x28>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d9f9      	bls.n	8005a9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005aa8:	4b05      	ldr	r3, [pc, #20]	@ (8005ac0 <prvIdleTask+0x2c>)
 8005aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ab8:	e7f0      	b.n	8005a9c <prvIdleTask+0x8>
 8005aba:	bf00      	nop
 8005abc:	20001290 	.word	0x20001290
 8005ac0:	e000ed04 	.word	0xe000ed04

08005ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aca:	2300      	movs	r3, #0
 8005acc:	607b      	str	r3, [r7, #4]
 8005ace:	e00c      	b.n	8005aea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4a12      	ldr	r2, [pc, #72]	@ (8005b24 <prvInitialiseTaskLists+0x60>)
 8005adc:	4413      	add	r3, r2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe fcbe 	bl	8004460 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	607b      	str	r3, [r7, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b37      	cmp	r3, #55	@ 0x37
 8005aee:	d9ef      	bls.n	8005ad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005af0:	480d      	ldr	r0, [pc, #52]	@ (8005b28 <prvInitialiseTaskLists+0x64>)
 8005af2:	f7fe fcb5 	bl	8004460 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005af6:	480d      	ldr	r0, [pc, #52]	@ (8005b2c <prvInitialiseTaskLists+0x68>)
 8005af8:	f7fe fcb2 	bl	8004460 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005afc:	480c      	ldr	r0, [pc, #48]	@ (8005b30 <prvInitialiseTaskLists+0x6c>)
 8005afe:	f7fe fcaf 	bl	8004460 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b02:	480c      	ldr	r0, [pc, #48]	@ (8005b34 <prvInitialiseTaskLists+0x70>)
 8005b04:	f7fe fcac 	bl	8004460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b08:	480b      	ldr	r0, [pc, #44]	@ (8005b38 <prvInitialiseTaskLists+0x74>)
 8005b0a:	f7fe fca9 	bl	8004460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b3c <prvInitialiseTaskLists+0x78>)
 8005b10:	4a05      	ldr	r2, [pc, #20]	@ (8005b28 <prvInitialiseTaskLists+0x64>)
 8005b12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b14:	4b0a      	ldr	r3, [pc, #40]	@ (8005b40 <prvInitialiseTaskLists+0x7c>)
 8005b16:	4a05      	ldr	r2, [pc, #20]	@ (8005b2c <prvInitialiseTaskLists+0x68>)
 8005b18:	601a      	str	r2, [r3, #0]
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20001290 	.word	0x20001290
 8005b28:	200016f0 	.word	0x200016f0
 8005b2c:	20001704 	.word	0x20001704
 8005b30:	20001720 	.word	0x20001720
 8005b34:	20001734 	.word	0x20001734
 8005b38:	2000174c 	.word	0x2000174c
 8005b3c:	20001718 	.word	0x20001718
 8005b40:	2000171c 	.word	0x2000171c

08005b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b4a:	e019      	b.n	8005b80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b4c:	f000 fd76 	bl	800663c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b50:	4b10      	ldr	r3, [pc, #64]	@ (8005b94 <prvCheckTasksWaitingTermination+0x50>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe fd05 	bl	800456c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b62:	4b0d      	ldr	r3, [pc, #52]	@ (8005b98 <prvCheckTasksWaitingTermination+0x54>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	4a0b      	ldr	r2, [pc, #44]	@ (8005b98 <prvCheckTasksWaitingTermination+0x54>)
 8005b6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b9c <prvCheckTasksWaitingTermination+0x58>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	4a0a      	ldr	r2, [pc, #40]	@ (8005b9c <prvCheckTasksWaitingTermination+0x58>)
 8005b74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b76:	f000 fd91 	bl	800669c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f810 	bl	8005ba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b80:	4b06      	ldr	r3, [pc, #24]	@ (8005b9c <prvCheckTasksWaitingTermination+0x58>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e1      	bne.n	8005b4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20001734 	.word	0x20001734
 8005b98:	20001760 	.word	0x20001760
 8005b9c:	20001748 	.word	0x20001748

08005ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3354      	adds	r3, #84	@ 0x54
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 fdc7 	bl	8007740 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d108      	bne.n	8005bce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 ff05 	bl	80069d0 <vPortFree>
				vPortFree( pxTCB );
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 ff02 	bl	80069d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bcc:	e019      	b.n	8005c02 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d103      	bne.n	8005be0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fef9 	bl	80069d0 <vPortFree>
	}
 8005bde:	e010      	b.n	8005c02 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d00b      	beq.n	8005c02 <prvDeleteTCB+0x62>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	60fb      	str	r3, [r7, #12]
}
 8005bfc:	bf00      	nop
 8005bfe:	bf00      	nop
 8005c00:	e7fd      	b.n	8005bfe <prvDeleteTCB+0x5e>
	}
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c12:	4b0e      	ldr	r3, [pc, #56]	@ (8005c4c <prvResetNextTaskUnblockTime+0x40>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <prvResetNextTaskUnblockTime+0x14>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <prvResetNextTaskUnblockTime+0x16>
 8005c20:	2300      	movs	r3, #0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d004      	beq.n	8005c30 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c26:	4b0a      	ldr	r3, [pc, #40]	@ (8005c50 <prvResetNextTaskUnblockTime+0x44>)
 8005c28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c2c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c2e:	e008      	b.n	8005c42 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c30:	4b06      	ldr	r3, [pc, #24]	@ (8005c4c <prvResetNextTaskUnblockTime+0x40>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4a04      	ldr	r2, [pc, #16]	@ (8005c50 <prvResetNextTaskUnblockTime+0x44>)
 8005c40:	6013      	str	r3, [r2, #0]
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr
 8005c4c:	20001718 	.word	0x20001718
 8005c50:	20001780 	.word	0x20001780

08005c54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c88 <xTaskGetSchedulerState+0x34>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d102      	bne.n	8005c68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c62:	2301      	movs	r3, #1
 8005c64:	607b      	str	r3, [r7, #4]
 8005c66:	e008      	b.n	8005c7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c68:	4b08      	ldr	r3, [pc, #32]	@ (8005c8c <xTaskGetSchedulerState+0x38>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d102      	bne.n	8005c76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c70:	2302      	movs	r3, #2
 8005c72:	607b      	str	r3, [r7, #4]
 8005c74:	e001      	b.n	8005c7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c76:	2300      	movs	r3, #0
 8005c78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c7a:	687b      	ldr	r3, [r7, #4]
	}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bc80      	pop	{r7}
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	2000176c 	.word	0x2000176c
 8005c8c:	20001788 	.word	0x20001788

08005c90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d058      	beq.n	8005d58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8005d64 <xTaskPriorityDisinherit+0xd4>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d00b      	beq.n	8005cc8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	60fb      	str	r3, [r7, #12]
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10b      	bne.n	8005ce8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	60bb      	str	r3, [r7, #8]
}
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	e7fd      	b.n	8005ce4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cec:	1e5a      	subs	r2, r3, #1
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d02c      	beq.n	8005d58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d128      	bne.n	8005d58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe fc2e 	bl	800456c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d28:	4b0f      	ldr	r3, [pc, #60]	@ (8005d68 <xTaskPriorityDisinherit+0xd8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d903      	bls.n	8005d38 <xTaskPriorityDisinherit+0xa8>
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	4a0c      	ldr	r2, [pc, #48]	@ (8005d68 <xTaskPriorityDisinherit+0xd8>)
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4a09      	ldr	r2, [pc, #36]	@ (8005d6c <xTaskPriorityDisinherit+0xdc>)
 8005d46:	441a      	add	r2, r3
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f7fe fbb1 	bl	80044b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d58:	697b      	ldr	r3, [r7, #20]
	}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	2000128c 	.word	0x2000128c
 8005d68:	20001768 	.word	0x20001768
 8005d6c:	20001290 	.word	0x20001290

08005d70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d7a:	4b21      	ldr	r3, [pc, #132]	@ (8005e00 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d80:	4b20      	ldr	r3, [pc, #128]	@ (8005e04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe fbf0 	bl	800456c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d92:	d10a      	bne.n	8005daa <prvAddCurrentTaskToDelayedList+0x3a>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d007      	beq.n	8005daa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8005e04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	4619      	mov	r1, r3
 8005da2:	4819      	ldr	r0, [pc, #100]	@ (8005e08 <prvAddCurrentTaskToDelayedList+0x98>)
 8005da4:	f7fe fb87 	bl	80044b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005da8:	e026      	b.n	8005df8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4413      	add	r3, r2
 8005db0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005db2:	4b14      	ldr	r3, [pc, #80]	@ (8005e04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d209      	bcs.n	8005dd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dc2:	4b12      	ldr	r3, [pc, #72]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8005e04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f7fe fb94 	bl	80044fc <vListInsert>
}
 8005dd4:	e010      	b.n	8005df8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8005e10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b0a      	ldr	r3, [pc, #40]	@ (8005e04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4619      	mov	r1, r3
 8005de2:	4610      	mov	r0, r2
 8005de4:	f7fe fb8a 	bl	80044fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005de8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d202      	bcs.n	8005df8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005df2:	4a08      	ldr	r2, [pc, #32]	@ (8005e14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	6013      	str	r3, [r2, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20001764 	.word	0x20001764
 8005e04:	2000128c 	.word	0x2000128c
 8005e08:	2000174c 	.word	0x2000174c
 8005e0c:	2000171c 	.word	0x2000171c
 8005e10:	20001718 	.word	0x20001718
 8005e14:	20001780 	.word	0x20001780

08005e18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	@ 0x28
 8005e1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e22:	f000 fad9 	bl	80063d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e26:	4b1d      	ldr	r3, [pc, #116]	@ (8005e9c <xTimerCreateTimerTask+0x84>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d021      	beq.n	8005e72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e36:	1d3a      	adds	r2, r7, #4
 8005e38:	f107 0108 	add.w	r1, r7, #8
 8005e3c:	f107 030c 	add.w	r3, r7, #12
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe faf3 	bl	800442c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	9202      	str	r2, [sp, #8]
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	2302      	movs	r3, #2
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	2300      	movs	r3, #0
 8005e56:	460a      	mov	r2, r1
 8005e58:	4911      	ldr	r1, [pc, #68]	@ (8005ea0 <xTimerCreateTimerTask+0x88>)
 8005e5a:	4812      	ldr	r0, [pc, #72]	@ (8005ea4 <xTimerCreateTimerTask+0x8c>)
 8005e5c:	f7ff f8a6 	bl	8004fac <xTaskCreateStatic>
 8005e60:	4603      	mov	r3, r0
 8005e62:	4a11      	ldr	r2, [pc, #68]	@ (8005ea8 <xTimerCreateTimerTask+0x90>)
 8005e64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e66:	4b10      	ldr	r3, [pc, #64]	@ (8005ea8 <xTimerCreateTimerTask+0x90>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10b      	bne.n	8005e90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	613b      	str	r3, [r7, #16]
}
 8005e8a:	bf00      	nop
 8005e8c:	bf00      	nop
 8005e8e:	e7fd      	b.n	8005e8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e90:	697b      	ldr	r3, [r7, #20]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	200017bc 	.word	0x200017bc
 8005ea0:	080099e0 	.word	0x080099e0
 8005ea4:	08005fcd 	.word	0x08005fcd
 8005ea8:	200017c0 	.word	0x200017c0

08005eac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	@ 0x28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10b      	bne.n	8005edc <xTimerGenericCommand+0x30>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	623b      	str	r3, [r7, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	e7fd      	b.n	8005ed8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005edc:	4b19      	ldr	r3, [pc, #100]	@ (8005f44 <xTimerGenericCommand+0x98>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d02a      	beq.n	8005f3a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b05      	cmp	r3, #5
 8005ef4:	dc18      	bgt.n	8005f28 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ef6:	f7ff fead 	bl	8005c54 <xTaskGetSchedulerState>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d109      	bne.n	8005f14 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f00:	4b10      	ldr	r3, [pc, #64]	@ (8005f44 <xTimerGenericCommand+0x98>)
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	f107 0110 	add.w	r1, r7, #16
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0c:	f7fe fc62 	bl	80047d4 <xQueueGenericSend>
 8005f10:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f12:	e012      	b.n	8005f3a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f14:	4b0b      	ldr	r3, [pc, #44]	@ (8005f44 <xTimerGenericCommand+0x98>)
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	f107 0110 	add.w	r1, r7, #16
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f7fe fc58 	bl	80047d4 <xQueueGenericSend>
 8005f24:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f26:	e008      	b.n	8005f3a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f28:	4b06      	ldr	r3, [pc, #24]	@ (8005f44 <xTimerGenericCommand+0x98>)
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	f107 0110 	add.w	r1, r7, #16
 8005f30:	2300      	movs	r3, #0
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	f7fe fd50 	bl	80049d8 <xQueueGenericSendFromISR>
 8005f38:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3728      	adds	r7, #40	@ 0x28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	200017bc 	.word	0x200017bc

08005f48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f52:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc8 <prvProcessExpiredTimer+0x80>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe fb03 	bl	800456c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d123      	bne.n	8005fb6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	18d1      	adds	r1, r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	6978      	ldr	r0, [r7, #20]
 8005f7c:	f000 f8cc 	bl	8006118 <prvInsertTimerInActiveList>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d017      	beq.n	8005fb6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f86:	2300      	movs	r3, #0
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	2100      	movs	r1, #0
 8005f90:	6978      	ldr	r0, [r7, #20]
 8005f92:	f7ff ff8b 	bl	8005eac <xTimerGenericCommand>
 8005f96:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	60fb      	str	r3, [r7, #12]
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fba:	6978      	ldr	r0, [r7, #20]
 8005fbc:	4798      	blx	r3
}
 8005fbe:	bf00      	nop
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	200017b4 	.word	0x200017b4

08005fcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fd4:	f107 0308 	add.w	r3, r7, #8
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 f859 	bl	8006090 <prvGetNextExpireTime>
 8005fde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f805 	bl	8005ff4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005fea:	f000 f8d7 	bl	800619c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fee:	bf00      	nop
 8005ff0:	e7f0      	b.n	8005fd4 <prvTimerTask+0x8>
	...

08005ff4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ffe:	f7ff fa2f 	bl	8005460 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006002:	f107 0308 	add.w	r3, r7, #8
 8006006:	4618      	mov	r0, r3
 8006008:	f000 f866 	bl	80060d8 <prvSampleTimeNow>
 800600c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d130      	bne.n	8006076 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <prvProcessTimerOrBlockTask+0x3c>
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	429a      	cmp	r2, r3
 8006020:	d806      	bhi.n	8006030 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006022:	f7ff fa2b 	bl	800547c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006026:	68f9      	ldr	r1, [r7, #12]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff ff8d 	bl	8005f48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800602e:	e024      	b.n	800607a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006036:	4b13      	ldr	r3, [pc, #76]	@ (8006084 <prvProcessTimerOrBlockTask+0x90>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf0c      	ite	eq
 8006040:	2301      	moveq	r3, #1
 8006042:	2300      	movne	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006048:	4b0f      	ldr	r3, [pc, #60]	@ (8006088 <prvProcessTimerOrBlockTask+0x94>)
 800604a:	6818      	ldr	r0, [r3, #0]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	4619      	mov	r1, r3
 8006056:	f7fe ff75 	bl	8004f44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800605a:	f7ff fa0f 	bl	800547c <xTaskResumeAll>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006064:	4b09      	ldr	r3, [pc, #36]	@ (800608c <prvProcessTimerOrBlockTask+0x98>)
 8006066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	f3bf 8f6f 	isb	sy
}
 8006074:	e001      	b.n	800607a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006076:	f7ff fa01 	bl	800547c <xTaskResumeAll>
}
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	200017b8 	.word	0x200017b8
 8006088:	200017bc 	.word	0x200017bc
 800608c:	e000ed04 	.word	0xe000ed04

08006090 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006098:	4b0e      	ldr	r3, [pc, #56]	@ (80060d4 <prvGetNextExpireTime+0x44>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bf0c      	ite	eq
 80060a2:	2301      	moveq	r3, #1
 80060a4:	2300      	movne	r3, #0
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d105      	bne.n	80060c2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060b6:	4b07      	ldr	r3, [pc, #28]	@ (80060d4 <prvGetNextExpireTime+0x44>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	e001      	b.n	80060c6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060c6:	68fb      	ldr	r3, [r7, #12]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bc80      	pop	{r7}
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	200017b4 	.word	0x200017b4

080060d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060e0:	f7ff fa6a 	bl	80055b8 <xTaskGetTickCount>
 80060e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006114 <prvSampleTimeNow+0x3c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d205      	bcs.n	80060fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060f0:	f000 f910 	bl	8006314 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	e002      	b.n	8006102 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006102:	4a04      	ldr	r2, [pc, #16]	@ (8006114 <prvSampleTimeNow+0x3c>)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006108:	68fb      	ldr	r3, [r7, #12]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	200017c4 	.word	0x200017c4

08006118 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006126:	2300      	movs	r3, #0
 8006128:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	429a      	cmp	r2, r3
 800613c:	d812      	bhi.n	8006164 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	429a      	cmp	r2, r3
 800614a:	d302      	bcc.n	8006152 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800614c:	2301      	movs	r3, #1
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	e01b      	b.n	800618a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006152:	4b10      	ldr	r3, [pc, #64]	@ (8006194 <prvInsertTimerInActiveList+0x7c>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3304      	adds	r3, #4
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f7fe f9cd 	bl	80044fc <vListInsert>
 8006162:	e012      	b.n	800618a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d206      	bcs.n	800617a <prvInsertTimerInActiveList+0x62>
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d302      	bcc.n	800617a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006174:	2301      	movs	r3, #1
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	e007      	b.n	800618a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800617a:	4b07      	ldr	r3, [pc, #28]	@ (8006198 <prvInsertTimerInActiveList+0x80>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3304      	adds	r3, #4
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	f7fe f9b9 	bl	80044fc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800618a:	697b      	ldr	r3, [r7, #20]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	200017b8 	.word	0x200017b8
 8006198:	200017b4 	.word	0x200017b4

0800619c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08e      	sub	sp, #56	@ 0x38
 80061a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061a2:	e0a5      	b.n	80062f0 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	da19      	bge.n	80061de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061aa:	1d3b      	adds	r3, r7, #4
 80061ac:	3304      	adds	r3, #4
 80061ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10b      	bne.n	80061ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	61fb      	str	r3, [r7, #28]
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	e7fd      	b.n	80061ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061d4:	6850      	ldr	r0, [r2, #4]
 80061d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061d8:	6892      	ldr	r2, [r2, #8]
 80061da:	4611      	mov	r1, r2
 80061dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f2c0 8085 	blt.w	80062f0 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f4:	3304      	adds	r3, #4
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe f9b8 	bl	800456c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061fc:	463b      	mov	r3, r7
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff ff6a 	bl	80060d8 <prvSampleTimeNow>
 8006204:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b09      	cmp	r3, #9
 800620a:	d86c      	bhi.n	80062e6 <prvProcessReceivedCommands+0x14a>
 800620c:	a201      	add	r2, pc, #4	@ (adr r2, 8006214 <prvProcessReceivedCommands+0x78>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	0800623d 	.word	0x0800623d
 8006218:	0800623d 	.word	0x0800623d
 800621c:	0800623d 	.word	0x0800623d
 8006220:	080062e7 	.word	0x080062e7
 8006224:	0800629b 	.word	0x0800629b
 8006228:	080062d5 	.word	0x080062d5
 800622c:	0800623d 	.word	0x0800623d
 8006230:	0800623d 	.word	0x0800623d
 8006234:	080062e7 	.word	0x080062e7
 8006238:	0800629b 	.word	0x0800629b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	18d1      	adds	r1, r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006248:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800624a:	f7ff ff65 	bl	8006118 <prvInsertTimerInActiveList>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d04a      	beq.n	80062ea <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800625a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800625c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d142      	bne.n	80062ea <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	441a      	add	r2, r3
 800626c:	2300      	movs	r3, #0
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	2300      	movs	r3, #0
 8006272:	2100      	movs	r1, #0
 8006274:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006276:	f7ff fe19 	bl	8005eac <xTimerGenericCommand>
 800627a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d133      	bne.n	80062ea <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	61bb      	str	r3, [r7, #24]
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	e7fd      	b.n	8006296 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10b      	bne.n	80062c0 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	617b      	str	r3, [r7, #20]
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	e7fd      	b.n	80062bc <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c2:	699a      	ldr	r2, [r3, #24]
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	18d1      	adds	r1, r2, r3
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ce:	f7ff ff23 	bl	8006118 <prvInsertTimerInActiveList>
					break;
 80062d2:	e00d      	b.n	80062f0 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80062d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d107      	bne.n	80062ee <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80062de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062e0:	f000 fb76 	bl	80069d0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062e4:	e003      	b.n	80062ee <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80062e6:	bf00      	nop
 80062e8:	e002      	b.n	80062f0 <prvProcessReceivedCommands+0x154>
					break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <prvProcessReceivedCommands+0x154>
					break;
 80062ee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062f0:	4b07      	ldr	r3, [pc, #28]	@ (8006310 <prvProcessReceivedCommands+0x174>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	1d39      	adds	r1, r7, #4
 80062f6:	2200      	movs	r2, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe fc09 	bl	8004b10 <xQueueReceive>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f47f af4f 	bne.w	80061a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006306:	bf00      	nop
 8006308:	bf00      	nop
 800630a:	3730      	adds	r7, #48	@ 0x30
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	200017bc 	.word	0x200017bc

08006314 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800631a:	e046      	b.n	80063aa <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800631c:	4b2c      	ldr	r3, [pc, #176]	@ (80063d0 <prvSwitchTimerLists+0xbc>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006326:	4b2a      	ldr	r3, [pc, #168]	@ (80063d0 <prvSwitchTimerLists+0xbc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3304      	adds	r3, #4
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe f919 	bl	800456c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d12f      	bne.n	80063aa <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4413      	add	r3, r2
 8006352:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	429a      	cmp	r2, r3
 800635a:	d90e      	bls.n	800637a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006368:	4b19      	ldr	r3, [pc, #100]	@ (80063d0 <prvSwitchTimerLists+0xbc>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7fe f8c2 	bl	80044fc <vListInsert>
 8006378:	e017      	b.n	80063aa <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800637a:	2300      	movs	r3, #0
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	2300      	movs	r3, #0
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	2100      	movs	r1, #0
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f7ff fd91 	bl	8005eac <xTimerGenericCommand>
 800638a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10b      	bne.n	80063aa <prvSwitchTimerLists+0x96>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	603b      	str	r3, [r7, #0]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063aa:	4b09      	ldr	r3, [pc, #36]	@ (80063d0 <prvSwitchTimerLists+0xbc>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1b3      	bne.n	800631c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063b4:	4b06      	ldr	r3, [pc, #24]	@ (80063d0 <prvSwitchTimerLists+0xbc>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063ba:	4b06      	ldr	r3, [pc, #24]	@ (80063d4 <prvSwitchTimerLists+0xc0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a04      	ldr	r2, [pc, #16]	@ (80063d0 <prvSwitchTimerLists+0xbc>)
 80063c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063c2:	4a04      	ldr	r2, [pc, #16]	@ (80063d4 <prvSwitchTimerLists+0xc0>)
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	6013      	str	r3, [r2, #0]
}
 80063c8:	bf00      	nop
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	200017b4 	.word	0x200017b4
 80063d4:	200017b8 	.word	0x200017b8

080063d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063de:	f000 f92d 	bl	800663c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063e2:	4b15      	ldr	r3, [pc, #84]	@ (8006438 <prvCheckForValidListAndQueue+0x60>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d120      	bne.n	800642c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063ea:	4814      	ldr	r0, [pc, #80]	@ (800643c <prvCheckForValidListAndQueue+0x64>)
 80063ec:	f7fe f838 	bl	8004460 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063f0:	4813      	ldr	r0, [pc, #76]	@ (8006440 <prvCheckForValidListAndQueue+0x68>)
 80063f2:	f7fe f835 	bl	8004460 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063f6:	4b13      	ldr	r3, [pc, #76]	@ (8006444 <prvCheckForValidListAndQueue+0x6c>)
 80063f8:	4a10      	ldr	r2, [pc, #64]	@ (800643c <prvCheckForValidListAndQueue+0x64>)
 80063fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063fc:	4b12      	ldr	r3, [pc, #72]	@ (8006448 <prvCheckForValidListAndQueue+0x70>)
 80063fe:	4a10      	ldr	r2, [pc, #64]	@ (8006440 <prvCheckForValidListAndQueue+0x68>)
 8006400:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006402:	2300      	movs	r3, #0
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	4b11      	ldr	r3, [pc, #68]	@ (800644c <prvCheckForValidListAndQueue+0x74>)
 8006408:	4a11      	ldr	r2, [pc, #68]	@ (8006450 <prvCheckForValidListAndQueue+0x78>)
 800640a:	2110      	movs	r1, #16
 800640c:	200a      	movs	r0, #10
 800640e:	f7fe f941 	bl	8004694 <xQueueGenericCreateStatic>
 8006412:	4603      	mov	r3, r0
 8006414:	4a08      	ldr	r2, [pc, #32]	@ (8006438 <prvCheckForValidListAndQueue+0x60>)
 8006416:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006418:	4b07      	ldr	r3, [pc, #28]	@ (8006438 <prvCheckForValidListAndQueue+0x60>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006420:	4b05      	ldr	r3, [pc, #20]	@ (8006438 <prvCheckForValidListAndQueue+0x60>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	490b      	ldr	r1, [pc, #44]	@ (8006454 <prvCheckForValidListAndQueue+0x7c>)
 8006426:	4618      	mov	r0, r3
 8006428:	f7fe fd64 	bl	8004ef4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800642c:	f000 f936 	bl	800669c <vPortExitCritical>
}
 8006430:	bf00      	nop
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	200017bc 	.word	0x200017bc
 800643c:	2000178c 	.word	0x2000178c
 8006440:	200017a0 	.word	0x200017a0
 8006444:	200017b4 	.word	0x200017b4
 8006448:	200017b8 	.word	0x200017b8
 800644c:	20001868 	.word	0x20001868
 8006450:	200017c8 	.word	0x200017c8
 8006454:	080099e8 	.word	0x080099e8

08006458 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3b04      	subs	r3, #4
 8006468:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3b04      	subs	r3, #4
 8006476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f023 0201 	bic.w	r2, r3, #1
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3b04      	subs	r3, #4
 8006486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006488:	4a08      	ldr	r2, [pc, #32]	@ (80064ac <pxPortInitialiseStack+0x54>)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3b14      	subs	r3, #20
 8006492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3b20      	subs	r3, #32
 800649e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064a0:	68fb      	ldr	r3, [r7, #12]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr
 80064ac:	080064b1 	.word	0x080064b1

080064b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064ba:	4b12      	ldr	r3, [pc, #72]	@ (8006504 <prvTaskExitError+0x54>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064c2:	d00b      	beq.n	80064dc <prvTaskExitError+0x2c>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	60fb      	str	r3, [r7, #12]
}
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	e7fd      	b.n	80064d8 <prvTaskExitError+0x28>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	60bb      	str	r3, [r7, #8]
}
 80064ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064f0:	bf00      	nop
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0fc      	beq.n	80064f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr
 8006504:	2000000c 	.word	0x2000000c
	...

08006510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006510:	4b07      	ldr	r3, [pc, #28]	@ (8006530 <pxCurrentTCBConst2>)
 8006512:	6819      	ldr	r1, [r3, #0]
 8006514:	6808      	ldr	r0, [r1, #0]
 8006516:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800651a:	f380 8809 	msr	PSP, r0
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f04f 0000 	mov.w	r0, #0
 8006526:	f380 8811 	msr	BASEPRI, r0
 800652a:	f04e 0e0d 	orr.w	lr, lr, #13
 800652e:	4770      	bx	lr

08006530 <pxCurrentTCBConst2>:
 8006530:	2000128c 	.word	0x2000128c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop

08006538 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006538:	4806      	ldr	r0, [pc, #24]	@ (8006554 <prvPortStartFirstTask+0x1c>)
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	6800      	ldr	r0, [r0, #0]
 800653e:	f380 8808 	msr	MSP, r0
 8006542:	b662      	cpsie	i
 8006544:	b661      	cpsie	f
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	df00      	svc	0
 8006550:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006552:	bf00      	nop
 8006554:	e000ed08 	.word	0xe000ed08

08006558 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800655e:	4b32      	ldr	r3, [pc, #200]	@ (8006628 <xPortStartScheduler+0xd0>)
 8006560:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	b2db      	uxtb	r3, r3
 8006568:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	22ff      	movs	r2, #255	@ 0xff
 800656e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006580:	b2da      	uxtb	r2, r3
 8006582:	4b2a      	ldr	r3, [pc, #168]	@ (800662c <xPortStartScheduler+0xd4>)
 8006584:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006586:	4b2a      	ldr	r3, [pc, #168]	@ (8006630 <xPortStartScheduler+0xd8>)
 8006588:	2207      	movs	r2, #7
 800658a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800658c:	e009      	b.n	80065a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800658e:	4b28      	ldr	r3, [pc, #160]	@ (8006630 <xPortStartScheduler+0xd8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3b01      	subs	r3, #1
 8006594:	4a26      	ldr	r2, [pc, #152]	@ (8006630 <xPortStartScheduler+0xd8>)
 8006596:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065a2:	78fb      	ldrb	r3, [r7, #3]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065aa:	2b80      	cmp	r3, #128	@ 0x80
 80065ac:	d0ef      	beq.n	800658e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065ae:	4b20      	ldr	r3, [pc, #128]	@ (8006630 <xPortStartScheduler+0xd8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f1c3 0307 	rsb	r3, r3, #7
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d00b      	beq.n	80065d2 <xPortStartScheduler+0x7a>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	60bb      	str	r3, [r7, #8]
}
 80065cc:	bf00      	nop
 80065ce:	bf00      	nop
 80065d0:	e7fd      	b.n	80065ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065d2:	4b17      	ldr	r3, [pc, #92]	@ (8006630 <xPortStartScheduler+0xd8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	4a15      	ldr	r2, [pc, #84]	@ (8006630 <xPortStartScheduler+0xd8>)
 80065da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065dc:	4b14      	ldr	r3, [pc, #80]	@ (8006630 <xPortStartScheduler+0xd8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065e4:	4a12      	ldr	r2, [pc, #72]	@ (8006630 <xPortStartScheduler+0xd8>)
 80065e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065f0:	4b10      	ldr	r3, [pc, #64]	@ (8006634 <xPortStartScheduler+0xdc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a0f      	ldr	r2, [pc, #60]	@ (8006634 <xPortStartScheduler+0xdc>)
 80065f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006634 <xPortStartScheduler+0xdc>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a0c      	ldr	r2, [pc, #48]	@ (8006634 <xPortStartScheduler+0xdc>)
 8006602:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006606:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006608:	f000 f8b8 	bl	800677c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800660c:	4b0a      	ldr	r3, [pc, #40]	@ (8006638 <xPortStartScheduler+0xe0>)
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006612:	f7ff ff91 	bl	8006538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006616:	f7ff f89d 	bl	8005754 <vTaskSwitchContext>
	prvTaskExitError();
 800661a:	f7ff ff49 	bl	80064b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	e000e400 	.word	0xe000e400
 800662c:	200018b8 	.word	0x200018b8
 8006630:	200018bc 	.word	0x200018bc
 8006634:	e000ed20 	.word	0xe000ed20
 8006638:	2000000c 	.word	0x2000000c

0800663c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	607b      	str	r3, [r7, #4]
}
 8006654:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006656:	4b0f      	ldr	r3, [pc, #60]	@ (8006694 <vPortEnterCritical+0x58>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3301      	adds	r3, #1
 800665c:	4a0d      	ldr	r2, [pc, #52]	@ (8006694 <vPortEnterCritical+0x58>)
 800665e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006660:	4b0c      	ldr	r3, [pc, #48]	@ (8006694 <vPortEnterCritical+0x58>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d110      	bne.n	800668a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006668:	4b0b      	ldr	r3, [pc, #44]	@ (8006698 <vPortEnterCritical+0x5c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <vPortEnterCritical+0x4e>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	603b      	str	r3, [r7, #0]
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	e7fd      	b.n	8006686 <vPortEnterCritical+0x4a>
	}
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr
 8006694:	2000000c 	.word	0x2000000c
 8006698:	e000ed04 	.word	0xe000ed04

0800669c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066a2:	4b12      	ldr	r3, [pc, #72]	@ (80066ec <vPortExitCritical+0x50>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10b      	bne.n	80066c2 <vPortExitCritical+0x26>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	607b      	str	r3, [r7, #4]
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	e7fd      	b.n	80066be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066c2:	4b0a      	ldr	r3, [pc, #40]	@ (80066ec <vPortExitCritical+0x50>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	4a08      	ldr	r2, [pc, #32]	@ (80066ec <vPortExitCritical+0x50>)
 80066ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066cc:	4b07      	ldr	r3, [pc, #28]	@ (80066ec <vPortExitCritical+0x50>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d105      	bne.n	80066e0 <vPortExitCritical+0x44>
 80066d4:	2300      	movs	r3, #0
 80066d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	f383 8811 	msr	BASEPRI, r3
}
 80066de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	2000000c 	.word	0x2000000c

080066f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066f0:	f3ef 8009 	mrs	r0, PSP
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006730 <pxCurrentTCBConst>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006700:	6010      	str	r0, [r2, #0]
 8006702:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006706:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800670a:	f380 8811 	msr	BASEPRI, r0
 800670e:	f7ff f821 	bl	8005754 <vTaskSwitchContext>
 8006712:	f04f 0000 	mov.w	r0, #0
 8006716:	f380 8811 	msr	BASEPRI, r0
 800671a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800671e:	6819      	ldr	r1, [r3, #0]
 8006720:	6808      	ldr	r0, [r1, #0]
 8006722:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006726:	f380 8809 	msr	PSP, r0
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	4770      	bx	lr

08006730 <pxCurrentTCBConst>:
 8006730:	2000128c 	.word	0x2000128c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop

08006738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	607b      	str	r3, [r7, #4]
}
 8006750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006752:	f7fe ff3f 	bl	80055d4 <xTaskIncrementTick>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800675c:	4b06      	ldr	r3, [pc, #24]	@ (8006778 <xPortSysTickHandler+0x40>)
 800675e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	2300      	movs	r3, #0
 8006766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f383 8811 	msr	BASEPRI, r3
}
 800676e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	e000ed04 	.word	0xe000ed04

0800677c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006780:	4b0a      	ldr	r3, [pc, #40]	@ (80067ac <vPortSetupTimerInterrupt+0x30>)
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006786:	4b0a      	ldr	r3, [pc, #40]	@ (80067b0 <vPortSetupTimerInterrupt+0x34>)
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800678c:	4b09      	ldr	r3, [pc, #36]	@ (80067b4 <vPortSetupTimerInterrupt+0x38>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a09      	ldr	r2, [pc, #36]	@ (80067b8 <vPortSetupTimerInterrupt+0x3c>)
 8006792:	fba2 2303 	umull	r2, r3, r2, r3
 8006796:	099b      	lsrs	r3, r3, #6
 8006798:	4a08      	ldr	r2, [pc, #32]	@ (80067bc <vPortSetupTimerInterrupt+0x40>)
 800679a:	3b01      	subs	r3, #1
 800679c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800679e:	4b03      	ldr	r3, [pc, #12]	@ (80067ac <vPortSetupTimerInterrupt+0x30>)
 80067a0:	2207      	movs	r2, #7
 80067a2:	601a      	str	r2, [r3, #0]
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr
 80067ac:	e000e010 	.word	0xe000e010
 80067b0:	e000e018 	.word	0xe000e018
 80067b4:	20000000 	.word	0x20000000
 80067b8:	10624dd3 	.word	0x10624dd3
 80067bc:	e000e014 	.word	0xe000e014

080067c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067c6:	f3ef 8305 	mrs	r3, IPSR
 80067ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b0f      	cmp	r3, #15
 80067d0:	d915      	bls.n	80067fe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067d2:	4a17      	ldr	r2, [pc, #92]	@ (8006830 <vPortValidateInterruptPriority+0x70>)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067dc:	4b15      	ldr	r3, [pc, #84]	@ (8006834 <vPortValidateInterruptPriority+0x74>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	7afa      	ldrb	r2, [r7, #11]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d20b      	bcs.n	80067fe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	607b      	str	r3, [r7, #4]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006838 <vPortValidateInterruptPriority+0x78>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006806:	4b0d      	ldr	r3, [pc, #52]	@ (800683c <vPortValidateInterruptPriority+0x7c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d90b      	bls.n	8006826 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	603b      	str	r3, [r7, #0]
}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	e7fd      	b.n	8006822 <vPortValidateInterruptPriority+0x62>
	}
 8006826:	bf00      	nop
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr
 8006830:	e000e3f0 	.word	0xe000e3f0
 8006834:	200018b8 	.word	0x200018b8
 8006838:	e000ed0c 	.word	0xe000ed0c
 800683c:	200018bc 	.word	0x200018bc

08006840 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	@ 0x28
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006848:	2300      	movs	r3, #0
 800684a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800684c:	f7fe fe08 	bl	8005460 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006850:	4b5a      	ldr	r3, [pc, #360]	@ (80069bc <pvPortMalloc+0x17c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006858:	f000 f916 	bl	8006a88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800685c:	4b58      	ldr	r3, [pc, #352]	@ (80069c0 <pvPortMalloc+0x180>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4013      	ands	r3, r2
 8006864:	2b00      	cmp	r3, #0
 8006866:	f040 8090 	bne.w	800698a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d01e      	beq.n	80068ae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006870:	2208      	movs	r2, #8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4413      	add	r3, r2
 8006876:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	2b00      	cmp	r3, #0
 8006880:	d015      	beq.n	80068ae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f023 0307 	bic.w	r3, r3, #7
 8006888:	3308      	adds	r3, #8
 800688a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <pvPortMalloc+0x6e>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	617b      	str	r3, [r7, #20]
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	e7fd      	b.n	80068aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d06a      	beq.n	800698a <pvPortMalloc+0x14a>
 80068b4:	4b43      	ldr	r3, [pc, #268]	@ (80069c4 <pvPortMalloc+0x184>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d865      	bhi.n	800698a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068be:	4b42      	ldr	r3, [pc, #264]	@ (80069c8 <pvPortMalloc+0x188>)
 80068c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068c2:	4b41      	ldr	r3, [pc, #260]	@ (80069c8 <pvPortMalloc+0x188>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068c8:	e004      	b.n	80068d4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d903      	bls.n	80068e6 <pvPortMalloc+0xa6>
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f1      	bne.n	80068ca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068e6:	4b35      	ldr	r3, [pc, #212]	@ (80069bc <pvPortMalloc+0x17c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d04c      	beq.n	800698a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2208      	movs	r2, #8
 80068f6:	4413      	add	r3, r2
 80068f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	1ad2      	subs	r2, r2, r3
 800690a:	2308      	movs	r3, #8
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	429a      	cmp	r2, r3
 8006910:	d920      	bls.n	8006954 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4413      	add	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <pvPortMalloc+0xfc>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	613b      	str	r3, [r7, #16]
}
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	e7fd      	b.n	8006938 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	1ad2      	subs	r2, r2, r3
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800694e:	69b8      	ldr	r0, [r7, #24]
 8006950:	f000 f8fc 	bl	8006b4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006954:	4b1b      	ldr	r3, [pc, #108]	@ (80069c4 <pvPortMalloc+0x184>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	4a19      	ldr	r2, [pc, #100]	@ (80069c4 <pvPortMalloc+0x184>)
 8006960:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006962:	4b18      	ldr	r3, [pc, #96]	@ (80069c4 <pvPortMalloc+0x184>)
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	4b19      	ldr	r3, [pc, #100]	@ (80069cc <pvPortMalloc+0x18c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d203      	bcs.n	8006976 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800696e:	4b15      	ldr	r3, [pc, #84]	@ (80069c4 <pvPortMalloc+0x184>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a16      	ldr	r2, [pc, #88]	@ (80069cc <pvPortMalloc+0x18c>)
 8006974:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	4b11      	ldr	r3, [pc, #68]	@ (80069c0 <pvPortMalloc+0x180>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	431a      	orrs	r2, r3
 8006980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006982:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800698a:	f7fe fd77 	bl	800547c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <pvPortMalloc+0x170>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	60fb      	str	r3, [r7, #12]
}
 80069aa:	bf00      	nop
 80069ac:	bf00      	nop
 80069ae:	e7fd      	b.n	80069ac <pvPortMalloc+0x16c>
	return pvReturn;
 80069b0:	69fb      	ldr	r3, [r7, #28]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3728      	adds	r7, #40	@ 0x28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	200024c8 	.word	0x200024c8
 80069c0:	200024d4 	.word	0x200024d4
 80069c4:	200024cc 	.word	0x200024cc
 80069c8:	200024c0 	.word	0x200024c0
 80069cc:	200024d0 	.word	0x200024d0

080069d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d04a      	beq.n	8006a78 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069e2:	2308      	movs	r3, #8
 80069e4:	425b      	negs	r3, r3
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4413      	add	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	4b22      	ldr	r3, [pc, #136]	@ (8006a80 <vPortFree+0xb0>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10b      	bne.n	8006a16 <vPortFree+0x46>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60fb      	str	r3, [r7, #12]
}
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
 8006a14:	e7fd      	b.n	8006a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00b      	beq.n	8006a36 <vPortFree+0x66>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	60bb      	str	r3, [r7, #8]
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	e7fd      	b.n	8006a32 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	4b11      	ldr	r3, [pc, #68]	@ (8006a80 <vPortFree+0xb0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d019      	beq.n	8006a78 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d115      	bne.n	8006a78 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	4b0b      	ldr	r3, [pc, #44]	@ (8006a80 <vPortFree+0xb0>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	43db      	mvns	r3, r3
 8006a56:	401a      	ands	r2, r3
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a5c:	f7fe fd00 	bl	8005460 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	4b07      	ldr	r3, [pc, #28]	@ (8006a84 <vPortFree+0xb4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4413      	add	r3, r2
 8006a6a:	4a06      	ldr	r2, [pc, #24]	@ (8006a84 <vPortFree+0xb4>)
 8006a6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a6e:	6938      	ldr	r0, [r7, #16]
 8006a70:	f000 f86c 	bl	8006b4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a74:	f7fe fd02 	bl	800547c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a78:	bf00      	nop
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	200024d4 	.word	0x200024d4
 8006a84:	200024cc 	.word	0x200024cc

08006a88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006a92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a94:	4b27      	ldr	r3, [pc, #156]	@ (8006b34 <prvHeapInit+0xac>)
 8006a96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00c      	beq.n	8006abc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3307      	adds	r3, #7
 8006aa6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0307 	bic.w	r3, r3, #7
 8006aae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b34 <prvHeapInit+0xac>)
 8006ab8:	4413      	add	r3, r2
 8006aba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b38 <prvHeapInit+0xb0>)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8006b38 <prvHeapInit+0xb0>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1a9b      	subs	r3, r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0307 	bic.w	r3, r3, #7
 8006ae2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4a15      	ldr	r2, [pc, #84]	@ (8006b3c <prvHeapInit+0xb4>)
 8006ae8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006aea:	4b14      	ldr	r3, [pc, #80]	@ (8006b3c <prvHeapInit+0xb4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2200      	movs	r2, #0
 8006af0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006af2:	4b12      	ldr	r3, [pc, #72]	@ (8006b3c <prvHeapInit+0xb4>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	1ad2      	subs	r2, r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b08:	4b0c      	ldr	r3, [pc, #48]	@ (8006b3c <prvHeapInit+0xb4>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	4a0a      	ldr	r2, [pc, #40]	@ (8006b40 <prvHeapInit+0xb8>)
 8006b16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	4a09      	ldr	r2, [pc, #36]	@ (8006b44 <prvHeapInit+0xbc>)
 8006b1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b20:	4b09      	ldr	r3, [pc, #36]	@ (8006b48 <prvHeapInit+0xc0>)
 8006b22:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006b26:	601a      	str	r2, [r3, #0]
}
 8006b28:	bf00      	nop
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	200018c0 	.word	0x200018c0
 8006b38:	200024c0 	.word	0x200024c0
 8006b3c:	200024c8 	.word	0x200024c8
 8006b40:	200024d0 	.word	0x200024d0
 8006b44:	200024cc 	.word	0x200024cc
 8006b48:	200024d4 	.word	0x200024d4

08006b4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b54:	4b27      	ldr	r3, [pc, #156]	@ (8006bf4 <prvInsertBlockIntoFreeList+0xa8>)
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	e002      	b.n	8006b60 <prvInsertBlockIntoFreeList+0x14>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d8f7      	bhi.n	8006b5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	4413      	add	r3, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d108      	bne.n	8006b8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	441a      	add	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	441a      	add	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d118      	bne.n	8006bd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b14      	ldr	r3, [pc, #80]	@ (8006bf8 <prvInsertBlockIntoFreeList+0xac>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d00d      	beq.n	8006bca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	441a      	add	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	e008      	b.n	8006bdc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bca:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf8 <prvInsertBlockIntoFreeList+0xac>)
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e003      	b.n	8006bdc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d002      	beq.n	8006bea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr
 8006bf4:	200024c0 	.word	0x200024c0
 8006bf8:	200024c8 	.word	0x200024c8

08006bfc <__cvt>:
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c02:	461d      	mov	r5, r3
 8006c04:	bfbb      	ittet	lt
 8006c06:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006c0a:	461d      	movlt	r5, r3
 8006c0c:	2300      	movge	r3, #0
 8006c0e:	232d      	movlt	r3, #45	@ 0x2d
 8006c10:	b088      	sub	sp, #32
 8006c12:	4614      	mov	r4, r2
 8006c14:	bfb8      	it	lt
 8006c16:	4614      	movlt	r4, r2
 8006c18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c1a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006c1c:	7013      	strb	r3, [r2, #0]
 8006c1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c20:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006c24:	f023 0820 	bic.w	r8, r3, #32
 8006c28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c2c:	d005      	beq.n	8006c3a <__cvt+0x3e>
 8006c2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006c32:	d100      	bne.n	8006c36 <__cvt+0x3a>
 8006c34:	3601      	adds	r6, #1
 8006c36:	2302      	movs	r3, #2
 8006c38:	e000      	b.n	8006c3c <__cvt+0x40>
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	aa07      	add	r2, sp, #28
 8006c3e:	9204      	str	r2, [sp, #16]
 8006c40:	aa06      	add	r2, sp, #24
 8006c42:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006c46:	e9cd 3600 	strd	r3, r6, [sp]
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	f000 fe9f 	bl	8007990 <_dtoa_r>
 8006c52:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006c56:	4607      	mov	r7, r0
 8006c58:	d119      	bne.n	8006c8e <__cvt+0x92>
 8006c5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c5c:	07db      	lsls	r3, r3, #31
 8006c5e:	d50e      	bpl.n	8006c7e <__cvt+0x82>
 8006c60:	eb00 0906 	add.w	r9, r0, r6
 8006c64:	2200      	movs	r2, #0
 8006c66:	2300      	movs	r3, #0
 8006c68:	4620      	mov	r0, r4
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	f7f9 fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 8006c70:	b108      	cbz	r0, 8006c76 <__cvt+0x7a>
 8006c72:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c76:	2230      	movs	r2, #48	@ 0x30
 8006c78:	9b07      	ldr	r3, [sp, #28]
 8006c7a:	454b      	cmp	r3, r9
 8006c7c:	d31e      	bcc.n	8006cbc <__cvt+0xc0>
 8006c7e:	4638      	mov	r0, r7
 8006c80:	9b07      	ldr	r3, [sp, #28]
 8006c82:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006c84:	1bdb      	subs	r3, r3, r7
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	b008      	add	sp, #32
 8006c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c92:	eb00 0906 	add.w	r9, r0, r6
 8006c96:	d1e5      	bne.n	8006c64 <__cvt+0x68>
 8006c98:	7803      	ldrb	r3, [r0, #0]
 8006c9a:	2b30      	cmp	r3, #48	@ 0x30
 8006c9c:	d10a      	bne.n	8006cb4 <__cvt+0xb8>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f7f9 fe7f 	bl	80009a8 <__aeabi_dcmpeq>
 8006caa:	b918      	cbnz	r0, 8006cb4 <__cvt+0xb8>
 8006cac:	f1c6 0601 	rsb	r6, r6, #1
 8006cb0:	f8ca 6000 	str.w	r6, [sl]
 8006cb4:	f8da 3000 	ldr.w	r3, [sl]
 8006cb8:	4499      	add	r9, r3
 8006cba:	e7d3      	b.n	8006c64 <__cvt+0x68>
 8006cbc:	1c59      	adds	r1, r3, #1
 8006cbe:	9107      	str	r1, [sp, #28]
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	e7d9      	b.n	8006c78 <__cvt+0x7c>

08006cc4 <__exponent>:
 8006cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cc6:	2900      	cmp	r1, #0
 8006cc8:	bfb6      	itet	lt
 8006cca:	232d      	movlt	r3, #45	@ 0x2d
 8006ccc:	232b      	movge	r3, #43	@ 0x2b
 8006cce:	4249      	neglt	r1, r1
 8006cd0:	2909      	cmp	r1, #9
 8006cd2:	7002      	strb	r2, [r0, #0]
 8006cd4:	7043      	strb	r3, [r0, #1]
 8006cd6:	dd29      	ble.n	8006d2c <__exponent+0x68>
 8006cd8:	f10d 0307 	add.w	r3, sp, #7
 8006cdc:	461d      	mov	r5, r3
 8006cde:	270a      	movs	r7, #10
 8006ce0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	fb07 1416 	mls	r4, r7, r6, r1
 8006cea:	3430      	adds	r4, #48	@ 0x30
 8006cec:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	2c63      	cmp	r4, #99	@ 0x63
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006cfa:	dcf1      	bgt.n	8006ce0 <__exponent+0x1c>
 8006cfc:	3130      	adds	r1, #48	@ 0x30
 8006cfe:	1e94      	subs	r4, r2, #2
 8006d00:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d04:	4623      	mov	r3, r4
 8006d06:	1c41      	adds	r1, r0, #1
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	d30a      	bcc.n	8006d22 <__exponent+0x5e>
 8006d0c:	f10d 0309 	add.w	r3, sp, #9
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	42ac      	cmp	r4, r5
 8006d14:	bf88      	it	hi
 8006d16:	2300      	movhi	r3, #0
 8006d18:	3302      	adds	r3, #2
 8006d1a:	4403      	add	r3, r0
 8006d1c:	1a18      	subs	r0, r3, r0
 8006d1e:	b003      	add	sp, #12
 8006d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d22:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006d26:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006d2a:	e7ed      	b.n	8006d08 <__exponent+0x44>
 8006d2c:	2330      	movs	r3, #48	@ 0x30
 8006d2e:	3130      	adds	r1, #48	@ 0x30
 8006d30:	7083      	strb	r3, [r0, #2]
 8006d32:	70c1      	strb	r1, [r0, #3]
 8006d34:	1d03      	adds	r3, r0, #4
 8006d36:	e7f1      	b.n	8006d1c <__exponent+0x58>

08006d38 <_printf_float>:
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	b091      	sub	sp, #68	@ 0x44
 8006d3e:	460c      	mov	r4, r1
 8006d40:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006d44:	4616      	mov	r6, r2
 8006d46:	461f      	mov	r7, r3
 8006d48:	4605      	mov	r5, r0
 8006d4a:	f000 fcf5 	bl	8007738 <_localeconv_r>
 8006d4e:	6803      	ldr	r3, [r0, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	9308      	str	r3, [sp, #32]
 8006d54:	f7f9 f9fc 	bl	8000150 <strlen>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d60:	9009      	str	r0, [sp, #36]	@ 0x24
 8006d62:	3307      	adds	r3, #7
 8006d64:	f023 0307 	bic.w	r3, r3, #7
 8006d68:	f103 0208 	add.w	r2, r3, #8
 8006d6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d70:	f8d4 b000 	ldr.w	fp, [r4]
 8006d74:	f8c8 2000 	str.w	r2, [r8]
 8006d78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006d80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d82:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006d86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006d92:	4b9c      	ldr	r3, [pc, #624]	@ (8007004 <_printf_float+0x2cc>)
 8006d94:	f7f9 fe3a 	bl	8000a0c <__aeabi_dcmpun>
 8006d98:	bb70      	cbnz	r0, 8006df8 <_printf_float+0xc0>
 8006d9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006da2:	4b98      	ldr	r3, [pc, #608]	@ (8007004 <_printf_float+0x2cc>)
 8006da4:	f7f9 fe14 	bl	80009d0 <__aeabi_dcmple>
 8006da8:	bb30      	cbnz	r0, 8006df8 <_printf_float+0xc0>
 8006daa:	2200      	movs	r2, #0
 8006dac:	2300      	movs	r3, #0
 8006dae:	4640      	mov	r0, r8
 8006db0:	4649      	mov	r1, r9
 8006db2:	f7f9 fe03 	bl	80009bc <__aeabi_dcmplt>
 8006db6:	b110      	cbz	r0, 8006dbe <_printf_float+0x86>
 8006db8:	232d      	movs	r3, #45	@ 0x2d
 8006dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dbe:	4a92      	ldr	r2, [pc, #584]	@ (8007008 <_printf_float+0x2d0>)
 8006dc0:	4b92      	ldr	r3, [pc, #584]	@ (800700c <_printf_float+0x2d4>)
 8006dc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006dc6:	bf94      	ite	ls
 8006dc8:	4690      	movls	r8, r2
 8006dca:	4698      	movhi	r8, r3
 8006dcc:	2303      	movs	r3, #3
 8006dce:	f04f 0900 	mov.w	r9, #0
 8006dd2:	6123      	str	r3, [r4, #16]
 8006dd4:	f02b 0304 	bic.w	r3, fp, #4
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	4633      	mov	r3, r6
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4628      	mov	r0, r5
 8006de0:	9700      	str	r7, [sp, #0]
 8006de2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006de4:	f000 f9d4 	bl	8007190 <_printf_common>
 8006de8:	3001      	adds	r0, #1
 8006dea:	f040 8090 	bne.w	8006f0e <_printf_float+0x1d6>
 8006dee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006df2:	b011      	add	sp, #68	@ 0x44
 8006df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df8:	4642      	mov	r2, r8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	4649      	mov	r1, r9
 8006e00:	f7f9 fe04 	bl	8000a0c <__aeabi_dcmpun>
 8006e04:	b148      	cbz	r0, 8006e1a <_printf_float+0xe2>
 8006e06:	464b      	mov	r3, r9
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	bfb8      	it	lt
 8006e0c:	232d      	movlt	r3, #45	@ 0x2d
 8006e0e:	4a80      	ldr	r2, [pc, #512]	@ (8007010 <_printf_float+0x2d8>)
 8006e10:	bfb8      	it	lt
 8006e12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e16:	4b7f      	ldr	r3, [pc, #508]	@ (8007014 <_printf_float+0x2dc>)
 8006e18:	e7d3      	b.n	8006dc2 <_printf_float+0x8a>
 8006e1a:	6863      	ldr	r3, [r4, #4]
 8006e1c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	d13f      	bne.n	8006ea4 <_printf_float+0x16c>
 8006e24:	2306      	movs	r3, #6
 8006e26:	6063      	str	r3, [r4, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006e2e:	6023      	str	r3, [r4, #0]
 8006e30:	9206      	str	r2, [sp, #24]
 8006e32:	aa0e      	add	r2, sp, #56	@ 0x38
 8006e34:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006e38:	aa0d      	add	r2, sp, #52	@ 0x34
 8006e3a:	9203      	str	r2, [sp, #12]
 8006e3c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006e40:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006e44:	6863      	ldr	r3, [r4, #4]
 8006e46:	4642      	mov	r2, r8
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	910a      	str	r1, [sp, #40]	@ 0x28
 8006e50:	f7ff fed4 	bl	8006bfc <__cvt>
 8006e54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e56:	4680      	mov	r8, r0
 8006e58:	2947      	cmp	r1, #71	@ 0x47
 8006e5a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006e5c:	d128      	bne.n	8006eb0 <_printf_float+0x178>
 8006e5e:	1cc8      	adds	r0, r1, #3
 8006e60:	db02      	blt.n	8006e68 <_printf_float+0x130>
 8006e62:	6863      	ldr	r3, [r4, #4]
 8006e64:	4299      	cmp	r1, r3
 8006e66:	dd40      	ble.n	8006eea <_printf_float+0x1b2>
 8006e68:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e6c:	fa5f fa8a 	uxtb.w	sl, sl
 8006e70:	4652      	mov	r2, sl
 8006e72:	3901      	subs	r1, #1
 8006e74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e78:	910d      	str	r1, [sp, #52]	@ 0x34
 8006e7a:	f7ff ff23 	bl	8006cc4 <__exponent>
 8006e7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e80:	4681      	mov	r9, r0
 8006e82:	1813      	adds	r3, r2, r0
 8006e84:	2a01      	cmp	r2, #1
 8006e86:	6123      	str	r3, [r4, #16]
 8006e88:	dc02      	bgt.n	8006e90 <_printf_float+0x158>
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	07d2      	lsls	r2, r2, #31
 8006e8e:	d501      	bpl.n	8006e94 <_printf_float+0x15c>
 8006e90:	3301      	adds	r3, #1
 8006e92:	6123      	str	r3, [r4, #16]
 8006e94:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d09e      	beq.n	8006dda <_printf_float+0xa2>
 8006e9c:	232d      	movs	r3, #45	@ 0x2d
 8006e9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ea2:	e79a      	b.n	8006dda <_printf_float+0xa2>
 8006ea4:	2947      	cmp	r1, #71	@ 0x47
 8006ea6:	d1bf      	bne.n	8006e28 <_printf_float+0xf0>
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1bd      	bne.n	8006e28 <_printf_float+0xf0>
 8006eac:	2301      	movs	r3, #1
 8006eae:	e7ba      	b.n	8006e26 <_printf_float+0xee>
 8006eb0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006eb4:	d9dc      	bls.n	8006e70 <_printf_float+0x138>
 8006eb6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006eba:	d118      	bne.n	8006eee <_printf_float+0x1b6>
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	6863      	ldr	r3, [r4, #4]
 8006ec0:	dd0b      	ble.n	8006eda <_printf_float+0x1a2>
 8006ec2:	6121      	str	r1, [r4, #16]
 8006ec4:	b913      	cbnz	r3, 8006ecc <_printf_float+0x194>
 8006ec6:	6822      	ldr	r2, [r4, #0]
 8006ec8:	07d0      	lsls	r0, r2, #31
 8006eca:	d502      	bpl.n	8006ed2 <_printf_float+0x19a>
 8006ecc:	3301      	adds	r3, #1
 8006ece:	440b      	add	r3, r1
 8006ed0:	6123      	str	r3, [r4, #16]
 8006ed2:	f04f 0900 	mov.w	r9, #0
 8006ed6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ed8:	e7dc      	b.n	8006e94 <_printf_float+0x15c>
 8006eda:	b913      	cbnz	r3, 8006ee2 <_printf_float+0x1aa>
 8006edc:	6822      	ldr	r2, [r4, #0]
 8006ede:	07d2      	lsls	r2, r2, #31
 8006ee0:	d501      	bpl.n	8006ee6 <_printf_float+0x1ae>
 8006ee2:	3302      	adds	r3, #2
 8006ee4:	e7f4      	b.n	8006ed0 <_printf_float+0x198>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e7f2      	b.n	8006ed0 <_printf_float+0x198>
 8006eea:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006eee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ef0:	4299      	cmp	r1, r3
 8006ef2:	db05      	blt.n	8006f00 <_printf_float+0x1c8>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	6121      	str	r1, [r4, #16]
 8006ef8:	07d8      	lsls	r0, r3, #31
 8006efa:	d5ea      	bpl.n	8006ed2 <_printf_float+0x19a>
 8006efc:	1c4b      	adds	r3, r1, #1
 8006efe:	e7e7      	b.n	8006ed0 <_printf_float+0x198>
 8006f00:	2900      	cmp	r1, #0
 8006f02:	bfcc      	ite	gt
 8006f04:	2201      	movgt	r2, #1
 8006f06:	f1c1 0202 	rsble	r2, r1, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	e7e0      	b.n	8006ed0 <_printf_float+0x198>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	055a      	lsls	r2, r3, #21
 8006f12:	d407      	bmi.n	8006f24 <_printf_float+0x1ec>
 8006f14:	6923      	ldr	r3, [r4, #16]
 8006f16:	4642      	mov	r2, r8
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b8      	blx	r7
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d12b      	bne.n	8006f7a <_printf_float+0x242>
 8006f22:	e764      	b.n	8006dee <_printf_float+0xb6>
 8006f24:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f28:	f240 80dc 	bls.w	80070e4 <_printf_float+0x3ac>
 8006f2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f30:	2200      	movs	r2, #0
 8006f32:	2300      	movs	r3, #0
 8006f34:	f7f9 fd38 	bl	80009a8 <__aeabi_dcmpeq>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d033      	beq.n	8006fa4 <_printf_float+0x26c>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	4631      	mov	r1, r6
 8006f40:	4628      	mov	r0, r5
 8006f42:	4a35      	ldr	r2, [pc, #212]	@ (8007018 <_printf_float+0x2e0>)
 8006f44:	47b8      	blx	r7
 8006f46:	3001      	adds	r0, #1
 8006f48:	f43f af51 	beq.w	8006dee <_printf_float+0xb6>
 8006f4c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006f50:	4543      	cmp	r3, r8
 8006f52:	db02      	blt.n	8006f5a <_printf_float+0x222>
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	07d8      	lsls	r0, r3, #31
 8006f58:	d50f      	bpl.n	8006f7a <_printf_float+0x242>
 8006f5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4628      	mov	r0, r5
 8006f62:	47b8      	blx	r7
 8006f64:	3001      	adds	r0, #1
 8006f66:	f43f af42 	beq.w	8006dee <_printf_float+0xb6>
 8006f6a:	f04f 0900 	mov.w	r9, #0
 8006f6e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006f72:	f104 0a1a 	add.w	sl, r4, #26
 8006f76:	45c8      	cmp	r8, r9
 8006f78:	dc09      	bgt.n	8006f8e <_printf_float+0x256>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	079b      	lsls	r3, r3, #30
 8006f7e:	f100 8102 	bmi.w	8007186 <_printf_float+0x44e>
 8006f82:	68e0      	ldr	r0, [r4, #12]
 8006f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f86:	4298      	cmp	r0, r3
 8006f88:	bfb8      	it	lt
 8006f8a:	4618      	movlt	r0, r3
 8006f8c:	e731      	b.n	8006df2 <_printf_float+0xba>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4652      	mov	r2, sl
 8006f92:	4631      	mov	r1, r6
 8006f94:	4628      	mov	r0, r5
 8006f96:	47b8      	blx	r7
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f43f af28 	beq.w	8006dee <_printf_float+0xb6>
 8006f9e:	f109 0901 	add.w	r9, r9, #1
 8006fa2:	e7e8      	b.n	8006f76 <_printf_float+0x23e>
 8006fa4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	dc38      	bgt.n	800701c <_printf_float+0x2e4>
 8006faa:	2301      	movs	r3, #1
 8006fac:	4631      	mov	r1, r6
 8006fae:	4628      	mov	r0, r5
 8006fb0:	4a19      	ldr	r2, [pc, #100]	@ (8007018 <_printf_float+0x2e0>)
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f43f af1a 	beq.w	8006dee <_printf_float+0xb6>
 8006fba:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006fbe:	ea59 0303 	orrs.w	r3, r9, r3
 8006fc2:	d102      	bne.n	8006fca <_printf_float+0x292>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	07d9      	lsls	r1, r3, #31
 8006fc8:	d5d7      	bpl.n	8006f7a <_printf_float+0x242>
 8006fca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	47b8      	blx	r7
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	f43f af0a 	beq.w	8006dee <_printf_float+0xb6>
 8006fda:	f04f 0a00 	mov.w	sl, #0
 8006fde:	f104 0b1a 	add.w	fp, r4, #26
 8006fe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fe4:	425b      	negs	r3, r3
 8006fe6:	4553      	cmp	r3, sl
 8006fe8:	dc01      	bgt.n	8006fee <_printf_float+0x2b6>
 8006fea:	464b      	mov	r3, r9
 8006fec:	e793      	b.n	8006f16 <_printf_float+0x1de>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	465a      	mov	r2, fp
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	47b8      	blx	r7
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f43f aef8 	beq.w	8006dee <_printf_float+0xb6>
 8006ffe:	f10a 0a01 	add.w	sl, sl, #1
 8007002:	e7ee      	b.n	8006fe2 <_printf_float+0x2aa>
 8007004:	7fefffff 	.word	0x7fefffff
 8007008:	08009a76 	.word	0x08009a76
 800700c:	08009a7a 	.word	0x08009a7a
 8007010:	08009a7e 	.word	0x08009a7e
 8007014:	08009a82 	.word	0x08009a82
 8007018:	08009a86 	.word	0x08009a86
 800701c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800701e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007022:	4553      	cmp	r3, sl
 8007024:	bfa8      	it	ge
 8007026:	4653      	movge	r3, sl
 8007028:	2b00      	cmp	r3, #0
 800702a:	4699      	mov	r9, r3
 800702c:	dc36      	bgt.n	800709c <_printf_float+0x364>
 800702e:	f04f 0b00 	mov.w	fp, #0
 8007032:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007036:	f104 021a 	add.w	r2, r4, #26
 800703a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800703c:	930a      	str	r3, [sp, #40]	@ 0x28
 800703e:	eba3 0309 	sub.w	r3, r3, r9
 8007042:	455b      	cmp	r3, fp
 8007044:	dc31      	bgt.n	80070aa <_printf_float+0x372>
 8007046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007048:	459a      	cmp	sl, r3
 800704a:	dc3a      	bgt.n	80070c2 <_printf_float+0x38a>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	07da      	lsls	r2, r3, #31
 8007050:	d437      	bmi.n	80070c2 <_printf_float+0x38a>
 8007052:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007054:	ebaa 0903 	sub.w	r9, sl, r3
 8007058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800705a:	ebaa 0303 	sub.w	r3, sl, r3
 800705e:	4599      	cmp	r9, r3
 8007060:	bfa8      	it	ge
 8007062:	4699      	movge	r9, r3
 8007064:	f1b9 0f00 	cmp.w	r9, #0
 8007068:	dc33      	bgt.n	80070d2 <_printf_float+0x39a>
 800706a:	f04f 0800 	mov.w	r8, #0
 800706e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007072:	f104 0b1a 	add.w	fp, r4, #26
 8007076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007078:	ebaa 0303 	sub.w	r3, sl, r3
 800707c:	eba3 0309 	sub.w	r3, r3, r9
 8007080:	4543      	cmp	r3, r8
 8007082:	f77f af7a 	ble.w	8006f7a <_printf_float+0x242>
 8007086:	2301      	movs	r3, #1
 8007088:	465a      	mov	r2, fp
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	47b8      	blx	r7
 8007090:	3001      	adds	r0, #1
 8007092:	f43f aeac 	beq.w	8006dee <_printf_float+0xb6>
 8007096:	f108 0801 	add.w	r8, r8, #1
 800709a:	e7ec      	b.n	8007076 <_printf_float+0x33e>
 800709c:	4642      	mov	r2, r8
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b8      	blx	r7
 80070a4:	3001      	adds	r0, #1
 80070a6:	d1c2      	bne.n	800702e <_printf_float+0x2f6>
 80070a8:	e6a1      	b.n	8006dee <_printf_float+0xb6>
 80070aa:	2301      	movs	r3, #1
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	920a      	str	r2, [sp, #40]	@ 0x28
 80070b2:	47b8      	blx	r7
 80070b4:	3001      	adds	r0, #1
 80070b6:	f43f ae9a 	beq.w	8006dee <_printf_float+0xb6>
 80070ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070bc:	f10b 0b01 	add.w	fp, fp, #1
 80070c0:	e7bb      	b.n	800703a <_printf_float+0x302>
 80070c2:	4631      	mov	r1, r6
 80070c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b8      	blx	r7
 80070cc:	3001      	adds	r0, #1
 80070ce:	d1c0      	bne.n	8007052 <_printf_float+0x31a>
 80070d0:	e68d      	b.n	8006dee <_printf_float+0xb6>
 80070d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070d4:	464b      	mov	r3, r9
 80070d6:	4631      	mov	r1, r6
 80070d8:	4628      	mov	r0, r5
 80070da:	4442      	add	r2, r8
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	d1c3      	bne.n	800706a <_printf_float+0x332>
 80070e2:	e684      	b.n	8006dee <_printf_float+0xb6>
 80070e4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80070e8:	f1ba 0f01 	cmp.w	sl, #1
 80070ec:	dc01      	bgt.n	80070f2 <_printf_float+0x3ba>
 80070ee:	07db      	lsls	r3, r3, #31
 80070f0:	d536      	bpl.n	8007160 <_printf_float+0x428>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4642      	mov	r2, r8
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	f43f ae76 	beq.w	8006dee <_printf_float+0xb6>
 8007102:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007106:	4631      	mov	r1, r6
 8007108:	4628      	mov	r0, r5
 800710a:	47b8      	blx	r7
 800710c:	3001      	adds	r0, #1
 800710e:	f43f ae6e 	beq.w	8006dee <_printf_float+0xb6>
 8007112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007116:	2200      	movs	r2, #0
 8007118:	2300      	movs	r3, #0
 800711a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800711e:	f7f9 fc43 	bl	80009a8 <__aeabi_dcmpeq>
 8007122:	b9c0      	cbnz	r0, 8007156 <_printf_float+0x41e>
 8007124:	4653      	mov	r3, sl
 8007126:	f108 0201 	add.w	r2, r8, #1
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	d10c      	bne.n	800714e <_printf_float+0x416>
 8007134:	e65b      	b.n	8006dee <_printf_float+0xb6>
 8007136:	2301      	movs	r3, #1
 8007138:	465a      	mov	r2, fp
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	47b8      	blx	r7
 8007140:	3001      	adds	r0, #1
 8007142:	f43f ae54 	beq.w	8006dee <_printf_float+0xb6>
 8007146:	f108 0801 	add.w	r8, r8, #1
 800714a:	45d0      	cmp	r8, sl
 800714c:	dbf3      	blt.n	8007136 <_printf_float+0x3fe>
 800714e:	464b      	mov	r3, r9
 8007150:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007154:	e6e0      	b.n	8006f18 <_printf_float+0x1e0>
 8007156:	f04f 0800 	mov.w	r8, #0
 800715a:	f104 0b1a 	add.w	fp, r4, #26
 800715e:	e7f4      	b.n	800714a <_printf_float+0x412>
 8007160:	2301      	movs	r3, #1
 8007162:	4642      	mov	r2, r8
 8007164:	e7e1      	b.n	800712a <_printf_float+0x3f2>
 8007166:	2301      	movs	r3, #1
 8007168:	464a      	mov	r2, r9
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	47b8      	blx	r7
 8007170:	3001      	adds	r0, #1
 8007172:	f43f ae3c 	beq.w	8006dee <_printf_float+0xb6>
 8007176:	f108 0801 	add.w	r8, r8, #1
 800717a:	68e3      	ldr	r3, [r4, #12]
 800717c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800717e:	1a5b      	subs	r3, r3, r1
 8007180:	4543      	cmp	r3, r8
 8007182:	dcf0      	bgt.n	8007166 <_printf_float+0x42e>
 8007184:	e6fd      	b.n	8006f82 <_printf_float+0x24a>
 8007186:	f04f 0800 	mov.w	r8, #0
 800718a:	f104 0919 	add.w	r9, r4, #25
 800718e:	e7f4      	b.n	800717a <_printf_float+0x442>

08007190 <_printf_common>:
 8007190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	4616      	mov	r6, r2
 8007196:	4698      	mov	r8, r3
 8007198:	688a      	ldr	r2, [r1, #8]
 800719a:	690b      	ldr	r3, [r1, #16]
 800719c:	4607      	mov	r7, r0
 800719e:	4293      	cmp	r3, r2
 80071a0:	bfb8      	it	lt
 80071a2:	4613      	movlt	r3, r2
 80071a4:	6033      	str	r3, [r6, #0]
 80071a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071aa:	460c      	mov	r4, r1
 80071ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071b0:	b10a      	cbz	r2, 80071b6 <_printf_common+0x26>
 80071b2:	3301      	adds	r3, #1
 80071b4:	6033      	str	r3, [r6, #0]
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	0699      	lsls	r1, r3, #26
 80071ba:	bf42      	ittt	mi
 80071bc:	6833      	ldrmi	r3, [r6, #0]
 80071be:	3302      	addmi	r3, #2
 80071c0:	6033      	strmi	r3, [r6, #0]
 80071c2:	6825      	ldr	r5, [r4, #0]
 80071c4:	f015 0506 	ands.w	r5, r5, #6
 80071c8:	d106      	bne.n	80071d8 <_printf_common+0x48>
 80071ca:	f104 0a19 	add.w	sl, r4, #25
 80071ce:	68e3      	ldr	r3, [r4, #12]
 80071d0:	6832      	ldr	r2, [r6, #0]
 80071d2:	1a9b      	subs	r3, r3, r2
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	dc2b      	bgt.n	8007230 <_printf_common+0xa0>
 80071d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071dc:	6822      	ldr	r2, [r4, #0]
 80071de:	3b00      	subs	r3, #0
 80071e0:	bf18      	it	ne
 80071e2:	2301      	movne	r3, #1
 80071e4:	0692      	lsls	r2, r2, #26
 80071e6:	d430      	bmi.n	800724a <_printf_common+0xba>
 80071e8:	4641      	mov	r1, r8
 80071ea:	4638      	mov	r0, r7
 80071ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071f0:	47c8      	blx	r9
 80071f2:	3001      	adds	r0, #1
 80071f4:	d023      	beq.n	800723e <_printf_common+0xae>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	6922      	ldr	r2, [r4, #16]
 80071fa:	f003 0306 	and.w	r3, r3, #6
 80071fe:	2b04      	cmp	r3, #4
 8007200:	bf14      	ite	ne
 8007202:	2500      	movne	r5, #0
 8007204:	6833      	ldreq	r3, [r6, #0]
 8007206:	f04f 0600 	mov.w	r6, #0
 800720a:	bf08      	it	eq
 800720c:	68e5      	ldreq	r5, [r4, #12]
 800720e:	f104 041a 	add.w	r4, r4, #26
 8007212:	bf08      	it	eq
 8007214:	1aed      	subeq	r5, r5, r3
 8007216:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800721a:	bf08      	it	eq
 800721c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007220:	4293      	cmp	r3, r2
 8007222:	bfc4      	itt	gt
 8007224:	1a9b      	subgt	r3, r3, r2
 8007226:	18ed      	addgt	r5, r5, r3
 8007228:	42b5      	cmp	r5, r6
 800722a:	d11a      	bne.n	8007262 <_printf_common+0xd2>
 800722c:	2000      	movs	r0, #0
 800722e:	e008      	b.n	8007242 <_printf_common+0xb2>
 8007230:	2301      	movs	r3, #1
 8007232:	4652      	mov	r2, sl
 8007234:	4641      	mov	r1, r8
 8007236:	4638      	mov	r0, r7
 8007238:	47c8      	blx	r9
 800723a:	3001      	adds	r0, #1
 800723c:	d103      	bne.n	8007246 <_printf_common+0xb6>
 800723e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007246:	3501      	adds	r5, #1
 8007248:	e7c1      	b.n	80071ce <_printf_common+0x3e>
 800724a:	2030      	movs	r0, #48	@ 0x30
 800724c:	18e1      	adds	r1, r4, r3
 800724e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007258:	4422      	add	r2, r4
 800725a:	3302      	adds	r3, #2
 800725c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007260:	e7c2      	b.n	80071e8 <_printf_common+0x58>
 8007262:	2301      	movs	r3, #1
 8007264:	4622      	mov	r2, r4
 8007266:	4641      	mov	r1, r8
 8007268:	4638      	mov	r0, r7
 800726a:	47c8      	blx	r9
 800726c:	3001      	adds	r0, #1
 800726e:	d0e6      	beq.n	800723e <_printf_common+0xae>
 8007270:	3601      	adds	r6, #1
 8007272:	e7d9      	b.n	8007228 <_printf_common+0x98>

08007274 <_printf_i>:
 8007274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	7e0f      	ldrb	r7, [r1, #24]
 800727a:	4691      	mov	r9, r2
 800727c:	2f78      	cmp	r7, #120	@ 0x78
 800727e:	4680      	mov	r8, r0
 8007280:	460c      	mov	r4, r1
 8007282:	469a      	mov	sl, r3
 8007284:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007286:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800728a:	d807      	bhi.n	800729c <_printf_i+0x28>
 800728c:	2f62      	cmp	r7, #98	@ 0x62
 800728e:	d80a      	bhi.n	80072a6 <_printf_i+0x32>
 8007290:	2f00      	cmp	r7, #0
 8007292:	f000 80d3 	beq.w	800743c <_printf_i+0x1c8>
 8007296:	2f58      	cmp	r7, #88	@ 0x58
 8007298:	f000 80ba 	beq.w	8007410 <_printf_i+0x19c>
 800729c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072a4:	e03a      	b.n	800731c <_printf_i+0xa8>
 80072a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072aa:	2b15      	cmp	r3, #21
 80072ac:	d8f6      	bhi.n	800729c <_printf_i+0x28>
 80072ae:	a101      	add	r1, pc, #4	@ (adr r1, 80072b4 <_printf_i+0x40>)
 80072b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072b4:	0800730d 	.word	0x0800730d
 80072b8:	08007321 	.word	0x08007321
 80072bc:	0800729d 	.word	0x0800729d
 80072c0:	0800729d 	.word	0x0800729d
 80072c4:	0800729d 	.word	0x0800729d
 80072c8:	0800729d 	.word	0x0800729d
 80072cc:	08007321 	.word	0x08007321
 80072d0:	0800729d 	.word	0x0800729d
 80072d4:	0800729d 	.word	0x0800729d
 80072d8:	0800729d 	.word	0x0800729d
 80072dc:	0800729d 	.word	0x0800729d
 80072e0:	08007423 	.word	0x08007423
 80072e4:	0800734b 	.word	0x0800734b
 80072e8:	080073dd 	.word	0x080073dd
 80072ec:	0800729d 	.word	0x0800729d
 80072f0:	0800729d 	.word	0x0800729d
 80072f4:	08007445 	.word	0x08007445
 80072f8:	0800729d 	.word	0x0800729d
 80072fc:	0800734b 	.word	0x0800734b
 8007300:	0800729d 	.word	0x0800729d
 8007304:	0800729d 	.word	0x0800729d
 8007308:	080073e5 	.word	0x080073e5
 800730c:	6833      	ldr	r3, [r6, #0]
 800730e:	1d1a      	adds	r2, r3, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6032      	str	r2, [r6, #0]
 8007314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007318:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800731c:	2301      	movs	r3, #1
 800731e:	e09e      	b.n	800745e <_printf_i+0x1ea>
 8007320:	6833      	ldr	r3, [r6, #0]
 8007322:	6820      	ldr	r0, [r4, #0]
 8007324:	1d19      	adds	r1, r3, #4
 8007326:	6031      	str	r1, [r6, #0]
 8007328:	0606      	lsls	r6, r0, #24
 800732a:	d501      	bpl.n	8007330 <_printf_i+0xbc>
 800732c:	681d      	ldr	r5, [r3, #0]
 800732e:	e003      	b.n	8007338 <_printf_i+0xc4>
 8007330:	0645      	lsls	r5, r0, #25
 8007332:	d5fb      	bpl.n	800732c <_printf_i+0xb8>
 8007334:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007338:	2d00      	cmp	r5, #0
 800733a:	da03      	bge.n	8007344 <_printf_i+0xd0>
 800733c:	232d      	movs	r3, #45	@ 0x2d
 800733e:	426d      	negs	r5, r5
 8007340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007344:	230a      	movs	r3, #10
 8007346:	4859      	ldr	r0, [pc, #356]	@ (80074ac <_printf_i+0x238>)
 8007348:	e011      	b.n	800736e <_printf_i+0xfa>
 800734a:	6821      	ldr	r1, [r4, #0]
 800734c:	6833      	ldr	r3, [r6, #0]
 800734e:	0608      	lsls	r0, r1, #24
 8007350:	f853 5b04 	ldr.w	r5, [r3], #4
 8007354:	d402      	bmi.n	800735c <_printf_i+0xe8>
 8007356:	0649      	lsls	r1, r1, #25
 8007358:	bf48      	it	mi
 800735a:	b2ad      	uxthmi	r5, r5
 800735c:	2f6f      	cmp	r7, #111	@ 0x6f
 800735e:	6033      	str	r3, [r6, #0]
 8007360:	bf14      	ite	ne
 8007362:	230a      	movne	r3, #10
 8007364:	2308      	moveq	r3, #8
 8007366:	4851      	ldr	r0, [pc, #324]	@ (80074ac <_printf_i+0x238>)
 8007368:	2100      	movs	r1, #0
 800736a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800736e:	6866      	ldr	r6, [r4, #4]
 8007370:	2e00      	cmp	r6, #0
 8007372:	bfa8      	it	ge
 8007374:	6821      	ldrge	r1, [r4, #0]
 8007376:	60a6      	str	r6, [r4, #8]
 8007378:	bfa4      	itt	ge
 800737a:	f021 0104 	bicge.w	r1, r1, #4
 800737e:	6021      	strge	r1, [r4, #0]
 8007380:	b90d      	cbnz	r5, 8007386 <_printf_i+0x112>
 8007382:	2e00      	cmp	r6, #0
 8007384:	d04b      	beq.n	800741e <_printf_i+0x1aa>
 8007386:	4616      	mov	r6, r2
 8007388:	fbb5 f1f3 	udiv	r1, r5, r3
 800738c:	fb03 5711 	mls	r7, r3, r1, r5
 8007390:	5dc7      	ldrb	r7, [r0, r7]
 8007392:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007396:	462f      	mov	r7, r5
 8007398:	42bb      	cmp	r3, r7
 800739a:	460d      	mov	r5, r1
 800739c:	d9f4      	bls.n	8007388 <_printf_i+0x114>
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d10b      	bne.n	80073ba <_printf_i+0x146>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	07df      	lsls	r7, r3, #31
 80073a6:	d508      	bpl.n	80073ba <_printf_i+0x146>
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	6861      	ldr	r1, [r4, #4]
 80073ac:	4299      	cmp	r1, r3
 80073ae:	bfde      	ittt	le
 80073b0:	2330      	movle	r3, #48	@ 0x30
 80073b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073b6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80073ba:	1b92      	subs	r2, r2, r6
 80073bc:	6122      	str	r2, [r4, #16]
 80073be:	464b      	mov	r3, r9
 80073c0:	4621      	mov	r1, r4
 80073c2:	4640      	mov	r0, r8
 80073c4:	f8cd a000 	str.w	sl, [sp]
 80073c8:	aa03      	add	r2, sp, #12
 80073ca:	f7ff fee1 	bl	8007190 <_printf_common>
 80073ce:	3001      	adds	r0, #1
 80073d0:	d14a      	bne.n	8007468 <_printf_i+0x1f4>
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073d6:	b004      	add	sp, #16
 80073d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	f043 0320 	orr.w	r3, r3, #32
 80073e2:	6023      	str	r3, [r4, #0]
 80073e4:	2778      	movs	r7, #120	@ 0x78
 80073e6:	4832      	ldr	r0, [pc, #200]	@ (80074b0 <_printf_i+0x23c>)
 80073e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	6831      	ldr	r1, [r6, #0]
 80073f0:	061f      	lsls	r7, r3, #24
 80073f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80073f6:	d402      	bmi.n	80073fe <_printf_i+0x18a>
 80073f8:	065f      	lsls	r7, r3, #25
 80073fa:	bf48      	it	mi
 80073fc:	b2ad      	uxthmi	r5, r5
 80073fe:	6031      	str	r1, [r6, #0]
 8007400:	07d9      	lsls	r1, r3, #31
 8007402:	bf44      	itt	mi
 8007404:	f043 0320 	orrmi.w	r3, r3, #32
 8007408:	6023      	strmi	r3, [r4, #0]
 800740a:	b11d      	cbz	r5, 8007414 <_printf_i+0x1a0>
 800740c:	2310      	movs	r3, #16
 800740e:	e7ab      	b.n	8007368 <_printf_i+0xf4>
 8007410:	4826      	ldr	r0, [pc, #152]	@ (80074ac <_printf_i+0x238>)
 8007412:	e7e9      	b.n	80073e8 <_printf_i+0x174>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	f023 0320 	bic.w	r3, r3, #32
 800741a:	6023      	str	r3, [r4, #0]
 800741c:	e7f6      	b.n	800740c <_printf_i+0x198>
 800741e:	4616      	mov	r6, r2
 8007420:	e7bd      	b.n	800739e <_printf_i+0x12a>
 8007422:	6833      	ldr	r3, [r6, #0]
 8007424:	6825      	ldr	r5, [r4, #0]
 8007426:	1d18      	adds	r0, r3, #4
 8007428:	6961      	ldr	r1, [r4, #20]
 800742a:	6030      	str	r0, [r6, #0]
 800742c:	062e      	lsls	r6, r5, #24
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	d501      	bpl.n	8007436 <_printf_i+0x1c2>
 8007432:	6019      	str	r1, [r3, #0]
 8007434:	e002      	b.n	800743c <_printf_i+0x1c8>
 8007436:	0668      	lsls	r0, r5, #25
 8007438:	d5fb      	bpl.n	8007432 <_printf_i+0x1be>
 800743a:	8019      	strh	r1, [r3, #0]
 800743c:	2300      	movs	r3, #0
 800743e:	4616      	mov	r6, r2
 8007440:	6123      	str	r3, [r4, #16]
 8007442:	e7bc      	b.n	80073be <_printf_i+0x14a>
 8007444:	6833      	ldr	r3, [r6, #0]
 8007446:	2100      	movs	r1, #0
 8007448:	1d1a      	adds	r2, r3, #4
 800744a:	6032      	str	r2, [r6, #0]
 800744c:	681e      	ldr	r6, [r3, #0]
 800744e:	6862      	ldr	r2, [r4, #4]
 8007450:	4630      	mov	r0, r6
 8007452:	f000 f9f8 	bl	8007846 <memchr>
 8007456:	b108      	cbz	r0, 800745c <_printf_i+0x1e8>
 8007458:	1b80      	subs	r0, r0, r6
 800745a:	6060      	str	r0, [r4, #4]
 800745c:	6863      	ldr	r3, [r4, #4]
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	2300      	movs	r3, #0
 8007462:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007466:	e7aa      	b.n	80073be <_printf_i+0x14a>
 8007468:	4632      	mov	r2, r6
 800746a:	4649      	mov	r1, r9
 800746c:	4640      	mov	r0, r8
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	47d0      	blx	sl
 8007472:	3001      	adds	r0, #1
 8007474:	d0ad      	beq.n	80073d2 <_printf_i+0x15e>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	079b      	lsls	r3, r3, #30
 800747a:	d413      	bmi.n	80074a4 <_printf_i+0x230>
 800747c:	68e0      	ldr	r0, [r4, #12]
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	4298      	cmp	r0, r3
 8007482:	bfb8      	it	lt
 8007484:	4618      	movlt	r0, r3
 8007486:	e7a6      	b.n	80073d6 <_printf_i+0x162>
 8007488:	2301      	movs	r3, #1
 800748a:	4632      	mov	r2, r6
 800748c:	4649      	mov	r1, r9
 800748e:	4640      	mov	r0, r8
 8007490:	47d0      	blx	sl
 8007492:	3001      	adds	r0, #1
 8007494:	d09d      	beq.n	80073d2 <_printf_i+0x15e>
 8007496:	3501      	adds	r5, #1
 8007498:	68e3      	ldr	r3, [r4, #12]
 800749a:	9903      	ldr	r1, [sp, #12]
 800749c:	1a5b      	subs	r3, r3, r1
 800749e:	42ab      	cmp	r3, r5
 80074a0:	dcf2      	bgt.n	8007488 <_printf_i+0x214>
 80074a2:	e7eb      	b.n	800747c <_printf_i+0x208>
 80074a4:	2500      	movs	r5, #0
 80074a6:	f104 0619 	add.w	r6, r4, #25
 80074aa:	e7f5      	b.n	8007498 <_printf_i+0x224>
 80074ac:	08009a88 	.word	0x08009a88
 80074b0:	08009a99 	.word	0x08009a99

080074b4 <std>:
 80074b4:	2300      	movs	r3, #0
 80074b6:	b510      	push	{r4, lr}
 80074b8:	4604      	mov	r4, r0
 80074ba:	e9c0 3300 	strd	r3, r3, [r0]
 80074be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074c2:	6083      	str	r3, [r0, #8]
 80074c4:	8181      	strh	r1, [r0, #12]
 80074c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80074c8:	81c2      	strh	r2, [r0, #14]
 80074ca:	6183      	str	r3, [r0, #24]
 80074cc:	4619      	mov	r1, r3
 80074ce:	2208      	movs	r2, #8
 80074d0:	305c      	adds	r0, #92	@ 0x5c
 80074d2:	f000 f929 	bl	8007728 <memset>
 80074d6:	4b0d      	ldr	r3, [pc, #52]	@ (800750c <std+0x58>)
 80074d8:	6224      	str	r4, [r4, #32]
 80074da:	6263      	str	r3, [r4, #36]	@ 0x24
 80074dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007510 <std+0x5c>)
 80074de:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007514 <std+0x60>)
 80074e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007518 <std+0x64>)
 80074e6:	6323      	str	r3, [r4, #48]	@ 0x30
 80074e8:	4b0c      	ldr	r3, [pc, #48]	@ (800751c <std+0x68>)
 80074ea:	429c      	cmp	r4, r3
 80074ec:	d006      	beq.n	80074fc <std+0x48>
 80074ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074f2:	4294      	cmp	r4, r2
 80074f4:	d002      	beq.n	80074fc <std+0x48>
 80074f6:	33d0      	adds	r3, #208	@ 0xd0
 80074f8:	429c      	cmp	r4, r3
 80074fa:	d105      	bne.n	8007508 <std+0x54>
 80074fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007504:	f000 b99c 	b.w	8007840 <__retarget_lock_init_recursive>
 8007508:	bd10      	pop	{r4, pc}
 800750a:	bf00      	nop
 800750c:	080091ed 	.word	0x080091ed
 8007510:	0800920f 	.word	0x0800920f
 8007514:	08009247 	.word	0x08009247
 8007518:	0800926b 	.word	0x0800926b
 800751c:	200024d8 	.word	0x200024d8

08007520 <stdio_exit_handler>:
 8007520:	4a02      	ldr	r2, [pc, #8]	@ (800752c <stdio_exit_handler+0xc>)
 8007522:	4903      	ldr	r1, [pc, #12]	@ (8007530 <stdio_exit_handler+0x10>)
 8007524:	4803      	ldr	r0, [pc, #12]	@ (8007534 <stdio_exit_handler+0x14>)
 8007526:	f000 b869 	b.w	80075fc <_fwalk_sglue>
 800752a:	bf00      	nop
 800752c:	20000010 	.word	0x20000010
 8007530:	08008a85 	.word	0x08008a85
 8007534:	20000020 	.word	0x20000020

08007538 <cleanup_stdio>:
 8007538:	6841      	ldr	r1, [r0, #4]
 800753a:	4b0c      	ldr	r3, [pc, #48]	@ (800756c <cleanup_stdio+0x34>)
 800753c:	b510      	push	{r4, lr}
 800753e:	4299      	cmp	r1, r3
 8007540:	4604      	mov	r4, r0
 8007542:	d001      	beq.n	8007548 <cleanup_stdio+0x10>
 8007544:	f001 fa9e 	bl	8008a84 <_fflush_r>
 8007548:	68a1      	ldr	r1, [r4, #8]
 800754a:	4b09      	ldr	r3, [pc, #36]	@ (8007570 <cleanup_stdio+0x38>)
 800754c:	4299      	cmp	r1, r3
 800754e:	d002      	beq.n	8007556 <cleanup_stdio+0x1e>
 8007550:	4620      	mov	r0, r4
 8007552:	f001 fa97 	bl	8008a84 <_fflush_r>
 8007556:	68e1      	ldr	r1, [r4, #12]
 8007558:	4b06      	ldr	r3, [pc, #24]	@ (8007574 <cleanup_stdio+0x3c>)
 800755a:	4299      	cmp	r1, r3
 800755c:	d004      	beq.n	8007568 <cleanup_stdio+0x30>
 800755e:	4620      	mov	r0, r4
 8007560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007564:	f001 ba8e 	b.w	8008a84 <_fflush_r>
 8007568:	bd10      	pop	{r4, pc}
 800756a:	bf00      	nop
 800756c:	200024d8 	.word	0x200024d8
 8007570:	20002540 	.word	0x20002540
 8007574:	200025a8 	.word	0x200025a8

08007578 <global_stdio_init.part.0>:
 8007578:	b510      	push	{r4, lr}
 800757a:	4b0b      	ldr	r3, [pc, #44]	@ (80075a8 <global_stdio_init.part.0+0x30>)
 800757c:	4c0b      	ldr	r4, [pc, #44]	@ (80075ac <global_stdio_init.part.0+0x34>)
 800757e:	4a0c      	ldr	r2, [pc, #48]	@ (80075b0 <global_stdio_init.part.0+0x38>)
 8007580:	4620      	mov	r0, r4
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	2104      	movs	r1, #4
 8007586:	2200      	movs	r2, #0
 8007588:	f7ff ff94 	bl	80074b4 <std>
 800758c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007590:	2201      	movs	r2, #1
 8007592:	2109      	movs	r1, #9
 8007594:	f7ff ff8e 	bl	80074b4 <std>
 8007598:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800759c:	2202      	movs	r2, #2
 800759e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a2:	2112      	movs	r1, #18
 80075a4:	f7ff bf86 	b.w	80074b4 <std>
 80075a8:	20002610 	.word	0x20002610
 80075ac:	200024d8 	.word	0x200024d8
 80075b0:	08007521 	.word	0x08007521

080075b4 <__sfp_lock_acquire>:
 80075b4:	4801      	ldr	r0, [pc, #4]	@ (80075bc <__sfp_lock_acquire+0x8>)
 80075b6:	f000 b944 	b.w	8007842 <__retarget_lock_acquire_recursive>
 80075ba:	bf00      	nop
 80075bc:	20002619 	.word	0x20002619

080075c0 <__sfp_lock_release>:
 80075c0:	4801      	ldr	r0, [pc, #4]	@ (80075c8 <__sfp_lock_release+0x8>)
 80075c2:	f000 b93f 	b.w	8007844 <__retarget_lock_release_recursive>
 80075c6:	bf00      	nop
 80075c8:	20002619 	.word	0x20002619

080075cc <__sinit>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	4604      	mov	r4, r0
 80075d0:	f7ff fff0 	bl	80075b4 <__sfp_lock_acquire>
 80075d4:	6a23      	ldr	r3, [r4, #32]
 80075d6:	b11b      	cbz	r3, 80075e0 <__sinit+0x14>
 80075d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075dc:	f7ff bff0 	b.w	80075c0 <__sfp_lock_release>
 80075e0:	4b04      	ldr	r3, [pc, #16]	@ (80075f4 <__sinit+0x28>)
 80075e2:	6223      	str	r3, [r4, #32]
 80075e4:	4b04      	ldr	r3, [pc, #16]	@ (80075f8 <__sinit+0x2c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1f5      	bne.n	80075d8 <__sinit+0xc>
 80075ec:	f7ff ffc4 	bl	8007578 <global_stdio_init.part.0>
 80075f0:	e7f2      	b.n	80075d8 <__sinit+0xc>
 80075f2:	bf00      	nop
 80075f4:	08007539 	.word	0x08007539
 80075f8:	20002610 	.word	0x20002610

080075fc <_fwalk_sglue>:
 80075fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007600:	4607      	mov	r7, r0
 8007602:	4688      	mov	r8, r1
 8007604:	4614      	mov	r4, r2
 8007606:	2600      	movs	r6, #0
 8007608:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800760c:	f1b9 0901 	subs.w	r9, r9, #1
 8007610:	d505      	bpl.n	800761e <_fwalk_sglue+0x22>
 8007612:	6824      	ldr	r4, [r4, #0]
 8007614:	2c00      	cmp	r4, #0
 8007616:	d1f7      	bne.n	8007608 <_fwalk_sglue+0xc>
 8007618:	4630      	mov	r0, r6
 800761a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d907      	bls.n	8007634 <_fwalk_sglue+0x38>
 8007624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007628:	3301      	adds	r3, #1
 800762a:	d003      	beq.n	8007634 <_fwalk_sglue+0x38>
 800762c:	4629      	mov	r1, r5
 800762e:	4638      	mov	r0, r7
 8007630:	47c0      	blx	r8
 8007632:	4306      	orrs	r6, r0
 8007634:	3568      	adds	r5, #104	@ 0x68
 8007636:	e7e9      	b.n	800760c <_fwalk_sglue+0x10>

08007638 <iprintf>:
 8007638:	b40f      	push	{r0, r1, r2, r3}
 800763a:	b507      	push	{r0, r1, r2, lr}
 800763c:	4906      	ldr	r1, [pc, #24]	@ (8007658 <iprintf+0x20>)
 800763e:	ab04      	add	r3, sp, #16
 8007640:	6808      	ldr	r0, [r1, #0]
 8007642:	f853 2b04 	ldr.w	r2, [r3], #4
 8007646:	6881      	ldr	r1, [r0, #8]
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	f000 ffd9 	bl	8008600 <_vfiprintf_r>
 800764e:	b003      	add	sp, #12
 8007650:	f85d eb04 	ldr.w	lr, [sp], #4
 8007654:	b004      	add	sp, #16
 8007656:	4770      	bx	lr
 8007658:	2000001c 	.word	0x2000001c

0800765c <putchar>:
 800765c:	4b02      	ldr	r3, [pc, #8]	@ (8007668 <putchar+0xc>)
 800765e:	4601      	mov	r1, r0
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	6882      	ldr	r2, [r0, #8]
 8007664:	f001 befb 	b.w	800945e <_putc_r>
 8007668:	2000001c 	.word	0x2000001c

0800766c <_puts_r>:
 800766c:	6a03      	ldr	r3, [r0, #32]
 800766e:	b570      	push	{r4, r5, r6, lr}
 8007670:	4605      	mov	r5, r0
 8007672:	460e      	mov	r6, r1
 8007674:	6884      	ldr	r4, [r0, #8]
 8007676:	b90b      	cbnz	r3, 800767c <_puts_r+0x10>
 8007678:	f7ff ffa8 	bl	80075cc <__sinit>
 800767c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800767e:	07db      	lsls	r3, r3, #31
 8007680:	d405      	bmi.n	800768e <_puts_r+0x22>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	0598      	lsls	r0, r3, #22
 8007686:	d402      	bmi.n	800768e <_puts_r+0x22>
 8007688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800768a:	f000 f8da 	bl	8007842 <__retarget_lock_acquire_recursive>
 800768e:	89a3      	ldrh	r3, [r4, #12]
 8007690:	0719      	lsls	r1, r3, #28
 8007692:	d502      	bpl.n	800769a <_puts_r+0x2e>
 8007694:	6923      	ldr	r3, [r4, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d135      	bne.n	8007706 <_puts_r+0x9a>
 800769a:	4621      	mov	r1, r4
 800769c:	4628      	mov	r0, r5
 800769e:	f001 fe27 	bl	80092f0 <__swsetup_r>
 80076a2:	b380      	cbz	r0, 8007706 <_puts_r+0x9a>
 80076a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80076a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076aa:	07da      	lsls	r2, r3, #31
 80076ac:	d405      	bmi.n	80076ba <_puts_r+0x4e>
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	059b      	lsls	r3, r3, #22
 80076b2:	d402      	bmi.n	80076ba <_puts_r+0x4e>
 80076b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076b6:	f000 f8c5 	bl	8007844 <__retarget_lock_release_recursive>
 80076ba:	4628      	mov	r0, r5
 80076bc:	bd70      	pop	{r4, r5, r6, pc}
 80076be:	2b00      	cmp	r3, #0
 80076c0:	da04      	bge.n	80076cc <_puts_r+0x60>
 80076c2:	69a2      	ldr	r2, [r4, #24]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	dc17      	bgt.n	80076f8 <_puts_r+0x8c>
 80076c8:	290a      	cmp	r1, #10
 80076ca:	d015      	beq.n	80076f8 <_puts_r+0x8c>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	1c5a      	adds	r2, r3, #1
 80076d0:	6022      	str	r2, [r4, #0]
 80076d2:	7019      	strb	r1, [r3, #0]
 80076d4:	68a3      	ldr	r3, [r4, #8]
 80076d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076da:	3b01      	subs	r3, #1
 80076dc:	60a3      	str	r3, [r4, #8]
 80076de:	2900      	cmp	r1, #0
 80076e0:	d1ed      	bne.n	80076be <_puts_r+0x52>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	da11      	bge.n	800770a <_puts_r+0x9e>
 80076e6:	4622      	mov	r2, r4
 80076e8:	210a      	movs	r1, #10
 80076ea:	4628      	mov	r0, r5
 80076ec:	f001 fdc1 	bl	8009272 <__swbuf_r>
 80076f0:	3001      	adds	r0, #1
 80076f2:	d0d7      	beq.n	80076a4 <_puts_r+0x38>
 80076f4:	250a      	movs	r5, #10
 80076f6:	e7d7      	b.n	80076a8 <_puts_r+0x3c>
 80076f8:	4622      	mov	r2, r4
 80076fa:	4628      	mov	r0, r5
 80076fc:	f001 fdb9 	bl	8009272 <__swbuf_r>
 8007700:	3001      	adds	r0, #1
 8007702:	d1e7      	bne.n	80076d4 <_puts_r+0x68>
 8007704:	e7ce      	b.n	80076a4 <_puts_r+0x38>
 8007706:	3e01      	subs	r6, #1
 8007708:	e7e4      	b.n	80076d4 <_puts_r+0x68>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	6022      	str	r2, [r4, #0]
 8007710:	220a      	movs	r2, #10
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	e7ee      	b.n	80076f4 <_puts_r+0x88>
	...

08007718 <puts>:
 8007718:	4b02      	ldr	r3, [pc, #8]	@ (8007724 <puts+0xc>)
 800771a:	4601      	mov	r1, r0
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	f7ff bfa5 	b.w	800766c <_puts_r>
 8007722:	bf00      	nop
 8007724:	2000001c 	.word	0x2000001c

08007728 <memset>:
 8007728:	4603      	mov	r3, r0
 800772a:	4402      	add	r2, r0
 800772c:	4293      	cmp	r3, r2
 800772e:	d100      	bne.n	8007732 <memset+0xa>
 8007730:	4770      	bx	lr
 8007732:	f803 1b01 	strb.w	r1, [r3], #1
 8007736:	e7f9      	b.n	800772c <memset+0x4>

08007738 <_localeconv_r>:
 8007738:	4800      	ldr	r0, [pc, #0]	@ (800773c <_localeconv_r+0x4>)
 800773a:	4770      	bx	lr
 800773c:	2000015c 	.word	0x2000015c

08007740 <_reclaim_reent>:
 8007740:	4b29      	ldr	r3, [pc, #164]	@ (80077e8 <_reclaim_reent+0xa8>)
 8007742:	b570      	push	{r4, r5, r6, lr}
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4604      	mov	r4, r0
 8007748:	4283      	cmp	r3, r0
 800774a:	d04b      	beq.n	80077e4 <_reclaim_reent+0xa4>
 800774c:	69c3      	ldr	r3, [r0, #28]
 800774e:	b1ab      	cbz	r3, 800777c <_reclaim_reent+0x3c>
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	b16b      	cbz	r3, 8007770 <_reclaim_reent+0x30>
 8007754:	2500      	movs	r5, #0
 8007756:	69e3      	ldr	r3, [r4, #28]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	5959      	ldr	r1, [r3, r5]
 800775c:	2900      	cmp	r1, #0
 800775e:	d13b      	bne.n	80077d8 <_reclaim_reent+0x98>
 8007760:	3504      	adds	r5, #4
 8007762:	2d80      	cmp	r5, #128	@ 0x80
 8007764:	d1f7      	bne.n	8007756 <_reclaim_reent+0x16>
 8007766:	69e3      	ldr	r3, [r4, #28]
 8007768:	4620      	mov	r0, r4
 800776a:	68d9      	ldr	r1, [r3, #12]
 800776c:	f000 fed8 	bl	8008520 <_free_r>
 8007770:	69e3      	ldr	r3, [r4, #28]
 8007772:	6819      	ldr	r1, [r3, #0]
 8007774:	b111      	cbz	r1, 800777c <_reclaim_reent+0x3c>
 8007776:	4620      	mov	r0, r4
 8007778:	f000 fed2 	bl	8008520 <_free_r>
 800777c:	6961      	ldr	r1, [r4, #20]
 800777e:	b111      	cbz	r1, 8007786 <_reclaim_reent+0x46>
 8007780:	4620      	mov	r0, r4
 8007782:	f000 fecd 	bl	8008520 <_free_r>
 8007786:	69e1      	ldr	r1, [r4, #28]
 8007788:	b111      	cbz	r1, 8007790 <_reclaim_reent+0x50>
 800778a:	4620      	mov	r0, r4
 800778c:	f000 fec8 	bl	8008520 <_free_r>
 8007790:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007792:	b111      	cbz	r1, 800779a <_reclaim_reent+0x5a>
 8007794:	4620      	mov	r0, r4
 8007796:	f000 fec3 	bl	8008520 <_free_r>
 800779a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800779c:	b111      	cbz	r1, 80077a4 <_reclaim_reent+0x64>
 800779e:	4620      	mov	r0, r4
 80077a0:	f000 febe 	bl	8008520 <_free_r>
 80077a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80077a6:	b111      	cbz	r1, 80077ae <_reclaim_reent+0x6e>
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 feb9 	bl	8008520 <_free_r>
 80077ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80077b0:	b111      	cbz	r1, 80077b8 <_reclaim_reent+0x78>
 80077b2:	4620      	mov	r0, r4
 80077b4:	f000 feb4 	bl	8008520 <_free_r>
 80077b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80077ba:	b111      	cbz	r1, 80077c2 <_reclaim_reent+0x82>
 80077bc:	4620      	mov	r0, r4
 80077be:	f000 feaf 	bl	8008520 <_free_r>
 80077c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80077c4:	b111      	cbz	r1, 80077cc <_reclaim_reent+0x8c>
 80077c6:	4620      	mov	r0, r4
 80077c8:	f000 feaa 	bl	8008520 <_free_r>
 80077cc:	6a23      	ldr	r3, [r4, #32]
 80077ce:	b14b      	cbz	r3, 80077e4 <_reclaim_reent+0xa4>
 80077d0:	4620      	mov	r0, r4
 80077d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077d6:	4718      	bx	r3
 80077d8:	680e      	ldr	r6, [r1, #0]
 80077da:	4620      	mov	r0, r4
 80077dc:	f000 fea0 	bl	8008520 <_free_r>
 80077e0:	4631      	mov	r1, r6
 80077e2:	e7bb      	b.n	800775c <_reclaim_reent+0x1c>
 80077e4:	bd70      	pop	{r4, r5, r6, pc}
 80077e6:	bf00      	nop
 80077e8:	2000001c 	.word	0x2000001c

080077ec <__errno>:
 80077ec:	4b01      	ldr	r3, [pc, #4]	@ (80077f4 <__errno+0x8>)
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	2000001c 	.word	0x2000001c

080077f8 <__libc_init_array>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	2600      	movs	r6, #0
 80077fc:	4d0c      	ldr	r5, [pc, #48]	@ (8007830 <__libc_init_array+0x38>)
 80077fe:	4c0d      	ldr	r4, [pc, #52]	@ (8007834 <__libc_init_array+0x3c>)
 8007800:	1b64      	subs	r4, r4, r5
 8007802:	10a4      	asrs	r4, r4, #2
 8007804:	42a6      	cmp	r6, r4
 8007806:	d109      	bne.n	800781c <__libc_init_array+0x24>
 8007808:	f001 ff84 	bl	8009714 <_init>
 800780c:	2600      	movs	r6, #0
 800780e:	4d0a      	ldr	r5, [pc, #40]	@ (8007838 <__libc_init_array+0x40>)
 8007810:	4c0a      	ldr	r4, [pc, #40]	@ (800783c <__libc_init_array+0x44>)
 8007812:	1b64      	subs	r4, r4, r5
 8007814:	10a4      	asrs	r4, r4, #2
 8007816:	42a6      	cmp	r6, r4
 8007818:	d105      	bne.n	8007826 <__libc_init_array+0x2e>
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007820:	4798      	blx	r3
 8007822:	3601      	adds	r6, #1
 8007824:	e7ee      	b.n	8007804 <__libc_init_array+0xc>
 8007826:	f855 3b04 	ldr.w	r3, [r5], #4
 800782a:	4798      	blx	r3
 800782c:	3601      	adds	r6, #1
 800782e:	e7f2      	b.n	8007816 <__libc_init_array+0x1e>
 8007830:	08009df0 	.word	0x08009df0
 8007834:	08009df0 	.word	0x08009df0
 8007838:	08009df0 	.word	0x08009df0
 800783c:	08009df4 	.word	0x08009df4

08007840 <__retarget_lock_init_recursive>:
 8007840:	4770      	bx	lr

08007842 <__retarget_lock_acquire_recursive>:
 8007842:	4770      	bx	lr

08007844 <__retarget_lock_release_recursive>:
 8007844:	4770      	bx	lr

08007846 <memchr>:
 8007846:	4603      	mov	r3, r0
 8007848:	b510      	push	{r4, lr}
 800784a:	b2c9      	uxtb	r1, r1
 800784c:	4402      	add	r2, r0
 800784e:	4293      	cmp	r3, r2
 8007850:	4618      	mov	r0, r3
 8007852:	d101      	bne.n	8007858 <memchr+0x12>
 8007854:	2000      	movs	r0, #0
 8007856:	e003      	b.n	8007860 <memchr+0x1a>
 8007858:	7804      	ldrb	r4, [r0, #0]
 800785a:	3301      	adds	r3, #1
 800785c:	428c      	cmp	r4, r1
 800785e:	d1f6      	bne.n	800784e <memchr+0x8>
 8007860:	bd10      	pop	{r4, pc}

08007862 <memcpy>:
 8007862:	440a      	add	r2, r1
 8007864:	4291      	cmp	r1, r2
 8007866:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800786a:	d100      	bne.n	800786e <memcpy+0xc>
 800786c:	4770      	bx	lr
 800786e:	b510      	push	{r4, lr}
 8007870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007874:	4291      	cmp	r1, r2
 8007876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800787a:	d1f9      	bne.n	8007870 <memcpy+0xe>
 800787c:	bd10      	pop	{r4, pc}

0800787e <quorem>:
 800787e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007882:	6903      	ldr	r3, [r0, #16]
 8007884:	690c      	ldr	r4, [r1, #16]
 8007886:	4607      	mov	r7, r0
 8007888:	42a3      	cmp	r3, r4
 800788a:	db7e      	blt.n	800798a <quorem+0x10c>
 800788c:	3c01      	subs	r4, #1
 800788e:	00a3      	lsls	r3, r4, #2
 8007890:	f100 0514 	add.w	r5, r0, #20
 8007894:	f101 0814 	add.w	r8, r1, #20
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078a8:	3301      	adds	r3, #1
 80078aa:	429a      	cmp	r2, r3
 80078ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80078b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078b4:	d32e      	bcc.n	8007914 <quorem+0x96>
 80078b6:	f04f 0a00 	mov.w	sl, #0
 80078ba:	46c4      	mov	ip, r8
 80078bc:	46ae      	mov	lr, r5
 80078be:	46d3      	mov	fp, sl
 80078c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80078c4:	b298      	uxth	r0, r3
 80078c6:	fb06 a000 	mla	r0, r6, r0, sl
 80078ca:	0c1b      	lsrs	r3, r3, #16
 80078cc:	0c02      	lsrs	r2, r0, #16
 80078ce:	fb06 2303 	mla	r3, r6, r3, r2
 80078d2:	f8de 2000 	ldr.w	r2, [lr]
 80078d6:	b280      	uxth	r0, r0
 80078d8:	b292      	uxth	r2, r2
 80078da:	1a12      	subs	r2, r2, r0
 80078dc:	445a      	add	r2, fp
 80078de:	f8de 0000 	ldr.w	r0, [lr]
 80078e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80078ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80078f0:	b292      	uxth	r2, r2
 80078f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80078f6:	45e1      	cmp	r9, ip
 80078f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80078fc:	f84e 2b04 	str.w	r2, [lr], #4
 8007900:	d2de      	bcs.n	80078c0 <quorem+0x42>
 8007902:	9b00      	ldr	r3, [sp, #0]
 8007904:	58eb      	ldr	r3, [r5, r3]
 8007906:	b92b      	cbnz	r3, 8007914 <quorem+0x96>
 8007908:	9b01      	ldr	r3, [sp, #4]
 800790a:	3b04      	subs	r3, #4
 800790c:	429d      	cmp	r5, r3
 800790e:	461a      	mov	r2, r3
 8007910:	d32f      	bcc.n	8007972 <quorem+0xf4>
 8007912:	613c      	str	r4, [r7, #16]
 8007914:	4638      	mov	r0, r7
 8007916:	f001 fb61 	bl	8008fdc <__mcmp>
 800791a:	2800      	cmp	r0, #0
 800791c:	db25      	blt.n	800796a <quorem+0xec>
 800791e:	4629      	mov	r1, r5
 8007920:	2000      	movs	r0, #0
 8007922:	f858 2b04 	ldr.w	r2, [r8], #4
 8007926:	f8d1 c000 	ldr.w	ip, [r1]
 800792a:	fa1f fe82 	uxth.w	lr, r2
 800792e:	fa1f f38c 	uxth.w	r3, ip
 8007932:	eba3 030e 	sub.w	r3, r3, lr
 8007936:	4403      	add	r3, r0
 8007938:	0c12      	lsrs	r2, r2, #16
 800793a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800793e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007942:	b29b      	uxth	r3, r3
 8007944:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007948:	45c1      	cmp	r9, r8
 800794a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800794e:	f841 3b04 	str.w	r3, [r1], #4
 8007952:	d2e6      	bcs.n	8007922 <quorem+0xa4>
 8007954:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007958:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800795c:	b922      	cbnz	r2, 8007968 <quorem+0xea>
 800795e:	3b04      	subs	r3, #4
 8007960:	429d      	cmp	r5, r3
 8007962:	461a      	mov	r2, r3
 8007964:	d30b      	bcc.n	800797e <quorem+0x100>
 8007966:	613c      	str	r4, [r7, #16]
 8007968:	3601      	adds	r6, #1
 800796a:	4630      	mov	r0, r6
 800796c:	b003      	add	sp, #12
 800796e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007972:	6812      	ldr	r2, [r2, #0]
 8007974:	3b04      	subs	r3, #4
 8007976:	2a00      	cmp	r2, #0
 8007978:	d1cb      	bne.n	8007912 <quorem+0x94>
 800797a:	3c01      	subs	r4, #1
 800797c:	e7c6      	b.n	800790c <quorem+0x8e>
 800797e:	6812      	ldr	r2, [r2, #0]
 8007980:	3b04      	subs	r3, #4
 8007982:	2a00      	cmp	r2, #0
 8007984:	d1ef      	bne.n	8007966 <quorem+0xe8>
 8007986:	3c01      	subs	r4, #1
 8007988:	e7ea      	b.n	8007960 <quorem+0xe2>
 800798a:	2000      	movs	r0, #0
 800798c:	e7ee      	b.n	800796c <quorem+0xee>
	...

08007990 <_dtoa_r>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	4614      	mov	r4, r2
 8007996:	461d      	mov	r5, r3
 8007998:	69c7      	ldr	r7, [r0, #28]
 800799a:	b097      	sub	sp, #92	@ 0x5c
 800799c:	4683      	mov	fp, r0
 800799e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80079a2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80079a4:	b97f      	cbnz	r7, 80079c6 <_dtoa_r+0x36>
 80079a6:	2010      	movs	r0, #16
 80079a8:	f000 ff42 	bl	8008830 <malloc>
 80079ac:	4602      	mov	r2, r0
 80079ae:	f8cb 001c 	str.w	r0, [fp, #28]
 80079b2:	b920      	cbnz	r0, 80079be <_dtoa_r+0x2e>
 80079b4:	21ef      	movs	r1, #239	@ 0xef
 80079b6:	4ba8      	ldr	r3, [pc, #672]	@ (8007c58 <_dtoa_r+0x2c8>)
 80079b8:	48a8      	ldr	r0, [pc, #672]	@ (8007c5c <_dtoa_r+0x2cc>)
 80079ba:	f001 fdfd 	bl	80095b8 <__assert_func>
 80079be:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80079c2:	6007      	str	r7, [r0, #0]
 80079c4:	60c7      	str	r7, [r0, #12]
 80079c6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079ca:	6819      	ldr	r1, [r3, #0]
 80079cc:	b159      	cbz	r1, 80079e6 <_dtoa_r+0x56>
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	2301      	movs	r3, #1
 80079d2:	4093      	lsls	r3, r2
 80079d4:	604a      	str	r2, [r1, #4]
 80079d6:	608b      	str	r3, [r1, #8]
 80079d8:	4658      	mov	r0, fp
 80079da:	f001 f8c7 	bl	8008b6c <_Bfree>
 80079de:	2200      	movs	r2, #0
 80079e0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	1e2b      	subs	r3, r5, #0
 80079e8:	bfaf      	iteee	ge
 80079ea:	2300      	movge	r3, #0
 80079ec:	2201      	movlt	r2, #1
 80079ee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80079f2:	9303      	strlt	r3, [sp, #12]
 80079f4:	bfa8      	it	ge
 80079f6:	6033      	strge	r3, [r6, #0]
 80079f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80079fc:	4b98      	ldr	r3, [pc, #608]	@ (8007c60 <_dtoa_r+0x2d0>)
 80079fe:	bfb8      	it	lt
 8007a00:	6032      	strlt	r2, [r6, #0]
 8007a02:	ea33 0308 	bics.w	r3, r3, r8
 8007a06:	d112      	bne.n	8007a2e <_dtoa_r+0x9e>
 8007a08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007a14:	4323      	orrs	r3, r4
 8007a16:	f000 8550 	beq.w	80084ba <_dtoa_r+0xb2a>
 8007a1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a1c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007c64 <_dtoa_r+0x2d4>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8552 	beq.w	80084ca <_dtoa_r+0xb3a>
 8007a26:	f10a 0303 	add.w	r3, sl, #3
 8007a2a:	f000 bd4c 	b.w	80084c6 <_dtoa_r+0xb36>
 8007a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007a36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f7f8 ffb3 	bl	80009a8 <__aeabi_dcmpeq>
 8007a42:	4607      	mov	r7, r0
 8007a44:	b158      	cbz	r0, 8007a5e <_dtoa_r+0xce>
 8007a46:	2301      	movs	r3, #1
 8007a48:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a4e:	b113      	cbz	r3, 8007a56 <_dtoa_r+0xc6>
 8007a50:	4b85      	ldr	r3, [pc, #532]	@ (8007c68 <_dtoa_r+0x2d8>)
 8007a52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007c6c <_dtoa_r+0x2dc>
 8007a5a:	f000 bd36 	b.w	80084ca <_dtoa_r+0xb3a>
 8007a5e:	ab14      	add	r3, sp, #80	@ 0x50
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	ab15      	add	r3, sp, #84	@ 0x54
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	4658      	mov	r0, fp
 8007a68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007a6c:	f001 fb66 	bl	800913c <__d2b>
 8007a70:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007a74:	4681      	mov	r9, r0
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	d077      	beq.n	8007b6a <_dtoa_r+0x1da>
 8007a7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a80:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a88:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a8c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a90:	9712      	str	r7, [sp, #72]	@ 0x48
 8007a92:	4619      	mov	r1, r3
 8007a94:	2200      	movs	r2, #0
 8007a96:	4b76      	ldr	r3, [pc, #472]	@ (8007c70 <_dtoa_r+0x2e0>)
 8007a98:	f7f8 fb66 	bl	8000168 <__aeabi_dsub>
 8007a9c:	a368      	add	r3, pc, #416	@ (adr r3, 8007c40 <_dtoa_r+0x2b0>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	f7f8 fd19 	bl	80004d8 <__aeabi_dmul>
 8007aa6:	a368      	add	r3, pc, #416	@ (adr r3, 8007c48 <_dtoa_r+0x2b8>)
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	f7f8 fb5e 	bl	800016c <__adddf3>
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	460d      	mov	r5, r1
 8007ab6:	f7f8 fca5 	bl	8000404 <__aeabi_i2d>
 8007aba:	a365      	add	r3, pc, #404	@ (adr r3, 8007c50 <_dtoa_r+0x2c0>)
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f7f8 fd0a 	bl	80004d8 <__aeabi_dmul>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4620      	mov	r0, r4
 8007aca:	4629      	mov	r1, r5
 8007acc:	f7f8 fb4e 	bl	800016c <__adddf3>
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	f7f8 ffb0 	bl	8000a38 <__aeabi_d2iz>
 8007ad8:	2200      	movs	r2, #0
 8007ada:	4607      	mov	r7, r0
 8007adc:	2300      	movs	r3, #0
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f7f8 ff6b 	bl	80009bc <__aeabi_dcmplt>
 8007ae6:	b140      	cbz	r0, 8007afa <_dtoa_r+0x16a>
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f7f8 fc8b 	bl	8000404 <__aeabi_i2d>
 8007aee:	4622      	mov	r2, r4
 8007af0:	462b      	mov	r3, r5
 8007af2:	f7f8 ff59 	bl	80009a8 <__aeabi_dcmpeq>
 8007af6:	b900      	cbnz	r0, 8007afa <_dtoa_r+0x16a>
 8007af8:	3f01      	subs	r7, #1
 8007afa:	2f16      	cmp	r7, #22
 8007afc:	d853      	bhi.n	8007ba6 <_dtoa_r+0x216>
 8007afe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b02:	4b5c      	ldr	r3, [pc, #368]	@ (8007c74 <_dtoa_r+0x2e4>)
 8007b04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 ff56 	bl	80009bc <__aeabi_dcmplt>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d04a      	beq.n	8007baa <_dtoa_r+0x21a>
 8007b14:	2300      	movs	r3, #0
 8007b16:	3f01      	subs	r7, #1
 8007b18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b1c:	1b9b      	subs	r3, r3, r6
 8007b1e:	1e5a      	subs	r2, r3, #1
 8007b20:	bf46      	itte	mi
 8007b22:	f1c3 0801 	rsbmi	r8, r3, #1
 8007b26:	2300      	movmi	r3, #0
 8007b28:	f04f 0800 	movpl.w	r8, #0
 8007b2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b2e:	bf48      	it	mi
 8007b30:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007b32:	2f00      	cmp	r7, #0
 8007b34:	db3b      	blt.n	8007bae <_dtoa_r+0x21e>
 8007b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b38:	970e      	str	r7, [sp, #56]	@ 0x38
 8007b3a:	443b      	add	r3, r7
 8007b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b3e:	2300      	movs	r3, #0
 8007b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b44:	2b09      	cmp	r3, #9
 8007b46:	d866      	bhi.n	8007c16 <_dtoa_r+0x286>
 8007b48:	2b05      	cmp	r3, #5
 8007b4a:	bfc4      	itt	gt
 8007b4c:	3b04      	subgt	r3, #4
 8007b4e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007b50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b52:	bfc8      	it	gt
 8007b54:	2400      	movgt	r4, #0
 8007b56:	f1a3 0302 	sub.w	r3, r3, #2
 8007b5a:	bfd8      	it	le
 8007b5c:	2401      	movle	r4, #1
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d864      	bhi.n	8007c2c <_dtoa_r+0x29c>
 8007b62:	e8df f003 	tbb	[pc, r3]
 8007b66:	382b      	.short	0x382b
 8007b68:	5636      	.short	0x5636
 8007b6a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007b6e:	441e      	add	r6, r3
 8007b70:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	bfc1      	itttt	gt
 8007b78:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007b7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007b80:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b84:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b88:	bfd6      	itet	le
 8007b8a:	f1c3 0320 	rsble	r3, r3, #32
 8007b8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007b92:	fa04 f003 	lslle.w	r0, r4, r3
 8007b96:	f7f8 fc25 	bl	80003e4 <__aeabi_ui2d>
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007ba0:	3e01      	subs	r6, #1
 8007ba2:	9212      	str	r2, [sp, #72]	@ 0x48
 8007ba4:	e775      	b.n	8007a92 <_dtoa_r+0x102>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e7b6      	b.n	8007b18 <_dtoa_r+0x188>
 8007baa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007bac:	e7b5      	b.n	8007b1a <_dtoa_r+0x18a>
 8007bae:	427b      	negs	r3, r7
 8007bb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	eba8 0807 	sub.w	r8, r8, r7
 8007bb8:	930e      	str	r3, [sp, #56]	@ 0x38
 8007bba:	e7c2      	b.n	8007b42 <_dtoa_r+0x1b2>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dc35      	bgt.n	8007c32 <_dtoa_r+0x2a2>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	461a      	mov	r2, r3
 8007bca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007bce:	9221      	str	r2, [sp, #132]	@ 0x84
 8007bd0:	e00b      	b.n	8007bea <_dtoa_r+0x25a>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e7f3      	b.n	8007bbe <_dtoa_r+0x22e>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bdc:	18fb      	adds	r3, r7, r3
 8007bde:	9308      	str	r3, [sp, #32]
 8007be0:	3301      	adds	r3, #1
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	9307      	str	r3, [sp, #28]
 8007be6:	bfb8      	it	lt
 8007be8:	2301      	movlt	r3, #1
 8007bea:	2100      	movs	r1, #0
 8007bec:	2204      	movs	r2, #4
 8007bee:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007bf2:	f102 0514 	add.w	r5, r2, #20
 8007bf6:	429d      	cmp	r5, r3
 8007bf8:	d91f      	bls.n	8007c3a <_dtoa_r+0x2aa>
 8007bfa:	6041      	str	r1, [r0, #4]
 8007bfc:	4658      	mov	r0, fp
 8007bfe:	f000 ff75 	bl	8008aec <_Balloc>
 8007c02:	4682      	mov	sl, r0
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d139      	bne.n	8007c7c <_dtoa_r+0x2ec>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8007c78 <_dtoa_r+0x2e8>)
 8007c10:	e6d2      	b.n	80079b8 <_dtoa_r+0x28>
 8007c12:	2301      	movs	r3, #1
 8007c14:	e7e0      	b.n	8007bd8 <_dtoa_r+0x248>
 8007c16:	2401      	movs	r4, #1
 8007c18:	2300      	movs	r3, #0
 8007c1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8007c1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c22:	2200      	movs	r2, #0
 8007c24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c28:	2312      	movs	r3, #18
 8007c2a:	e7d0      	b.n	8007bce <_dtoa_r+0x23e>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c30:	e7f5      	b.n	8007c1e <_dtoa_r+0x28e>
 8007c32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c38:	e7d7      	b.n	8007bea <_dtoa_r+0x25a>
 8007c3a:	3101      	adds	r1, #1
 8007c3c:	0052      	lsls	r2, r2, #1
 8007c3e:	e7d8      	b.n	8007bf2 <_dtoa_r+0x262>
 8007c40:	636f4361 	.word	0x636f4361
 8007c44:	3fd287a7 	.word	0x3fd287a7
 8007c48:	8b60c8b3 	.word	0x8b60c8b3
 8007c4c:	3fc68a28 	.word	0x3fc68a28
 8007c50:	509f79fb 	.word	0x509f79fb
 8007c54:	3fd34413 	.word	0x3fd34413
 8007c58:	08009ab7 	.word	0x08009ab7
 8007c5c:	08009ace 	.word	0x08009ace
 8007c60:	7ff00000 	.word	0x7ff00000
 8007c64:	08009ab3 	.word	0x08009ab3
 8007c68:	08009a87 	.word	0x08009a87
 8007c6c:	08009a86 	.word	0x08009a86
 8007c70:	3ff80000 	.word	0x3ff80000
 8007c74:	08009bd8 	.word	0x08009bd8
 8007c78:	08009b26 	.word	0x08009b26
 8007c7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c80:	6018      	str	r0, [r3, #0]
 8007c82:	9b07      	ldr	r3, [sp, #28]
 8007c84:	2b0e      	cmp	r3, #14
 8007c86:	f200 80a4 	bhi.w	8007dd2 <_dtoa_r+0x442>
 8007c8a:	2c00      	cmp	r4, #0
 8007c8c:	f000 80a1 	beq.w	8007dd2 <_dtoa_r+0x442>
 8007c90:	2f00      	cmp	r7, #0
 8007c92:	dd33      	ble.n	8007cfc <_dtoa_r+0x36c>
 8007c94:	4b86      	ldr	r3, [pc, #536]	@ (8007eb0 <_dtoa_r+0x520>)
 8007c96:	f007 020f 	and.w	r2, r7, #15
 8007c9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c9e:	05f8      	lsls	r0, r7, #23
 8007ca0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ca4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ca8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007cac:	d516      	bpl.n	8007cdc <_dtoa_r+0x34c>
 8007cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cb2:	4b80      	ldr	r3, [pc, #512]	@ (8007eb4 <_dtoa_r+0x524>)
 8007cb4:	2603      	movs	r6, #3
 8007cb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cba:	f7f8 fd37 	bl	800072c <__aeabi_ddiv>
 8007cbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cc2:	f004 040f 	and.w	r4, r4, #15
 8007cc6:	4d7b      	ldr	r5, [pc, #492]	@ (8007eb4 <_dtoa_r+0x524>)
 8007cc8:	b954      	cbnz	r4, 8007ce0 <_dtoa_r+0x350>
 8007cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cd2:	f7f8 fd2b 	bl	800072c <__aeabi_ddiv>
 8007cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cda:	e028      	b.n	8007d2e <_dtoa_r+0x39e>
 8007cdc:	2602      	movs	r6, #2
 8007cde:	e7f2      	b.n	8007cc6 <_dtoa_r+0x336>
 8007ce0:	07e1      	lsls	r1, r4, #31
 8007ce2:	d508      	bpl.n	8007cf6 <_dtoa_r+0x366>
 8007ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ce8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cec:	f7f8 fbf4 	bl	80004d8 <__aeabi_dmul>
 8007cf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cf4:	3601      	adds	r6, #1
 8007cf6:	1064      	asrs	r4, r4, #1
 8007cf8:	3508      	adds	r5, #8
 8007cfa:	e7e5      	b.n	8007cc8 <_dtoa_r+0x338>
 8007cfc:	f000 80d2 	beq.w	8007ea4 <_dtoa_r+0x514>
 8007d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d04:	427c      	negs	r4, r7
 8007d06:	4b6a      	ldr	r3, [pc, #424]	@ (8007eb0 <_dtoa_r+0x520>)
 8007d08:	f004 020f 	and.w	r2, r4, #15
 8007d0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 fbe0 	bl	80004d8 <__aeabi_dmul>
 8007d18:	2602      	movs	r6, #2
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d20:	4d64      	ldr	r5, [pc, #400]	@ (8007eb4 <_dtoa_r+0x524>)
 8007d22:	1124      	asrs	r4, r4, #4
 8007d24:	2c00      	cmp	r4, #0
 8007d26:	f040 80b2 	bne.w	8007e8e <_dtoa_r+0x4fe>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1d3      	bne.n	8007cd6 <_dtoa_r+0x346>
 8007d2e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 80b7 	beq.w	8007ea8 <_dtoa_r+0x518>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	4b5d      	ldr	r3, [pc, #372]	@ (8007eb8 <_dtoa_r+0x528>)
 8007d42:	f7f8 fe3b 	bl	80009bc <__aeabi_dcmplt>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	f000 80ae 	beq.w	8007ea8 <_dtoa_r+0x518>
 8007d4c:	9b07      	ldr	r3, [sp, #28]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 80aa 	beq.w	8007ea8 <_dtoa_r+0x518>
 8007d54:	9b08      	ldr	r3, [sp, #32]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dd37      	ble.n	8007dca <_dtoa_r+0x43a>
 8007d5a:	1e7b      	subs	r3, r7, #1
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	9304      	str	r3, [sp, #16]
 8007d60:	2200      	movs	r2, #0
 8007d62:	4629      	mov	r1, r5
 8007d64:	4b55      	ldr	r3, [pc, #340]	@ (8007ebc <_dtoa_r+0x52c>)
 8007d66:	f7f8 fbb7 	bl	80004d8 <__aeabi_dmul>
 8007d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d6e:	9c08      	ldr	r4, [sp, #32]
 8007d70:	3601      	adds	r6, #1
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7f8 fb46 	bl	8000404 <__aeabi_i2d>
 8007d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d7c:	f7f8 fbac 	bl	80004d8 <__aeabi_dmul>
 8007d80:	2200      	movs	r2, #0
 8007d82:	4b4f      	ldr	r3, [pc, #316]	@ (8007ec0 <_dtoa_r+0x530>)
 8007d84:	f7f8 f9f2 	bl	800016c <__adddf3>
 8007d88:	4605      	mov	r5, r0
 8007d8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d8e:	2c00      	cmp	r4, #0
 8007d90:	f040 809a 	bne.w	8007ec8 <_dtoa_r+0x538>
 8007d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8007ec4 <_dtoa_r+0x534>)
 8007d9c:	f7f8 f9e4 	bl	8000168 <__aeabi_dsub>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007da8:	462a      	mov	r2, r5
 8007daa:	4633      	mov	r3, r6
 8007dac:	f7f8 fe24 	bl	80009f8 <__aeabi_dcmpgt>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	f040 828e 	bne.w	80082d2 <_dtoa_r+0x942>
 8007db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dba:	462a      	mov	r2, r5
 8007dbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007dc0:	f7f8 fdfc 	bl	80009bc <__aeabi_dcmplt>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	f040 8127 	bne.w	8008018 <_dtoa_r+0x688>
 8007dca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007dce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007dd2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f2c0 8163 	blt.w	80080a0 <_dtoa_r+0x710>
 8007dda:	2f0e      	cmp	r7, #14
 8007ddc:	f300 8160 	bgt.w	80080a0 <_dtoa_r+0x710>
 8007de0:	4b33      	ldr	r3, [pc, #204]	@ (8007eb0 <_dtoa_r+0x520>)
 8007de2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007de6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007dee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	da03      	bge.n	8007dfc <_dtoa_r+0x46c>
 8007df4:	9b07      	ldr	r3, [sp, #28]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f340 8100 	ble.w	8007ffc <_dtoa_r+0x66c>
 8007dfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e00:	4656      	mov	r6, sl
 8007e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e06:	4620      	mov	r0, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f7f8 fc8f 	bl	800072c <__aeabi_ddiv>
 8007e0e:	f7f8 fe13 	bl	8000a38 <__aeabi_d2iz>
 8007e12:	4680      	mov	r8, r0
 8007e14:	f7f8 faf6 	bl	8000404 <__aeabi_i2d>
 8007e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e1c:	f7f8 fb5c 	bl	80004d8 <__aeabi_dmul>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4620      	mov	r0, r4
 8007e26:	4629      	mov	r1, r5
 8007e28:	f7f8 f99e 	bl	8000168 <__aeabi_dsub>
 8007e2c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e30:	9d07      	ldr	r5, [sp, #28]
 8007e32:	f806 4b01 	strb.w	r4, [r6], #1
 8007e36:	eba6 040a 	sub.w	r4, r6, sl
 8007e3a:	42a5      	cmp	r5, r4
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	f040 8116 	bne.w	8008070 <_dtoa_r+0x6e0>
 8007e44:	f7f8 f992 	bl	800016c <__adddf3>
 8007e48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	460d      	mov	r5, r1
 8007e50:	f7f8 fdd2 	bl	80009f8 <__aeabi_dcmpgt>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	f040 80f8 	bne.w	800804a <_dtoa_r+0x6ba>
 8007e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	f7f8 fda1 	bl	80009a8 <__aeabi_dcmpeq>
 8007e66:	b118      	cbz	r0, 8007e70 <_dtoa_r+0x4e0>
 8007e68:	f018 0f01 	tst.w	r8, #1
 8007e6c:	f040 80ed 	bne.w	800804a <_dtoa_r+0x6ba>
 8007e70:	4649      	mov	r1, r9
 8007e72:	4658      	mov	r0, fp
 8007e74:	f000 fe7a 	bl	8008b6c <_Bfree>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	7033      	strb	r3, [r6, #0]
 8007e7c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007e7e:	3701      	adds	r7, #1
 8007e80:	601f      	str	r7, [r3, #0]
 8007e82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 8320 	beq.w	80084ca <_dtoa_r+0xb3a>
 8007e8a:	601e      	str	r6, [r3, #0]
 8007e8c:	e31d      	b.n	80084ca <_dtoa_r+0xb3a>
 8007e8e:	07e2      	lsls	r2, r4, #31
 8007e90:	d505      	bpl.n	8007e9e <_dtoa_r+0x50e>
 8007e92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e96:	f7f8 fb1f 	bl	80004d8 <__aeabi_dmul>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	3601      	adds	r6, #1
 8007e9e:	1064      	asrs	r4, r4, #1
 8007ea0:	3508      	adds	r5, #8
 8007ea2:	e73f      	b.n	8007d24 <_dtoa_r+0x394>
 8007ea4:	2602      	movs	r6, #2
 8007ea6:	e742      	b.n	8007d2e <_dtoa_r+0x39e>
 8007ea8:	9c07      	ldr	r4, [sp, #28]
 8007eaa:	9704      	str	r7, [sp, #16]
 8007eac:	e761      	b.n	8007d72 <_dtoa_r+0x3e2>
 8007eae:	bf00      	nop
 8007eb0:	08009bd8 	.word	0x08009bd8
 8007eb4:	08009bb0 	.word	0x08009bb0
 8007eb8:	3ff00000 	.word	0x3ff00000
 8007ebc:	40240000 	.word	0x40240000
 8007ec0:	401c0000 	.word	0x401c0000
 8007ec4:	40140000 	.word	0x40140000
 8007ec8:	4b70      	ldr	r3, [pc, #448]	@ (800808c <_dtoa_r+0x6fc>)
 8007eca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ecc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ed0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ed4:	4454      	add	r4, sl
 8007ed6:	2900      	cmp	r1, #0
 8007ed8:	d045      	beq.n	8007f66 <_dtoa_r+0x5d6>
 8007eda:	2000      	movs	r0, #0
 8007edc:	496c      	ldr	r1, [pc, #432]	@ (8008090 <_dtoa_r+0x700>)
 8007ede:	f7f8 fc25 	bl	800072c <__aeabi_ddiv>
 8007ee2:	4633      	mov	r3, r6
 8007ee4:	462a      	mov	r2, r5
 8007ee6:	f7f8 f93f 	bl	8000168 <__aeabi_dsub>
 8007eea:	4656      	mov	r6, sl
 8007eec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef4:	f7f8 fda0 	bl	8000a38 <__aeabi_d2iz>
 8007ef8:	4605      	mov	r5, r0
 8007efa:	f7f8 fa83 	bl	8000404 <__aeabi_i2d>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f06:	f7f8 f92f 	bl	8000168 <__aeabi_dsub>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	3530      	adds	r5, #48	@ 0x30
 8007f10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f18:	f806 5b01 	strb.w	r5, [r6], #1
 8007f1c:	f7f8 fd4e 	bl	80009bc <__aeabi_dcmplt>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d163      	bne.n	8007fec <_dtoa_r+0x65c>
 8007f24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f28:	2000      	movs	r0, #0
 8007f2a:	495a      	ldr	r1, [pc, #360]	@ (8008094 <_dtoa_r+0x704>)
 8007f2c:	f7f8 f91c 	bl	8000168 <__aeabi_dsub>
 8007f30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f34:	f7f8 fd42 	bl	80009bc <__aeabi_dcmplt>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	f040 8087 	bne.w	800804c <_dtoa_r+0x6bc>
 8007f3e:	42a6      	cmp	r6, r4
 8007f40:	f43f af43 	beq.w	8007dca <_dtoa_r+0x43a>
 8007f44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f48:	2200      	movs	r2, #0
 8007f4a:	4b53      	ldr	r3, [pc, #332]	@ (8008098 <_dtoa_r+0x708>)
 8007f4c:	f7f8 fac4 	bl	80004d8 <__aeabi_dmul>
 8007f50:	2200      	movs	r2, #0
 8007f52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8008098 <_dtoa_r+0x708>)
 8007f5c:	f7f8 fabc 	bl	80004d8 <__aeabi_dmul>
 8007f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f64:	e7c4      	b.n	8007ef0 <_dtoa_r+0x560>
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f7f8 fab5 	bl	80004d8 <__aeabi_dmul>
 8007f6e:	4656      	mov	r6, sl
 8007f70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f74:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007f76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f7a:	f7f8 fd5d 	bl	8000a38 <__aeabi_d2iz>
 8007f7e:	4605      	mov	r5, r0
 8007f80:	f7f8 fa40 	bl	8000404 <__aeabi_i2d>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f8c:	f7f8 f8ec 	bl	8000168 <__aeabi_dsub>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	3530      	adds	r5, #48	@ 0x30
 8007f96:	f806 5b01 	strb.w	r5, [r6], #1
 8007f9a:	42a6      	cmp	r6, r4
 8007f9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	d124      	bne.n	8007ff0 <_dtoa_r+0x660>
 8007fa6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007faa:	4b39      	ldr	r3, [pc, #228]	@ (8008090 <_dtoa_r+0x700>)
 8007fac:	f7f8 f8de 	bl	800016c <__adddf3>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fb8:	f7f8 fd1e 	bl	80009f8 <__aeabi_dcmpgt>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d145      	bne.n	800804c <_dtoa_r+0x6bc>
 8007fc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	4932      	ldr	r1, [pc, #200]	@ (8008090 <_dtoa_r+0x700>)
 8007fc8:	f7f8 f8ce 	bl	8000168 <__aeabi_dsub>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd4:	f7f8 fcf2 	bl	80009bc <__aeabi_dcmplt>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f43f aef6 	beq.w	8007dca <_dtoa_r+0x43a>
 8007fde:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007fe0:	1e73      	subs	r3, r6, #1
 8007fe2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fe4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fe8:	2b30      	cmp	r3, #48	@ 0x30
 8007fea:	d0f8      	beq.n	8007fde <_dtoa_r+0x64e>
 8007fec:	9f04      	ldr	r7, [sp, #16]
 8007fee:	e73f      	b.n	8007e70 <_dtoa_r+0x4e0>
 8007ff0:	4b29      	ldr	r3, [pc, #164]	@ (8008098 <_dtoa_r+0x708>)
 8007ff2:	f7f8 fa71 	bl	80004d8 <__aeabi_dmul>
 8007ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ffa:	e7bc      	b.n	8007f76 <_dtoa_r+0x5e6>
 8007ffc:	d10c      	bne.n	8008018 <_dtoa_r+0x688>
 8007ffe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008002:	2200      	movs	r2, #0
 8008004:	4b25      	ldr	r3, [pc, #148]	@ (800809c <_dtoa_r+0x70c>)
 8008006:	f7f8 fa67 	bl	80004d8 <__aeabi_dmul>
 800800a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800800e:	f7f8 fce9 	bl	80009e4 <__aeabi_dcmpge>
 8008012:	2800      	cmp	r0, #0
 8008014:	f000 815b 	beq.w	80082ce <_dtoa_r+0x93e>
 8008018:	2400      	movs	r4, #0
 800801a:	4625      	mov	r5, r4
 800801c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800801e:	4656      	mov	r6, sl
 8008020:	43db      	mvns	r3, r3
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	2700      	movs	r7, #0
 8008026:	4621      	mov	r1, r4
 8008028:	4658      	mov	r0, fp
 800802a:	f000 fd9f 	bl	8008b6c <_Bfree>
 800802e:	2d00      	cmp	r5, #0
 8008030:	d0dc      	beq.n	8007fec <_dtoa_r+0x65c>
 8008032:	b12f      	cbz	r7, 8008040 <_dtoa_r+0x6b0>
 8008034:	42af      	cmp	r7, r5
 8008036:	d003      	beq.n	8008040 <_dtoa_r+0x6b0>
 8008038:	4639      	mov	r1, r7
 800803a:	4658      	mov	r0, fp
 800803c:	f000 fd96 	bl	8008b6c <_Bfree>
 8008040:	4629      	mov	r1, r5
 8008042:	4658      	mov	r0, fp
 8008044:	f000 fd92 	bl	8008b6c <_Bfree>
 8008048:	e7d0      	b.n	8007fec <_dtoa_r+0x65c>
 800804a:	9704      	str	r7, [sp, #16]
 800804c:	4633      	mov	r3, r6
 800804e:	461e      	mov	r6, r3
 8008050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008054:	2a39      	cmp	r2, #57	@ 0x39
 8008056:	d107      	bne.n	8008068 <_dtoa_r+0x6d8>
 8008058:	459a      	cmp	sl, r3
 800805a:	d1f8      	bne.n	800804e <_dtoa_r+0x6be>
 800805c:	9a04      	ldr	r2, [sp, #16]
 800805e:	3201      	adds	r2, #1
 8008060:	9204      	str	r2, [sp, #16]
 8008062:	2230      	movs	r2, #48	@ 0x30
 8008064:	f88a 2000 	strb.w	r2, [sl]
 8008068:	781a      	ldrb	r2, [r3, #0]
 800806a:	3201      	adds	r2, #1
 800806c:	701a      	strb	r2, [r3, #0]
 800806e:	e7bd      	b.n	8007fec <_dtoa_r+0x65c>
 8008070:	2200      	movs	r2, #0
 8008072:	4b09      	ldr	r3, [pc, #36]	@ (8008098 <_dtoa_r+0x708>)
 8008074:	f7f8 fa30 	bl	80004d8 <__aeabi_dmul>
 8008078:	2200      	movs	r2, #0
 800807a:	2300      	movs	r3, #0
 800807c:	4604      	mov	r4, r0
 800807e:	460d      	mov	r5, r1
 8008080:	f7f8 fc92 	bl	80009a8 <__aeabi_dcmpeq>
 8008084:	2800      	cmp	r0, #0
 8008086:	f43f aebc 	beq.w	8007e02 <_dtoa_r+0x472>
 800808a:	e6f1      	b.n	8007e70 <_dtoa_r+0x4e0>
 800808c:	08009bd8 	.word	0x08009bd8
 8008090:	3fe00000 	.word	0x3fe00000
 8008094:	3ff00000 	.word	0x3ff00000
 8008098:	40240000 	.word	0x40240000
 800809c:	40140000 	.word	0x40140000
 80080a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80080a2:	2a00      	cmp	r2, #0
 80080a4:	f000 80db 	beq.w	800825e <_dtoa_r+0x8ce>
 80080a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80080aa:	2a01      	cmp	r2, #1
 80080ac:	f300 80bf 	bgt.w	800822e <_dtoa_r+0x89e>
 80080b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80080b2:	2a00      	cmp	r2, #0
 80080b4:	f000 80b7 	beq.w	8008226 <_dtoa_r+0x896>
 80080b8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80080bc:	4646      	mov	r6, r8
 80080be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80080c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080c2:	2101      	movs	r1, #1
 80080c4:	441a      	add	r2, r3
 80080c6:	4658      	mov	r0, fp
 80080c8:	4498      	add	r8, r3
 80080ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80080cc:	f000 fe02 	bl	8008cd4 <__i2b>
 80080d0:	4605      	mov	r5, r0
 80080d2:	b15e      	cbz	r6, 80080ec <_dtoa_r+0x75c>
 80080d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	dd08      	ble.n	80080ec <_dtoa_r+0x75c>
 80080da:	42b3      	cmp	r3, r6
 80080dc:	bfa8      	it	ge
 80080de:	4633      	movge	r3, r6
 80080e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080e2:	eba8 0803 	sub.w	r8, r8, r3
 80080e6:	1af6      	subs	r6, r6, r3
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ee:	b1f3      	cbz	r3, 800812e <_dtoa_r+0x79e>
 80080f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 80b7 	beq.w	8008266 <_dtoa_r+0x8d6>
 80080f8:	b18c      	cbz	r4, 800811e <_dtoa_r+0x78e>
 80080fa:	4629      	mov	r1, r5
 80080fc:	4622      	mov	r2, r4
 80080fe:	4658      	mov	r0, fp
 8008100:	f000 fea6 	bl	8008e50 <__pow5mult>
 8008104:	464a      	mov	r2, r9
 8008106:	4601      	mov	r1, r0
 8008108:	4605      	mov	r5, r0
 800810a:	4658      	mov	r0, fp
 800810c:	f000 fdf8 	bl	8008d00 <__multiply>
 8008110:	4649      	mov	r1, r9
 8008112:	9004      	str	r0, [sp, #16]
 8008114:	4658      	mov	r0, fp
 8008116:	f000 fd29 	bl	8008b6c <_Bfree>
 800811a:	9b04      	ldr	r3, [sp, #16]
 800811c:	4699      	mov	r9, r3
 800811e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008120:	1b1a      	subs	r2, r3, r4
 8008122:	d004      	beq.n	800812e <_dtoa_r+0x79e>
 8008124:	4649      	mov	r1, r9
 8008126:	4658      	mov	r0, fp
 8008128:	f000 fe92 	bl	8008e50 <__pow5mult>
 800812c:	4681      	mov	r9, r0
 800812e:	2101      	movs	r1, #1
 8008130:	4658      	mov	r0, fp
 8008132:	f000 fdcf 	bl	8008cd4 <__i2b>
 8008136:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008138:	4604      	mov	r4, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 81c9 	beq.w	80084d2 <_dtoa_r+0xb42>
 8008140:	461a      	mov	r2, r3
 8008142:	4601      	mov	r1, r0
 8008144:	4658      	mov	r0, fp
 8008146:	f000 fe83 	bl	8008e50 <__pow5mult>
 800814a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800814c:	4604      	mov	r4, r0
 800814e:	2b01      	cmp	r3, #1
 8008150:	f300 808f 	bgt.w	8008272 <_dtoa_r+0x8e2>
 8008154:	9b02      	ldr	r3, [sp, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f040 8087 	bne.w	800826a <_dtoa_r+0x8da>
 800815c:	9b03      	ldr	r3, [sp, #12]
 800815e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008162:	2b00      	cmp	r3, #0
 8008164:	f040 8083 	bne.w	800826e <_dtoa_r+0x8de>
 8008168:	9b03      	ldr	r3, [sp, #12]
 800816a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800816e:	0d1b      	lsrs	r3, r3, #20
 8008170:	051b      	lsls	r3, r3, #20
 8008172:	b12b      	cbz	r3, 8008180 <_dtoa_r+0x7f0>
 8008174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008176:	f108 0801 	add.w	r8, r8, #1
 800817a:	3301      	adds	r3, #1
 800817c:	9309      	str	r3, [sp, #36]	@ 0x24
 800817e:	2301      	movs	r3, #1
 8008180:	930a      	str	r3, [sp, #40]	@ 0x28
 8008182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 81aa 	beq.w	80084de <_dtoa_r+0xb4e>
 800818a:	6923      	ldr	r3, [r4, #16]
 800818c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008190:	6918      	ldr	r0, [r3, #16]
 8008192:	f000 fd53 	bl	8008c3c <__hi0bits>
 8008196:	f1c0 0020 	rsb	r0, r0, #32
 800819a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800819c:	4418      	add	r0, r3
 800819e:	f010 001f 	ands.w	r0, r0, #31
 80081a2:	d071      	beq.n	8008288 <_dtoa_r+0x8f8>
 80081a4:	f1c0 0320 	rsb	r3, r0, #32
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	dd65      	ble.n	8008278 <_dtoa_r+0x8e8>
 80081ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ae:	f1c0 001c 	rsb	r0, r0, #28
 80081b2:	4403      	add	r3, r0
 80081b4:	4480      	add	r8, r0
 80081b6:	4406      	add	r6, r0
 80081b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ba:	f1b8 0f00 	cmp.w	r8, #0
 80081be:	dd05      	ble.n	80081cc <_dtoa_r+0x83c>
 80081c0:	4649      	mov	r1, r9
 80081c2:	4642      	mov	r2, r8
 80081c4:	4658      	mov	r0, fp
 80081c6:	f000 fe9d 	bl	8008f04 <__lshift>
 80081ca:	4681      	mov	r9, r0
 80081cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dd05      	ble.n	80081de <_dtoa_r+0x84e>
 80081d2:	4621      	mov	r1, r4
 80081d4:	461a      	mov	r2, r3
 80081d6:	4658      	mov	r0, fp
 80081d8:	f000 fe94 	bl	8008f04 <__lshift>
 80081dc:	4604      	mov	r4, r0
 80081de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d053      	beq.n	800828c <_dtoa_r+0x8fc>
 80081e4:	4621      	mov	r1, r4
 80081e6:	4648      	mov	r0, r9
 80081e8:	f000 fef8 	bl	8008fdc <__mcmp>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	da4d      	bge.n	800828c <_dtoa_r+0x8fc>
 80081f0:	1e7b      	subs	r3, r7, #1
 80081f2:	4649      	mov	r1, r9
 80081f4:	9304      	str	r3, [sp, #16]
 80081f6:	220a      	movs	r2, #10
 80081f8:	2300      	movs	r3, #0
 80081fa:	4658      	mov	r0, fp
 80081fc:	f000 fcd8 	bl	8008bb0 <__multadd>
 8008200:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008202:	4681      	mov	r9, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 816c 	beq.w	80084e2 <_dtoa_r+0xb52>
 800820a:	2300      	movs	r3, #0
 800820c:	4629      	mov	r1, r5
 800820e:	220a      	movs	r2, #10
 8008210:	4658      	mov	r0, fp
 8008212:	f000 fccd 	bl	8008bb0 <__multadd>
 8008216:	9b08      	ldr	r3, [sp, #32]
 8008218:	4605      	mov	r5, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	dc61      	bgt.n	80082e2 <_dtoa_r+0x952>
 800821e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008220:	2b02      	cmp	r3, #2
 8008222:	dc3b      	bgt.n	800829c <_dtoa_r+0x90c>
 8008224:	e05d      	b.n	80082e2 <_dtoa_r+0x952>
 8008226:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008228:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800822c:	e746      	b.n	80080bc <_dtoa_r+0x72c>
 800822e:	9b07      	ldr	r3, [sp, #28]
 8008230:	1e5c      	subs	r4, r3, #1
 8008232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008234:	42a3      	cmp	r3, r4
 8008236:	bfbf      	itttt	lt
 8008238:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800823a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800823c:	1ae3      	sublt	r3, r4, r3
 800823e:	18d2      	addlt	r2, r2, r3
 8008240:	bfa8      	it	ge
 8008242:	1b1c      	subge	r4, r3, r4
 8008244:	9b07      	ldr	r3, [sp, #28]
 8008246:	bfbe      	ittt	lt
 8008248:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800824a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800824c:	2400      	movlt	r4, #0
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfb5      	itete	lt
 8008252:	eba8 0603 	sublt.w	r6, r8, r3
 8008256:	4646      	movge	r6, r8
 8008258:	2300      	movlt	r3, #0
 800825a:	9b07      	ldrge	r3, [sp, #28]
 800825c:	e730      	b.n	80080c0 <_dtoa_r+0x730>
 800825e:	4646      	mov	r6, r8
 8008260:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008262:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008264:	e735      	b.n	80080d2 <_dtoa_r+0x742>
 8008266:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008268:	e75c      	b.n	8008124 <_dtoa_r+0x794>
 800826a:	2300      	movs	r3, #0
 800826c:	e788      	b.n	8008180 <_dtoa_r+0x7f0>
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	e786      	b.n	8008180 <_dtoa_r+0x7f0>
 8008272:	2300      	movs	r3, #0
 8008274:	930a      	str	r3, [sp, #40]	@ 0x28
 8008276:	e788      	b.n	800818a <_dtoa_r+0x7fa>
 8008278:	d09f      	beq.n	80081ba <_dtoa_r+0x82a>
 800827a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800827c:	331c      	adds	r3, #28
 800827e:	441a      	add	r2, r3
 8008280:	4498      	add	r8, r3
 8008282:	441e      	add	r6, r3
 8008284:	9209      	str	r2, [sp, #36]	@ 0x24
 8008286:	e798      	b.n	80081ba <_dtoa_r+0x82a>
 8008288:	4603      	mov	r3, r0
 800828a:	e7f6      	b.n	800827a <_dtoa_r+0x8ea>
 800828c:	9b07      	ldr	r3, [sp, #28]
 800828e:	9704      	str	r7, [sp, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	dc20      	bgt.n	80082d6 <_dtoa_r+0x946>
 8008294:	9308      	str	r3, [sp, #32]
 8008296:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008298:	2b02      	cmp	r3, #2
 800829a:	dd1e      	ble.n	80082da <_dtoa_r+0x94a>
 800829c:	9b08      	ldr	r3, [sp, #32]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f47f aebc 	bne.w	800801c <_dtoa_r+0x68c>
 80082a4:	4621      	mov	r1, r4
 80082a6:	2205      	movs	r2, #5
 80082a8:	4658      	mov	r0, fp
 80082aa:	f000 fc81 	bl	8008bb0 <__multadd>
 80082ae:	4601      	mov	r1, r0
 80082b0:	4604      	mov	r4, r0
 80082b2:	4648      	mov	r0, r9
 80082b4:	f000 fe92 	bl	8008fdc <__mcmp>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	f77f aeaf 	ble.w	800801c <_dtoa_r+0x68c>
 80082be:	2331      	movs	r3, #49	@ 0x31
 80082c0:	4656      	mov	r6, sl
 80082c2:	f806 3b01 	strb.w	r3, [r6], #1
 80082c6:	9b04      	ldr	r3, [sp, #16]
 80082c8:	3301      	adds	r3, #1
 80082ca:	9304      	str	r3, [sp, #16]
 80082cc:	e6aa      	b.n	8008024 <_dtoa_r+0x694>
 80082ce:	9c07      	ldr	r4, [sp, #28]
 80082d0:	9704      	str	r7, [sp, #16]
 80082d2:	4625      	mov	r5, r4
 80082d4:	e7f3      	b.n	80082be <_dtoa_r+0x92e>
 80082d6:	9b07      	ldr	r3, [sp, #28]
 80082d8:	9308      	str	r3, [sp, #32]
 80082da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 8104 	beq.w	80084ea <_dtoa_r+0xb5a>
 80082e2:	2e00      	cmp	r6, #0
 80082e4:	dd05      	ble.n	80082f2 <_dtoa_r+0x962>
 80082e6:	4629      	mov	r1, r5
 80082e8:	4632      	mov	r2, r6
 80082ea:	4658      	mov	r0, fp
 80082ec:	f000 fe0a 	bl	8008f04 <__lshift>
 80082f0:	4605      	mov	r5, r0
 80082f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d05a      	beq.n	80083ae <_dtoa_r+0xa1e>
 80082f8:	4658      	mov	r0, fp
 80082fa:	6869      	ldr	r1, [r5, #4]
 80082fc:	f000 fbf6 	bl	8008aec <_Balloc>
 8008300:	4606      	mov	r6, r0
 8008302:	b928      	cbnz	r0, 8008310 <_dtoa_r+0x980>
 8008304:	4602      	mov	r2, r0
 8008306:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800830a:	4b83      	ldr	r3, [pc, #524]	@ (8008518 <_dtoa_r+0xb88>)
 800830c:	f7ff bb54 	b.w	80079b8 <_dtoa_r+0x28>
 8008310:	692a      	ldr	r2, [r5, #16]
 8008312:	f105 010c 	add.w	r1, r5, #12
 8008316:	3202      	adds	r2, #2
 8008318:	0092      	lsls	r2, r2, #2
 800831a:	300c      	adds	r0, #12
 800831c:	f7ff faa1 	bl	8007862 <memcpy>
 8008320:	2201      	movs	r2, #1
 8008322:	4631      	mov	r1, r6
 8008324:	4658      	mov	r0, fp
 8008326:	f000 fded 	bl	8008f04 <__lshift>
 800832a:	462f      	mov	r7, r5
 800832c:	4605      	mov	r5, r0
 800832e:	f10a 0301 	add.w	r3, sl, #1
 8008332:	9307      	str	r3, [sp, #28]
 8008334:	9b08      	ldr	r3, [sp, #32]
 8008336:	4453      	add	r3, sl
 8008338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800833a:	9b02      	ldr	r3, [sp, #8]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	930a      	str	r3, [sp, #40]	@ 0x28
 8008342:	9b07      	ldr	r3, [sp, #28]
 8008344:	4621      	mov	r1, r4
 8008346:	3b01      	subs	r3, #1
 8008348:	4648      	mov	r0, r9
 800834a:	9302      	str	r3, [sp, #8]
 800834c:	f7ff fa97 	bl	800787e <quorem>
 8008350:	4639      	mov	r1, r7
 8008352:	9008      	str	r0, [sp, #32]
 8008354:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008358:	4648      	mov	r0, r9
 800835a:	f000 fe3f 	bl	8008fdc <__mcmp>
 800835e:	462a      	mov	r2, r5
 8008360:	9009      	str	r0, [sp, #36]	@ 0x24
 8008362:	4621      	mov	r1, r4
 8008364:	4658      	mov	r0, fp
 8008366:	f000 fe55 	bl	8009014 <__mdiff>
 800836a:	68c2      	ldr	r2, [r0, #12]
 800836c:	4606      	mov	r6, r0
 800836e:	bb02      	cbnz	r2, 80083b2 <_dtoa_r+0xa22>
 8008370:	4601      	mov	r1, r0
 8008372:	4648      	mov	r0, r9
 8008374:	f000 fe32 	bl	8008fdc <__mcmp>
 8008378:	4602      	mov	r2, r0
 800837a:	4631      	mov	r1, r6
 800837c:	4658      	mov	r0, fp
 800837e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008380:	f000 fbf4 	bl	8008b6c <_Bfree>
 8008384:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008386:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008388:	9e07      	ldr	r6, [sp, #28]
 800838a:	ea43 0102 	orr.w	r1, r3, r2
 800838e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008390:	4319      	orrs	r1, r3
 8008392:	d110      	bne.n	80083b6 <_dtoa_r+0xa26>
 8008394:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008398:	d029      	beq.n	80083ee <_dtoa_r+0xa5e>
 800839a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800839c:	2b00      	cmp	r3, #0
 800839e:	dd02      	ble.n	80083a6 <_dtoa_r+0xa16>
 80083a0:	9b08      	ldr	r3, [sp, #32]
 80083a2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80083a6:	9b02      	ldr	r3, [sp, #8]
 80083a8:	f883 8000 	strb.w	r8, [r3]
 80083ac:	e63b      	b.n	8008026 <_dtoa_r+0x696>
 80083ae:	4628      	mov	r0, r5
 80083b0:	e7bb      	b.n	800832a <_dtoa_r+0x99a>
 80083b2:	2201      	movs	r2, #1
 80083b4:	e7e1      	b.n	800837a <_dtoa_r+0x9ea>
 80083b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	db04      	blt.n	80083c6 <_dtoa_r+0xa36>
 80083bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80083be:	430b      	orrs	r3, r1
 80083c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083c2:	430b      	orrs	r3, r1
 80083c4:	d120      	bne.n	8008408 <_dtoa_r+0xa78>
 80083c6:	2a00      	cmp	r2, #0
 80083c8:	dded      	ble.n	80083a6 <_dtoa_r+0xa16>
 80083ca:	4649      	mov	r1, r9
 80083cc:	2201      	movs	r2, #1
 80083ce:	4658      	mov	r0, fp
 80083d0:	f000 fd98 	bl	8008f04 <__lshift>
 80083d4:	4621      	mov	r1, r4
 80083d6:	4681      	mov	r9, r0
 80083d8:	f000 fe00 	bl	8008fdc <__mcmp>
 80083dc:	2800      	cmp	r0, #0
 80083de:	dc03      	bgt.n	80083e8 <_dtoa_r+0xa58>
 80083e0:	d1e1      	bne.n	80083a6 <_dtoa_r+0xa16>
 80083e2:	f018 0f01 	tst.w	r8, #1
 80083e6:	d0de      	beq.n	80083a6 <_dtoa_r+0xa16>
 80083e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083ec:	d1d8      	bne.n	80083a0 <_dtoa_r+0xa10>
 80083ee:	2339      	movs	r3, #57	@ 0x39
 80083f0:	9a02      	ldr	r2, [sp, #8]
 80083f2:	7013      	strb	r3, [r2, #0]
 80083f4:	4633      	mov	r3, r6
 80083f6:	461e      	mov	r6, r3
 80083f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	2a39      	cmp	r2, #57	@ 0x39
 8008400:	d052      	beq.n	80084a8 <_dtoa_r+0xb18>
 8008402:	3201      	adds	r2, #1
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	e60e      	b.n	8008026 <_dtoa_r+0x696>
 8008408:	2a00      	cmp	r2, #0
 800840a:	dd07      	ble.n	800841c <_dtoa_r+0xa8c>
 800840c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008410:	d0ed      	beq.n	80083ee <_dtoa_r+0xa5e>
 8008412:	9a02      	ldr	r2, [sp, #8]
 8008414:	f108 0301 	add.w	r3, r8, #1
 8008418:	7013      	strb	r3, [r2, #0]
 800841a:	e604      	b.n	8008026 <_dtoa_r+0x696>
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	9a07      	ldr	r2, [sp, #28]
 8008420:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008424:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008426:	4293      	cmp	r3, r2
 8008428:	d028      	beq.n	800847c <_dtoa_r+0xaec>
 800842a:	4649      	mov	r1, r9
 800842c:	2300      	movs	r3, #0
 800842e:	220a      	movs	r2, #10
 8008430:	4658      	mov	r0, fp
 8008432:	f000 fbbd 	bl	8008bb0 <__multadd>
 8008436:	42af      	cmp	r7, r5
 8008438:	4681      	mov	r9, r0
 800843a:	f04f 0300 	mov.w	r3, #0
 800843e:	f04f 020a 	mov.w	r2, #10
 8008442:	4639      	mov	r1, r7
 8008444:	4658      	mov	r0, fp
 8008446:	d107      	bne.n	8008458 <_dtoa_r+0xac8>
 8008448:	f000 fbb2 	bl	8008bb0 <__multadd>
 800844c:	4607      	mov	r7, r0
 800844e:	4605      	mov	r5, r0
 8008450:	9b07      	ldr	r3, [sp, #28]
 8008452:	3301      	adds	r3, #1
 8008454:	9307      	str	r3, [sp, #28]
 8008456:	e774      	b.n	8008342 <_dtoa_r+0x9b2>
 8008458:	f000 fbaa 	bl	8008bb0 <__multadd>
 800845c:	4629      	mov	r1, r5
 800845e:	4607      	mov	r7, r0
 8008460:	2300      	movs	r3, #0
 8008462:	220a      	movs	r2, #10
 8008464:	4658      	mov	r0, fp
 8008466:	f000 fba3 	bl	8008bb0 <__multadd>
 800846a:	4605      	mov	r5, r0
 800846c:	e7f0      	b.n	8008450 <_dtoa_r+0xac0>
 800846e:	9b08      	ldr	r3, [sp, #32]
 8008470:	2700      	movs	r7, #0
 8008472:	2b00      	cmp	r3, #0
 8008474:	bfcc      	ite	gt
 8008476:	461e      	movgt	r6, r3
 8008478:	2601      	movle	r6, #1
 800847a:	4456      	add	r6, sl
 800847c:	4649      	mov	r1, r9
 800847e:	2201      	movs	r2, #1
 8008480:	4658      	mov	r0, fp
 8008482:	f000 fd3f 	bl	8008f04 <__lshift>
 8008486:	4621      	mov	r1, r4
 8008488:	4681      	mov	r9, r0
 800848a:	f000 fda7 	bl	8008fdc <__mcmp>
 800848e:	2800      	cmp	r0, #0
 8008490:	dcb0      	bgt.n	80083f4 <_dtoa_r+0xa64>
 8008492:	d102      	bne.n	800849a <_dtoa_r+0xb0a>
 8008494:	f018 0f01 	tst.w	r8, #1
 8008498:	d1ac      	bne.n	80083f4 <_dtoa_r+0xa64>
 800849a:	4633      	mov	r3, r6
 800849c:	461e      	mov	r6, r3
 800849e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084a2:	2a30      	cmp	r2, #48	@ 0x30
 80084a4:	d0fa      	beq.n	800849c <_dtoa_r+0xb0c>
 80084a6:	e5be      	b.n	8008026 <_dtoa_r+0x696>
 80084a8:	459a      	cmp	sl, r3
 80084aa:	d1a4      	bne.n	80083f6 <_dtoa_r+0xa66>
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	3301      	adds	r3, #1
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	2331      	movs	r3, #49	@ 0x31
 80084b4:	f88a 3000 	strb.w	r3, [sl]
 80084b8:	e5b5      	b.n	8008026 <_dtoa_r+0x696>
 80084ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80084bc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800851c <_dtoa_r+0xb8c>
 80084c0:	b11b      	cbz	r3, 80084ca <_dtoa_r+0xb3a>
 80084c2:	f10a 0308 	add.w	r3, sl, #8
 80084c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80084c8:	6013      	str	r3, [r2, #0]
 80084ca:	4650      	mov	r0, sl
 80084cc:	b017      	add	sp, #92	@ 0x5c
 80084ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	f77f ae3d 	ble.w	8008154 <_dtoa_r+0x7c4>
 80084da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80084de:	2001      	movs	r0, #1
 80084e0:	e65b      	b.n	800819a <_dtoa_r+0x80a>
 80084e2:	9b08      	ldr	r3, [sp, #32]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f77f aed6 	ble.w	8008296 <_dtoa_r+0x906>
 80084ea:	4656      	mov	r6, sl
 80084ec:	4621      	mov	r1, r4
 80084ee:	4648      	mov	r0, r9
 80084f0:	f7ff f9c5 	bl	800787e <quorem>
 80084f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084f8:	9b08      	ldr	r3, [sp, #32]
 80084fa:	f806 8b01 	strb.w	r8, [r6], #1
 80084fe:	eba6 020a 	sub.w	r2, r6, sl
 8008502:	4293      	cmp	r3, r2
 8008504:	ddb3      	ble.n	800846e <_dtoa_r+0xade>
 8008506:	4649      	mov	r1, r9
 8008508:	2300      	movs	r3, #0
 800850a:	220a      	movs	r2, #10
 800850c:	4658      	mov	r0, fp
 800850e:	f000 fb4f 	bl	8008bb0 <__multadd>
 8008512:	4681      	mov	r9, r0
 8008514:	e7ea      	b.n	80084ec <_dtoa_r+0xb5c>
 8008516:	bf00      	nop
 8008518:	08009b26 	.word	0x08009b26
 800851c:	08009aaa 	.word	0x08009aaa

08008520 <_free_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4605      	mov	r5, r0
 8008524:	2900      	cmp	r1, #0
 8008526:	d040      	beq.n	80085aa <_free_r+0x8a>
 8008528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800852c:	1f0c      	subs	r4, r1, #4
 800852e:	2b00      	cmp	r3, #0
 8008530:	bfb8      	it	lt
 8008532:	18e4      	addlt	r4, r4, r3
 8008534:	f000 face 	bl	8008ad4 <__malloc_lock>
 8008538:	4a1c      	ldr	r2, [pc, #112]	@ (80085ac <_free_r+0x8c>)
 800853a:	6813      	ldr	r3, [r2, #0]
 800853c:	b933      	cbnz	r3, 800854c <_free_r+0x2c>
 800853e:	6063      	str	r3, [r4, #4]
 8008540:	6014      	str	r4, [r2, #0]
 8008542:	4628      	mov	r0, r5
 8008544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008548:	f000 baca 	b.w	8008ae0 <__malloc_unlock>
 800854c:	42a3      	cmp	r3, r4
 800854e:	d908      	bls.n	8008562 <_free_r+0x42>
 8008550:	6820      	ldr	r0, [r4, #0]
 8008552:	1821      	adds	r1, r4, r0
 8008554:	428b      	cmp	r3, r1
 8008556:	bf01      	itttt	eq
 8008558:	6819      	ldreq	r1, [r3, #0]
 800855a:	685b      	ldreq	r3, [r3, #4]
 800855c:	1809      	addeq	r1, r1, r0
 800855e:	6021      	streq	r1, [r4, #0]
 8008560:	e7ed      	b.n	800853e <_free_r+0x1e>
 8008562:	461a      	mov	r2, r3
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	b10b      	cbz	r3, 800856c <_free_r+0x4c>
 8008568:	42a3      	cmp	r3, r4
 800856a:	d9fa      	bls.n	8008562 <_free_r+0x42>
 800856c:	6811      	ldr	r1, [r2, #0]
 800856e:	1850      	adds	r0, r2, r1
 8008570:	42a0      	cmp	r0, r4
 8008572:	d10b      	bne.n	800858c <_free_r+0x6c>
 8008574:	6820      	ldr	r0, [r4, #0]
 8008576:	4401      	add	r1, r0
 8008578:	1850      	adds	r0, r2, r1
 800857a:	4283      	cmp	r3, r0
 800857c:	6011      	str	r1, [r2, #0]
 800857e:	d1e0      	bne.n	8008542 <_free_r+0x22>
 8008580:	6818      	ldr	r0, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	4408      	add	r0, r1
 8008586:	6010      	str	r0, [r2, #0]
 8008588:	6053      	str	r3, [r2, #4]
 800858a:	e7da      	b.n	8008542 <_free_r+0x22>
 800858c:	d902      	bls.n	8008594 <_free_r+0x74>
 800858e:	230c      	movs	r3, #12
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	e7d6      	b.n	8008542 <_free_r+0x22>
 8008594:	6820      	ldr	r0, [r4, #0]
 8008596:	1821      	adds	r1, r4, r0
 8008598:	428b      	cmp	r3, r1
 800859a:	bf01      	itttt	eq
 800859c:	6819      	ldreq	r1, [r3, #0]
 800859e:	685b      	ldreq	r3, [r3, #4]
 80085a0:	1809      	addeq	r1, r1, r0
 80085a2:	6021      	streq	r1, [r4, #0]
 80085a4:	6063      	str	r3, [r4, #4]
 80085a6:	6054      	str	r4, [r2, #4]
 80085a8:	e7cb      	b.n	8008542 <_free_r+0x22>
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	20002620 	.word	0x20002620

080085b0 <__sfputc_r>:
 80085b0:	6893      	ldr	r3, [r2, #8]
 80085b2:	b410      	push	{r4}
 80085b4:	3b01      	subs	r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	6093      	str	r3, [r2, #8]
 80085ba:	da07      	bge.n	80085cc <__sfputc_r+0x1c>
 80085bc:	6994      	ldr	r4, [r2, #24]
 80085be:	42a3      	cmp	r3, r4
 80085c0:	db01      	blt.n	80085c6 <__sfputc_r+0x16>
 80085c2:	290a      	cmp	r1, #10
 80085c4:	d102      	bne.n	80085cc <__sfputc_r+0x1c>
 80085c6:	bc10      	pop	{r4}
 80085c8:	f000 be53 	b.w	8009272 <__swbuf_r>
 80085cc:	6813      	ldr	r3, [r2, #0]
 80085ce:	1c58      	adds	r0, r3, #1
 80085d0:	6010      	str	r0, [r2, #0]
 80085d2:	7019      	strb	r1, [r3, #0]
 80085d4:	4608      	mov	r0, r1
 80085d6:	bc10      	pop	{r4}
 80085d8:	4770      	bx	lr

080085da <__sfputs_r>:
 80085da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085dc:	4606      	mov	r6, r0
 80085de:	460f      	mov	r7, r1
 80085e0:	4614      	mov	r4, r2
 80085e2:	18d5      	adds	r5, r2, r3
 80085e4:	42ac      	cmp	r4, r5
 80085e6:	d101      	bne.n	80085ec <__sfputs_r+0x12>
 80085e8:	2000      	movs	r0, #0
 80085ea:	e007      	b.n	80085fc <__sfputs_r+0x22>
 80085ec:	463a      	mov	r2, r7
 80085ee:	4630      	mov	r0, r6
 80085f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f4:	f7ff ffdc 	bl	80085b0 <__sfputc_r>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	d1f3      	bne.n	80085e4 <__sfputs_r+0xa>
 80085fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008600 <_vfiprintf_r>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	460d      	mov	r5, r1
 8008606:	4614      	mov	r4, r2
 8008608:	4698      	mov	r8, r3
 800860a:	4606      	mov	r6, r0
 800860c:	b09d      	sub	sp, #116	@ 0x74
 800860e:	b118      	cbz	r0, 8008618 <_vfiprintf_r+0x18>
 8008610:	6a03      	ldr	r3, [r0, #32]
 8008612:	b90b      	cbnz	r3, 8008618 <_vfiprintf_r+0x18>
 8008614:	f7fe ffda 	bl	80075cc <__sinit>
 8008618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800861a:	07d9      	lsls	r1, r3, #31
 800861c:	d405      	bmi.n	800862a <_vfiprintf_r+0x2a>
 800861e:	89ab      	ldrh	r3, [r5, #12]
 8008620:	059a      	lsls	r2, r3, #22
 8008622:	d402      	bmi.n	800862a <_vfiprintf_r+0x2a>
 8008624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008626:	f7ff f90c 	bl	8007842 <__retarget_lock_acquire_recursive>
 800862a:	89ab      	ldrh	r3, [r5, #12]
 800862c:	071b      	lsls	r3, r3, #28
 800862e:	d501      	bpl.n	8008634 <_vfiprintf_r+0x34>
 8008630:	692b      	ldr	r3, [r5, #16]
 8008632:	b99b      	cbnz	r3, 800865c <_vfiprintf_r+0x5c>
 8008634:	4629      	mov	r1, r5
 8008636:	4630      	mov	r0, r6
 8008638:	f000 fe5a 	bl	80092f0 <__swsetup_r>
 800863c:	b170      	cbz	r0, 800865c <_vfiprintf_r+0x5c>
 800863e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008640:	07dc      	lsls	r4, r3, #31
 8008642:	d504      	bpl.n	800864e <_vfiprintf_r+0x4e>
 8008644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008648:	b01d      	add	sp, #116	@ 0x74
 800864a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864e:	89ab      	ldrh	r3, [r5, #12]
 8008650:	0598      	lsls	r0, r3, #22
 8008652:	d4f7      	bmi.n	8008644 <_vfiprintf_r+0x44>
 8008654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008656:	f7ff f8f5 	bl	8007844 <__retarget_lock_release_recursive>
 800865a:	e7f3      	b.n	8008644 <_vfiprintf_r+0x44>
 800865c:	2300      	movs	r3, #0
 800865e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008660:	2320      	movs	r3, #32
 8008662:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008666:	2330      	movs	r3, #48	@ 0x30
 8008668:	f04f 0901 	mov.w	r9, #1
 800866c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008670:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800881c <_vfiprintf_r+0x21c>
 8008674:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008678:	4623      	mov	r3, r4
 800867a:	469a      	mov	sl, r3
 800867c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008680:	b10a      	cbz	r2, 8008686 <_vfiprintf_r+0x86>
 8008682:	2a25      	cmp	r2, #37	@ 0x25
 8008684:	d1f9      	bne.n	800867a <_vfiprintf_r+0x7a>
 8008686:	ebba 0b04 	subs.w	fp, sl, r4
 800868a:	d00b      	beq.n	80086a4 <_vfiprintf_r+0xa4>
 800868c:	465b      	mov	r3, fp
 800868e:	4622      	mov	r2, r4
 8008690:	4629      	mov	r1, r5
 8008692:	4630      	mov	r0, r6
 8008694:	f7ff ffa1 	bl	80085da <__sfputs_r>
 8008698:	3001      	adds	r0, #1
 800869a:	f000 80a7 	beq.w	80087ec <_vfiprintf_r+0x1ec>
 800869e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086a0:	445a      	add	r2, fp
 80086a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80086a4:	f89a 3000 	ldrb.w	r3, [sl]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 809f 	beq.w	80087ec <_vfiprintf_r+0x1ec>
 80086ae:	2300      	movs	r3, #0
 80086b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086b8:	f10a 0a01 	add.w	sl, sl, #1
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	9307      	str	r3, [sp, #28]
 80086c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80086c6:	4654      	mov	r4, sl
 80086c8:	2205      	movs	r2, #5
 80086ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ce:	4853      	ldr	r0, [pc, #332]	@ (800881c <_vfiprintf_r+0x21c>)
 80086d0:	f7ff f8b9 	bl	8007846 <memchr>
 80086d4:	9a04      	ldr	r2, [sp, #16]
 80086d6:	b9d8      	cbnz	r0, 8008710 <_vfiprintf_r+0x110>
 80086d8:	06d1      	lsls	r1, r2, #27
 80086da:	bf44      	itt	mi
 80086dc:	2320      	movmi	r3, #32
 80086de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086e2:	0713      	lsls	r3, r2, #28
 80086e4:	bf44      	itt	mi
 80086e6:	232b      	movmi	r3, #43	@ 0x2b
 80086e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086ec:	f89a 3000 	ldrb.w	r3, [sl]
 80086f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086f2:	d015      	beq.n	8008720 <_vfiprintf_r+0x120>
 80086f4:	4654      	mov	r4, sl
 80086f6:	2000      	movs	r0, #0
 80086f8:	f04f 0c0a 	mov.w	ip, #10
 80086fc:	9a07      	ldr	r2, [sp, #28]
 80086fe:	4621      	mov	r1, r4
 8008700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008704:	3b30      	subs	r3, #48	@ 0x30
 8008706:	2b09      	cmp	r3, #9
 8008708:	d94b      	bls.n	80087a2 <_vfiprintf_r+0x1a2>
 800870a:	b1b0      	cbz	r0, 800873a <_vfiprintf_r+0x13a>
 800870c:	9207      	str	r2, [sp, #28]
 800870e:	e014      	b.n	800873a <_vfiprintf_r+0x13a>
 8008710:	eba0 0308 	sub.w	r3, r0, r8
 8008714:	fa09 f303 	lsl.w	r3, r9, r3
 8008718:	4313      	orrs	r3, r2
 800871a:	46a2      	mov	sl, r4
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	e7d2      	b.n	80086c6 <_vfiprintf_r+0xc6>
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	1d19      	adds	r1, r3, #4
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	9103      	str	r1, [sp, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	bfbb      	ittet	lt
 800872c:	425b      	neglt	r3, r3
 800872e:	f042 0202 	orrlt.w	r2, r2, #2
 8008732:	9307      	strge	r3, [sp, #28]
 8008734:	9307      	strlt	r3, [sp, #28]
 8008736:	bfb8      	it	lt
 8008738:	9204      	strlt	r2, [sp, #16]
 800873a:	7823      	ldrb	r3, [r4, #0]
 800873c:	2b2e      	cmp	r3, #46	@ 0x2e
 800873e:	d10a      	bne.n	8008756 <_vfiprintf_r+0x156>
 8008740:	7863      	ldrb	r3, [r4, #1]
 8008742:	2b2a      	cmp	r3, #42	@ 0x2a
 8008744:	d132      	bne.n	80087ac <_vfiprintf_r+0x1ac>
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	3402      	adds	r4, #2
 800874a:	1d1a      	adds	r2, r3, #4
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	9203      	str	r2, [sp, #12]
 8008750:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008754:	9305      	str	r3, [sp, #20]
 8008756:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008820 <_vfiprintf_r+0x220>
 800875a:	2203      	movs	r2, #3
 800875c:	4650      	mov	r0, sl
 800875e:	7821      	ldrb	r1, [r4, #0]
 8008760:	f7ff f871 	bl	8007846 <memchr>
 8008764:	b138      	cbz	r0, 8008776 <_vfiprintf_r+0x176>
 8008766:	2240      	movs	r2, #64	@ 0x40
 8008768:	9b04      	ldr	r3, [sp, #16]
 800876a:	eba0 000a 	sub.w	r0, r0, sl
 800876e:	4082      	lsls	r2, r0
 8008770:	4313      	orrs	r3, r2
 8008772:	3401      	adds	r4, #1
 8008774:	9304      	str	r3, [sp, #16]
 8008776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800877a:	2206      	movs	r2, #6
 800877c:	4829      	ldr	r0, [pc, #164]	@ (8008824 <_vfiprintf_r+0x224>)
 800877e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008782:	f7ff f860 	bl	8007846 <memchr>
 8008786:	2800      	cmp	r0, #0
 8008788:	d03f      	beq.n	800880a <_vfiprintf_r+0x20a>
 800878a:	4b27      	ldr	r3, [pc, #156]	@ (8008828 <_vfiprintf_r+0x228>)
 800878c:	bb1b      	cbnz	r3, 80087d6 <_vfiprintf_r+0x1d6>
 800878e:	9b03      	ldr	r3, [sp, #12]
 8008790:	3307      	adds	r3, #7
 8008792:	f023 0307 	bic.w	r3, r3, #7
 8008796:	3308      	adds	r3, #8
 8008798:	9303      	str	r3, [sp, #12]
 800879a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879c:	443b      	add	r3, r7
 800879e:	9309      	str	r3, [sp, #36]	@ 0x24
 80087a0:	e76a      	b.n	8008678 <_vfiprintf_r+0x78>
 80087a2:	460c      	mov	r4, r1
 80087a4:	2001      	movs	r0, #1
 80087a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80087aa:	e7a8      	b.n	80086fe <_vfiprintf_r+0xfe>
 80087ac:	2300      	movs	r3, #0
 80087ae:	f04f 0c0a 	mov.w	ip, #10
 80087b2:	4619      	mov	r1, r3
 80087b4:	3401      	adds	r4, #1
 80087b6:	9305      	str	r3, [sp, #20]
 80087b8:	4620      	mov	r0, r4
 80087ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087be:	3a30      	subs	r2, #48	@ 0x30
 80087c0:	2a09      	cmp	r2, #9
 80087c2:	d903      	bls.n	80087cc <_vfiprintf_r+0x1cc>
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d0c6      	beq.n	8008756 <_vfiprintf_r+0x156>
 80087c8:	9105      	str	r1, [sp, #20]
 80087ca:	e7c4      	b.n	8008756 <_vfiprintf_r+0x156>
 80087cc:	4604      	mov	r4, r0
 80087ce:	2301      	movs	r3, #1
 80087d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80087d4:	e7f0      	b.n	80087b8 <_vfiprintf_r+0x1b8>
 80087d6:	ab03      	add	r3, sp, #12
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	462a      	mov	r2, r5
 80087dc:	4630      	mov	r0, r6
 80087de:	4b13      	ldr	r3, [pc, #76]	@ (800882c <_vfiprintf_r+0x22c>)
 80087e0:	a904      	add	r1, sp, #16
 80087e2:	f7fe faa9 	bl	8006d38 <_printf_float>
 80087e6:	4607      	mov	r7, r0
 80087e8:	1c78      	adds	r0, r7, #1
 80087ea:	d1d6      	bne.n	800879a <_vfiprintf_r+0x19a>
 80087ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087ee:	07d9      	lsls	r1, r3, #31
 80087f0:	d405      	bmi.n	80087fe <_vfiprintf_r+0x1fe>
 80087f2:	89ab      	ldrh	r3, [r5, #12]
 80087f4:	059a      	lsls	r2, r3, #22
 80087f6:	d402      	bmi.n	80087fe <_vfiprintf_r+0x1fe>
 80087f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087fa:	f7ff f823 	bl	8007844 <__retarget_lock_release_recursive>
 80087fe:	89ab      	ldrh	r3, [r5, #12]
 8008800:	065b      	lsls	r3, r3, #25
 8008802:	f53f af1f 	bmi.w	8008644 <_vfiprintf_r+0x44>
 8008806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008808:	e71e      	b.n	8008648 <_vfiprintf_r+0x48>
 800880a:	ab03      	add	r3, sp, #12
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	462a      	mov	r2, r5
 8008810:	4630      	mov	r0, r6
 8008812:	4b06      	ldr	r3, [pc, #24]	@ (800882c <_vfiprintf_r+0x22c>)
 8008814:	a904      	add	r1, sp, #16
 8008816:	f7fe fd2d 	bl	8007274 <_printf_i>
 800881a:	e7e4      	b.n	80087e6 <_vfiprintf_r+0x1e6>
 800881c:	08009b37 	.word	0x08009b37
 8008820:	08009b3d 	.word	0x08009b3d
 8008824:	08009b41 	.word	0x08009b41
 8008828:	08006d39 	.word	0x08006d39
 800882c:	080085db 	.word	0x080085db

08008830 <malloc>:
 8008830:	4b02      	ldr	r3, [pc, #8]	@ (800883c <malloc+0xc>)
 8008832:	4601      	mov	r1, r0
 8008834:	6818      	ldr	r0, [r3, #0]
 8008836:	f000 b825 	b.w	8008884 <_malloc_r>
 800883a:	bf00      	nop
 800883c:	2000001c 	.word	0x2000001c

08008840 <sbrk_aligned>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	4e0f      	ldr	r6, [pc, #60]	@ (8008880 <sbrk_aligned+0x40>)
 8008844:	460c      	mov	r4, r1
 8008846:	6831      	ldr	r1, [r6, #0]
 8008848:	4605      	mov	r5, r0
 800884a:	b911      	cbnz	r1, 8008852 <sbrk_aligned+0x12>
 800884c:	f000 fe92 	bl	8009574 <_sbrk_r>
 8008850:	6030      	str	r0, [r6, #0]
 8008852:	4621      	mov	r1, r4
 8008854:	4628      	mov	r0, r5
 8008856:	f000 fe8d 	bl	8009574 <_sbrk_r>
 800885a:	1c43      	adds	r3, r0, #1
 800885c:	d103      	bne.n	8008866 <sbrk_aligned+0x26>
 800885e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008862:	4620      	mov	r0, r4
 8008864:	bd70      	pop	{r4, r5, r6, pc}
 8008866:	1cc4      	adds	r4, r0, #3
 8008868:	f024 0403 	bic.w	r4, r4, #3
 800886c:	42a0      	cmp	r0, r4
 800886e:	d0f8      	beq.n	8008862 <sbrk_aligned+0x22>
 8008870:	1a21      	subs	r1, r4, r0
 8008872:	4628      	mov	r0, r5
 8008874:	f000 fe7e 	bl	8009574 <_sbrk_r>
 8008878:	3001      	adds	r0, #1
 800887a:	d1f2      	bne.n	8008862 <sbrk_aligned+0x22>
 800887c:	e7ef      	b.n	800885e <sbrk_aligned+0x1e>
 800887e:	bf00      	nop
 8008880:	2000261c 	.word	0x2000261c

08008884 <_malloc_r>:
 8008884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008888:	1ccd      	adds	r5, r1, #3
 800888a:	f025 0503 	bic.w	r5, r5, #3
 800888e:	3508      	adds	r5, #8
 8008890:	2d0c      	cmp	r5, #12
 8008892:	bf38      	it	cc
 8008894:	250c      	movcc	r5, #12
 8008896:	2d00      	cmp	r5, #0
 8008898:	4606      	mov	r6, r0
 800889a:	db01      	blt.n	80088a0 <_malloc_r+0x1c>
 800889c:	42a9      	cmp	r1, r5
 800889e:	d904      	bls.n	80088aa <_malloc_r+0x26>
 80088a0:	230c      	movs	r3, #12
 80088a2:	6033      	str	r3, [r6, #0]
 80088a4:	2000      	movs	r0, #0
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008980 <_malloc_r+0xfc>
 80088ae:	f000 f911 	bl	8008ad4 <__malloc_lock>
 80088b2:	f8d8 3000 	ldr.w	r3, [r8]
 80088b6:	461c      	mov	r4, r3
 80088b8:	bb44      	cbnz	r4, 800890c <_malloc_r+0x88>
 80088ba:	4629      	mov	r1, r5
 80088bc:	4630      	mov	r0, r6
 80088be:	f7ff ffbf 	bl	8008840 <sbrk_aligned>
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	4604      	mov	r4, r0
 80088c6:	d158      	bne.n	800897a <_malloc_r+0xf6>
 80088c8:	f8d8 4000 	ldr.w	r4, [r8]
 80088cc:	4627      	mov	r7, r4
 80088ce:	2f00      	cmp	r7, #0
 80088d0:	d143      	bne.n	800895a <_malloc_r+0xd6>
 80088d2:	2c00      	cmp	r4, #0
 80088d4:	d04b      	beq.n	800896e <_malloc_r+0xea>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	4639      	mov	r1, r7
 80088da:	4630      	mov	r0, r6
 80088dc:	eb04 0903 	add.w	r9, r4, r3
 80088e0:	f000 fe48 	bl	8009574 <_sbrk_r>
 80088e4:	4581      	cmp	r9, r0
 80088e6:	d142      	bne.n	800896e <_malloc_r+0xea>
 80088e8:	6821      	ldr	r1, [r4, #0]
 80088ea:	4630      	mov	r0, r6
 80088ec:	1a6d      	subs	r5, r5, r1
 80088ee:	4629      	mov	r1, r5
 80088f0:	f7ff ffa6 	bl	8008840 <sbrk_aligned>
 80088f4:	3001      	adds	r0, #1
 80088f6:	d03a      	beq.n	800896e <_malloc_r+0xea>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	442b      	add	r3, r5
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	bb62      	cbnz	r2, 8008960 <_malloc_r+0xdc>
 8008906:	f8c8 7000 	str.w	r7, [r8]
 800890a:	e00f      	b.n	800892c <_malloc_r+0xa8>
 800890c:	6822      	ldr	r2, [r4, #0]
 800890e:	1b52      	subs	r2, r2, r5
 8008910:	d420      	bmi.n	8008954 <_malloc_r+0xd0>
 8008912:	2a0b      	cmp	r2, #11
 8008914:	d917      	bls.n	8008946 <_malloc_r+0xc2>
 8008916:	1961      	adds	r1, r4, r5
 8008918:	42a3      	cmp	r3, r4
 800891a:	6025      	str	r5, [r4, #0]
 800891c:	bf18      	it	ne
 800891e:	6059      	strne	r1, [r3, #4]
 8008920:	6863      	ldr	r3, [r4, #4]
 8008922:	bf08      	it	eq
 8008924:	f8c8 1000 	streq.w	r1, [r8]
 8008928:	5162      	str	r2, [r4, r5]
 800892a:	604b      	str	r3, [r1, #4]
 800892c:	4630      	mov	r0, r6
 800892e:	f000 f8d7 	bl	8008ae0 <__malloc_unlock>
 8008932:	f104 000b 	add.w	r0, r4, #11
 8008936:	1d23      	adds	r3, r4, #4
 8008938:	f020 0007 	bic.w	r0, r0, #7
 800893c:	1ac2      	subs	r2, r0, r3
 800893e:	bf1c      	itt	ne
 8008940:	1a1b      	subne	r3, r3, r0
 8008942:	50a3      	strne	r3, [r4, r2]
 8008944:	e7af      	b.n	80088a6 <_malloc_r+0x22>
 8008946:	6862      	ldr	r2, [r4, #4]
 8008948:	42a3      	cmp	r3, r4
 800894a:	bf0c      	ite	eq
 800894c:	f8c8 2000 	streq.w	r2, [r8]
 8008950:	605a      	strne	r2, [r3, #4]
 8008952:	e7eb      	b.n	800892c <_malloc_r+0xa8>
 8008954:	4623      	mov	r3, r4
 8008956:	6864      	ldr	r4, [r4, #4]
 8008958:	e7ae      	b.n	80088b8 <_malloc_r+0x34>
 800895a:	463c      	mov	r4, r7
 800895c:	687f      	ldr	r7, [r7, #4]
 800895e:	e7b6      	b.n	80088ce <_malloc_r+0x4a>
 8008960:	461a      	mov	r2, r3
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	42a3      	cmp	r3, r4
 8008966:	d1fb      	bne.n	8008960 <_malloc_r+0xdc>
 8008968:	2300      	movs	r3, #0
 800896a:	6053      	str	r3, [r2, #4]
 800896c:	e7de      	b.n	800892c <_malloc_r+0xa8>
 800896e:	230c      	movs	r3, #12
 8008970:	4630      	mov	r0, r6
 8008972:	6033      	str	r3, [r6, #0]
 8008974:	f000 f8b4 	bl	8008ae0 <__malloc_unlock>
 8008978:	e794      	b.n	80088a4 <_malloc_r+0x20>
 800897a:	6005      	str	r5, [r0, #0]
 800897c:	e7d6      	b.n	800892c <_malloc_r+0xa8>
 800897e:	bf00      	nop
 8008980:	20002620 	.word	0x20002620

08008984 <__sflush_r>:
 8008984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	0716      	lsls	r6, r2, #28
 800898c:	4605      	mov	r5, r0
 800898e:	460c      	mov	r4, r1
 8008990:	d454      	bmi.n	8008a3c <__sflush_r+0xb8>
 8008992:	684b      	ldr	r3, [r1, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	dc02      	bgt.n	800899e <__sflush_r+0x1a>
 8008998:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	dd48      	ble.n	8008a30 <__sflush_r+0xac>
 800899e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089a0:	2e00      	cmp	r6, #0
 80089a2:	d045      	beq.n	8008a30 <__sflush_r+0xac>
 80089a4:	2300      	movs	r3, #0
 80089a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089aa:	682f      	ldr	r7, [r5, #0]
 80089ac:	6a21      	ldr	r1, [r4, #32]
 80089ae:	602b      	str	r3, [r5, #0]
 80089b0:	d030      	beq.n	8008a14 <__sflush_r+0x90>
 80089b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	0759      	lsls	r1, r3, #29
 80089b8:	d505      	bpl.n	80089c6 <__sflush_r+0x42>
 80089ba:	6863      	ldr	r3, [r4, #4]
 80089bc:	1ad2      	subs	r2, r2, r3
 80089be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089c0:	b10b      	cbz	r3, 80089c6 <__sflush_r+0x42>
 80089c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089c4:	1ad2      	subs	r2, r2, r3
 80089c6:	2300      	movs	r3, #0
 80089c8:	4628      	mov	r0, r5
 80089ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089cc:	6a21      	ldr	r1, [r4, #32]
 80089ce:	47b0      	blx	r6
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	d106      	bne.n	80089e4 <__sflush_r+0x60>
 80089d6:	6829      	ldr	r1, [r5, #0]
 80089d8:	291d      	cmp	r1, #29
 80089da:	d82b      	bhi.n	8008a34 <__sflush_r+0xb0>
 80089dc:	4a28      	ldr	r2, [pc, #160]	@ (8008a80 <__sflush_r+0xfc>)
 80089de:	410a      	asrs	r2, r1
 80089e0:	07d6      	lsls	r6, r2, #31
 80089e2:	d427      	bmi.n	8008a34 <__sflush_r+0xb0>
 80089e4:	2200      	movs	r2, #0
 80089e6:	6062      	str	r2, [r4, #4]
 80089e8:	6922      	ldr	r2, [r4, #16]
 80089ea:	04d9      	lsls	r1, r3, #19
 80089ec:	6022      	str	r2, [r4, #0]
 80089ee:	d504      	bpl.n	80089fa <__sflush_r+0x76>
 80089f0:	1c42      	adds	r2, r0, #1
 80089f2:	d101      	bne.n	80089f8 <__sflush_r+0x74>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	b903      	cbnz	r3, 80089fa <__sflush_r+0x76>
 80089f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80089fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089fc:	602f      	str	r7, [r5, #0]
 80089fe:	b1b9      	cbz	r1, 8008a30 <__sflush_r+0xac>
 8008a00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a04:	4299      	cmp	r1, r3
 8008a06:	d002      	beq.n	8008a0e <__sflush_r+0x8a>
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f7ff fd89 	bl	8008520 <_free_r>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a12:	e00d      	b.n	8008a30 <__sflush_r+0xac>
 8008a14:	2301      	movs	r3, #1
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b0      	blx	r6
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	1c50      	adds	r0, r2, #1
 8008a1e:	d1c9      	bne.n	80089b4 <__sflush_r+0x30>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d0c6      	beq.n	80089b4 <__sflush_r+0x30>
 8008a26:	2b1d      	cmp	r3, #29
 8008a28:	d001      	beq.n	8008a2e <__sflush_r+0xaa>
 8008a2a:	2b16      	cmp	r3, #22
 8008a2c:	d11d      	bne.n	8008a6a <__sflush_r+0xe6>
 8008a2e:	602f      	str	r7, [r5, #0]
 8008a30:	2000      	movs	r0, #0
 8008a32:	e021      	b.n	8008a78 <__sflush_r+0xf4>
 8008a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a38:	b21b      	sxth	r3, r3
 8008a3a:	e01a      	b.n	8008a72 <__sflush_r+0xee>
 8008a3c:	690f      	ldr	r7, [r1, #16]
 8008a3e:	2f00      	cmp	r7, #0
 8008a40:	d0f6      	beq.n	8008a30 <__sflush_r+0xac>
 8008a42:	0793      	lsls	r3, r2, #30
 8008a44:	bf18      	it	ne
 8008a46:	2300      	movne	r3, #0
 8008a48:	680e      	ldr	r6, [r1, #0]
 8008a4a:	bf08      	it	eq
 8008a4c:	694b      	ldreq	r3, [r1, #20]
 8008a4e:	1bf6      	subs	r6, r6, r7
 8008a50:	600f      	str	r7, [r1, #0]
 8008a52:	608b      	str	r3, [r1, #8]
 8008a54:	2e00      	cmp	r6, #0
 8008a56:	ddeb      	ble.n	8008a30 <__sflush_r+0xac>
 8008a58:	4633      	mov	r3, r6
 8008a5a:	463a      	mov	r2, r7
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	6a21      	ldr	r1, [r4, #32]
 8008a60:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008a64:	47e0      	blx	ip
 8008a66:	2800      	cmp	r0, #0
 8008a68:	dc07      	bgt.n	8008a7a <__sflush_r+0xf6>
 8008a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a7a:	4407      	add	r7, r0
 8008a7c:	1a36      	subs	r6, r6, r0
 8008a7e:	e7e9      	b.n	8008a54 <__sflush_r+0xd0>
 8008a80:	dfbffffe 	.word	0xdfbffffe

08008a84 <_fflush_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	690b      	ldr	r3, [r1, #16]
 8008a88:	4605      	mov	r5, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	b913      	cbnz	r3, 8008a94 <_fflush_r+0x10>
 8008a8e:	2500      	movs	r5, #0
 8008a90:	4628      	mov	r0, r5
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	b118      	cbz	r0, 8008a9e <_fflush_r+0x1a>
 8008a96:	6a03      	ldr	r3, [r0, #32]
 8008a98:	b90b      	cbnz	r3, 8008a9e <_fflush_r+0x1a>
 8008a9a:	f7fe fd97 	bl	80075cc <__sinit>
 8008a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d0f3      	beq.n	8008a8e <_fflush_r+0xa>
 8008aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008aa8:	07d0      	lsls	r0, r2, #31
 8008aaa:	d404      	bmi.n	8008ab6 <_fflush_r+0x32>
 8008aac:	0599      	lsls	r1, r3, #22
 8008aae:	d402      	bmi.n	8008ab6 <_fflush_r+0x32>
 8008ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ab2:	f7fe fec6 	bl	8007842 <__retarget_lock_acquire_recursive>
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	4621      	mov	r1, r4
 8008aba:	f7ff ff63 	bl	8008984 <__sflush_r>
 8008abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	07da      	lsls	r2, r3, #31
 8008ac4:	d4e4      	bmi.n	8008a90 <_fflush_r+0xc>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	059b      	lsls	r3, r3, #22
 8008aca:	d4e1      	bmi.n	8008a90 <_fflush_r+0xc>
 8008acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ace:	f7fe feb9 	bl	8007844 <__retarget_lock_release_recursive>
 8008ad2:	e7dd      	b.n	8008a90 <_fflush_r+0xc>

08008ad4 <__malloc_lock>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	@ (8008adc <__malloc_lock+0x8>)
 8008ad6:	f7fe beb4 	b.w	8007842 <__retarget_lock_acquire_recursive>
 8008ada:	bf00      	nop
 8008adc:	20002618 	.word	0x20002618

08008ae0 <__malloc_unlock>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	@ (8008ae8 <__malloc_unlock+0x8>)
 8008ae2:	f7fe beaf 	b.w	8007844 <__retarget_lock_release_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	20002618 	.word	0x20002618

08008aec <_Balloc>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	69c6      	ldr	r6, [r0, #28]
 8008af0:	4604      	mov	r4, r0
 8008af2:	460d      	mov	r5, r1
 8008af4:	b976      	cbnz	r6, 8008b14 <_Balloc+0x28>
 8008af6:	2010      	movs	r0, #16
 8008af8:	f7ff fe9a 	bl	8008830 <malloc>
 8008afc:	4602      	mov	r2, r0
 8008afe:	61e0      	str	r0, [r4, #28]
 8008b00:	b920      	cbnz	r0, 8008b0c <_Balloc+0x20>
 8008b02:	216b      	movs	r1, #107	@ 0x6b
 8008b04:	4b17      	ldr	r3, [pc, #92]	@ (8008b64 <_Balloc+0x78>)
 8008b06:	4818      	ldr	r0, [pc, #96]	@ (8008b68 <_Balloc+0x7c>)
 8008b08:	f000 fd56 	bl	80095b8 <__assert_func>
 8008b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b10:	6006      	str	r6, [r0, #0]
 8008b12:	60c6      	str	r6, [r0, #12]
 8008b14:	69e6      	ldr	r6, [r4, #28]
 8008b16:	68f3      	ldr	r3, [r6, #12]
 8008b18:	b183      	cbz	r3, 8008b3c <_Balloc+0x50>
 8008b1a:	69e3      	ldr	r3, [r4, #28]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b22:	b9b8      	cbnz	r0, 8008b54 <_Balloc+0x68>
 8008b24:	2101      	movs	r1, #1
 8008b26:	fa01 f605 	lsl.w	r6, r1, r5
 8008b2a:	1d72      	adds	r2, r6, #5
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	0092      	lsls	r2, r2, #2
 8008b30:	f000 fd60 	bl	80095f4 <_calloc_r>
 8008b34:	b160      	cbz	r0, 8008b50 <_Balloc+0x64>
 8008b36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b3a:	e00e      	b.n	8008b5a <_Balloc+0x6e>
 8008b3c:	2221      	movs	r2, #33	@ 0x21
 8008b3e:	2104      	movs	r1, #4
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fd57 	bl	80095f4 <_calloc_r>
 8008b46:	69e3      	ldr	r3, [r4, #28]
 8008b48:	60f0      	str	r0, [r6, #12]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e4      	bne.n	8008b1a <_Balloc+0x2e>
 8008b50:	2000      	movs	r0, #0
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
 8008b54:	6802      	ldr	r2, [r0, #0]
 8008b56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b60:	e7f7      	b.n	8008b52 <_Balloc+0x66>
 8008b62:	bf00      	nop
 8008b64:	08009ab7 	.word	0x08009ab7
 8008b68:	08009b48 	.word	0x08009b48

08008b6c <_Bfree>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	69c6      	ldr	r6, [r0, #28]
 8008b70:	4605      	mov	r5, r0
 8008b72:	460c      	mov	r4, r1
 8008b74:	b976      	cbnz	r6, 8008b94 <_Bfree+0x28>
 8008b76:	2010      	movs	r0, #16
 8008b78:	f7ff fe5a 	bl	8008830 <malloc>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	61e8      	str	r0, [r5, #28]
 8008b80:	b920      	cbnz	r0, 8008b8c <_Bfree+0x20>
 8008b82:	218f      	movs	r1, #143	@ 0x8f
 8008b84:	4b08      	ldr	r3, [pc, #32]	@ (8008ba8 <_Bfree+0x3c>)
 8008b86:	4809      	ldr	r0, [pc, #36]	@ (8008bac <_Bfree+0x40>)
 8008b88:	f000 fd16 	bl	80095b8 <__assert_func>
 8008b8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b90:	6006      	str	r6, [r0, #0]
 8008b92:	60c6      	str	r6, [r0, #12]
 8008b94:	b13c      	cbz	r4, 8008ba6 <_Bfree+0x3a>
 8008b96:	69eb      	ldr	r3, [r5, #28]
 8008b98:	6862      	ldr	r2, [r4, #4]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ba0:	6021      	str	r1, [r4, #0]
 8008ba2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
 8008ba8:	08009ab7 	.word	0x08009ab7
 8008bac:	08009b48 	.word	0x08009b48

08008bb0 <__multadd>:
 8008bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	461e      	mov	r6, r3
 8008bba:	2000      	movs	r0, #0
 8008bbc:	690d      	ldr	r5, [r1, #16]
 8008bbe:	f101 0c14 	add.w	ip, r1, #20
 8008bc2:	f8dc 3000 	ldr.w	r3, [ip]
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	b299      	uxth	r1, r3
 8008bca:	fb02 6101 	mla	r1, r2, r1, r6
 8008bce:	0c1e      	lsrs	r6, r3, #16
 8008bd0:	0c0b      	lsrs	r3, r1, #16
 8008bd2:	fb02 3306 	mla	r3, r2, r6, r3
 8008bd6:	b289      	uxth	r1, r1
 8008bd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008bdc:	4285      	cmp	r5, r0
 8008bde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008be2:	f84c 1b04 	str.w	r1, [ip], #4
 8008be6:	dcec      	bgt.n	8008bc2 <__multadd+0x12>
 8008be8:	b30e      	cbz	r6, 8008c2e <__multadd+0x7e>
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	42ab      	cmp	r3, r5
 8008bee:	dc19      	bgt.n	8008c24 <__multadd+0x74>
 8008bf0:	6861      	ldr	r1, [r4, #4]
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	3101      	adds	r1, #1
 8008bf6:	f7ff ff79 	bl	8008aec <_Balloc>
 8008bfa:	4680      	mov	r8, r0
 8008bfc:	b928      	cbnz	r0, 8008c0a <__multadd+0x5a>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	21ba      	movs	r1, #186	@ 0xba
 8008c02:	4b0c      	ldr	r3, [pc, #48]	@ (8008c34 <__multadd+0x84>)
 8008c04:	480c      	ldr	r0, [pc, #48]	@ (8008c38 <__multadd+0x88>)
 8008c06:	f000 fcd7 	bl	80095b8 <__assert_func>
 8008c0a:	6922      	ldr	r2, [r4, #16]
 8008c0c:	f104 010c 	add.w	r1, r4, #12
 8008c10:	3202      	adds	r2, #2
 8008c12:	0092      	lsls	r2, r2, #2
 8008c14:	300c      	adds	r0, #12
 8008c16:	f7fe fe24 	bl	8007862 <memcpy>
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	f7ff ffa5 	bl	8008b6c <_Bfree>
 8008c22:	4644      	mov	r4, r8
 8008c24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c28:	3501      	adds	r5, #1
 8008c2a:	615e      	str	r6, [r3, #20]
 8008c2c:	6125      	str	r5, [r4, #16]
 8008c2e:	4620      	mov	r0, r4
 8008c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c34:	08009b26 	.word	0x08009b26
 8008c38:	08009b48 	.word	0x08009b48

08008c3c <__hi0bits>:
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c42:	bf3a      	itte	cc
 8008c44:	0403      	lslcc	r3, r0, #16
 8008c46:	2010      	movcc	r0, #16
 8008c48:	2000      	movcs	r0, #0
 8008c4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c4e:	bf3c      	itt	cc
 8008c50:	021b      	lslcc	r3, r3, #8
 8008c52:	3008      	addcc	r0, #8
 8008c54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c58:	bf3c      	itt	cc
 8008c5a:	011b      	lslcc	r3, r3, #4
 8008c5c:	3004      	addcc	r0, #4
 8008c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c62:	bf3c      	itt	cc
 8008c64:	009b      	lslcc	r3, r3, #2
 8008c66:	3002      	addcc	r0, #2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	db05      	blt.n	8008c78 <__hi0bits+0x3c>
 8008c6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c70:	f100 0001 	add.w	r0, r0, #1
 8008c74:	bf08      	it	eq
 8008c76:	2020      	moveq	r0, #32
 8008c78:	4770      	bx	lr

08008c7a <__lo0bits>:
 8008c7a:	6803      	ldr	r3, [r0, #0]
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	f013 0007 	ands.w	r0, r3, #7
 8008c82:	d00b      	beq.n	8008c9c <__lo0bits+0x22>
 8008c84:	07d9      	lsls	r1, r3, #31
 8008c86:	d421      	bmi.n	8008ccc <__lo0bits+0x52>
 8008c88:	0798      	lsls	r0, r3, #30
 8008c8a:	bf49      	itett	mi
 8008c8c:	085b      	lsrmi	r3, r3, #1
 8008c8e:	089b      	lsrpl	r3, r3, #2
 8008c90:	2001      	movmi	r0, #1
 8008c92:	6013      	strmi	r3, [r2, #0]
 8008c94:	bf5c      	itt	pl
 8008c96:	2002      	movpl	r0, #2
 8008c98:	6013      	strpl	r3, [r2, #0]
 8008c9a:	4770      	bx	lr
 8008c9c:	b299      	uxth	r1, r3
 8008c9e:	b909      	cbnz	r1, 8008ca4 <__lo0bits+0x2a>
 8008ca0:	2010      	movs	r0, #16
 8008ca2:	0c1b      	lsrs	r3, r3, #16
 8008ca4:	b2d9      	uxtb	r1, r3
 8008ca6:	b909      	cbnz	r1, 8008cac <__lo0bits+0x32>
 8008ca8:	3008      	adds	r0, #8
 8008caa:	0a1b      	lsrs	r3, r3, #8
 8008cac:	0719      	lsls	r1, r3, #28
 8008cae:	bf04      	itt	eq
 8008cb0:	091b      	lsreq	r3, r3, #4
 8008cb2:	3004      	addeq	r0, #4
 8008cb4:	0799      	lsls	r1, r3, #30
 8008cb6:	bf04      	itt	eq
 8008cb8:	089b      	lsreq	r3, r3, #2
 8008cba:	3002      	addeq	r0, #2
 8008cbc:	07d9      	lsls	r1, r3, #31
 8008cbe:	d403      	bmi.n	8008cc8 <__lo0bits+0x4e>
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	f100 0001 	add.w	r0, r0, #1
 8008cc6:	d003      	beq.n	8008cd0 <__lo0bits+0x56>
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	4770      	bx	lr
 8008ccc:	2000      	movs	r0, #0
 8008cce:	4770      	bx	lr
 8008cd0:	2020      	movs	r0, #32
 8008cd2:	4770      	bx	lr

08008cd4 <__i2b>:
 8008cd4:	b510      	push	{r4, lr}
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	2101      	movs	r1, #1
 8008cda:	f7ff ff07 	bl	8008aec <_Balloc>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	b928      	cbnz	r0, 8008cee <__i2b+0x1a>
 8008ce2:	f240 1145 	movw	r1, #325	@ 0x145
 8008ce6:	4b04      	ldr	r3, [pc, #16]	@ (8008cf8 <__i2b+0x24>)
 8008ce8:	4804      	ldr	r0, [pc, #16]	@ (8008cfc <__i2b+0x28>)
 8008cea:	f000 fc65 	bl	80095b8 <__assert_func>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	6144      	str	r4, [r0, #20]
 8008cf2:	6103      	str	r3, [r0, #16]
 8008cf4:	bd10      	pop	{r4, pc}
 8008cf6:	bf00      	nop
 8008cf8:	08009b26 	.word	0x08009b26
 8008cfc:	08009b48 	.word	0x08009b48

08008d00 <__multiply>:
 8008d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	4614      	mov	r4, r2
 8008d06:	690a      	ldr	r2, [r1, #16]
 8008d08:	6923      	ldr	r3, [r4, #16]
 8008d0a:	460f      	mov	r7, r1
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	bfa2      	ittt	ge
 8008d10:	4623      	movge	r3, r4
 8008d12:	460c      	movge	r4, r1
 8008d14:	461f      	movge	r7, r3
 8008d16:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008d1a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008d1e:	68a3      	ldr	r3, [r4, #8]
 8008d20:	6861      	ldr	r1, [r4, #4]
 8008d22:	eb0a 0609 	add.w	r6, sl, r9
 8008d26:	42b3      	cmp	r3, r6
 8008d28:	b085      	sub	sp, #20
 8008d2a:	bfb8      	it	lt
 8008d2c:	3101      	addlt	r1, #1
 8008d2e:	f7ff fedd 	bl	8008aec <_Balloc>
 8008d32:	b930      	cbnz	r0, 8008d42 <__multiply+0x42>
 8008d34:	4602      	mov	r2, r0
 8008d36:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d3a:	4b43      	ldr	r3, [pc, #268]	@ (8008e48 <__multiply+0x148>)
 8008d3c:	4843      	ldr	r0, [pc, #268]	@ (8008e4c <__multiply+0x14c>)
 8008d3e:	f000 fc3b 	bl	80095b8 <__assert_func>
 8008d42:	f100 0514 	add.w	r5, r0, #20
 8008d46:	462b      	mov	r3, r5
 8008d48:	2200      	movs	r2, #0
 8008d4a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d4e:	4543      	cmp	r3, r8
 8008d50:	d321      	bcc.n	8008d96 <__multiply+0x96>
 8008d52:	f107 0114 	add.w	r1, r7, #20
 8008d56:	f104 0214 	add.w	r2, r4, #20
 8008d5a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d5e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d62:	9302      	str	r3, [sp, #8]
 8008d64:	1b13      	subs	r3, r2, r4
 8008d66:	3b15      	subs	r3, #21
 8008d68:	f023 0303 	bic.w	r3, r3, #3
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	f104 0715 	add.w	r7, r4, #21
 8008d72:	42ba      	cmp	r2, r7
 8008d74:	bf38      	it	cc
 8008d76:	2304      	movcc	r3, #4
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	9b02      	ldr	r3, [sp, #8]
 8008d7c:	9103      	str	r1, [sp, #12]
 8008d7e:	428b      	cmp	r3, r1
 8008d80:	d80c      	bhi.n	8008d9c <__multiply+0x9c>
 8008d82:	2e00      	cmp	r6, #0
 8008d84:	dd03      	ble.n	8008d8e <__multiply+0x8e>
 8008d86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d05a      	beq.n	8008e44 <__multiply+0x144>
 8008d8e:	6106      	str	r6, [r0, #16]
 8008d90:	b005      	add	sp, #20
 8008d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d96:	f843 2b04 	str.w	r2, [r3], #4
 8008d9a:	e7d8      	b.n	8008d4e <__multiply+0x4e>
 8008d9c:	f8b1 a000 	ldrh.w	sl, [r1]
 8008da0:	f1ba 0f00 	cmp.w	sl, #0
 8008da4:	d023      	beq.n	8008dee <__multiply+0xee>
 8008da6:	46a9      	mov	r9, r5
 8008da8:	f04f 0c00 	mov.w	ip, #0
 8008dac:	f104 0e14 	add.w	lr, r4, #20
 8008db0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008db4:	f8d9 3000 	ldr.w	r3, [r9]
 8008db8:	fa1f fb87 	uxth.w	fp, r7
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	fb0a 330b 	mla	r3, sl, fp, r3
 8008dc2:	4463      	add	r3, ip
 8008dc4:	f8d9 c000 	ldr.w	ip, [r9]
 8008dc8:	0c3f      	lsrs	r7, r7, #16
 8008dca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008dce:	fb0a c707 	mla	r7, sl, r7, ip
 8008dd2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ddc:	4572      	cmp	r2, lr
 8008dde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008de2:	f849 3b04 	str.w	r3, [r9], #4
 8008de6:	d8e3      	bhi.n	8008db0 <__multiply+0xb0>
 8008de8:	9b01      	ldr	r3, [sp, #4]
 8008dea:	f845 c003 	str.w	ip, [r5, r3]
 8008dee:	9b03      	ldr	r3, [sp, #12]
 8008df0:	3104      	adds	r1, #4
 8008df2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008df6:	f1b9 0f00 	cmp.w	r9, #0
 8008dfa:	d021      	beq.n	8008e40 <__multiply+0x140>
 8008dfc:	46ae      	mov	lr, r5
 8008dfe:	f04f 0a00 	mov.w	sl, #0
 8008e02:	682b      	ldr	r3, [r5, #0]
 8008e04:	f104 0c14 	add.w	ip, r4, #20
 8008e08:	f8bc b000 	ldrh.w	fp, [ip]
 8008e0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	fb09 770b 	mla	r7, r9, fp, r7
 8008e16:	4457      	add	r7, sl
 8008e18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e1c:	f84e 3b04 	str.w	r3, [lr], #4
 8008e20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e28:	f8be 3000 	ldrh.w	r3, [lr]
 8008e2c:	4562      	cmp	r2, ip
 8008e2e:	fb09 330a 	mla	r3, r9, sl, r3
 8008e32:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008e36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e3a:	d8e5      	bhi.n	8008e08 <__multiply+0x108>
 8008e3c:	9f01      	ldr	r7, [sp, #4]
 8008e3e:	51eb      	str	r3, [r5, r7]
 8008e40:	3504      	adds	r5, #4
 8008e42:	e79a      	b.n	8008d7a <__multiply+0x7a>
 8008e44:	3e01      	subs	r6, #1
 8008e46:	e79c      	b.n	8008d82 <__multiply+0x82>
 8008e48:	08009b26 	.word	0x08009b26
 8008e4c:	08009b48 	.word	0x08009b48

08008e50 <__pow5mult>:
 8008e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e54:	4615      	mov	r5, r2
 8008e56:	f012 0203 	ands.w	r2, r2, #3
 8008e5a:	4607      	mov	r7, r0
 8008e5c:	460e      	mov	r6, r1
 8008e5e:	d007      	beq.n	8008e70 <__pow5mult+0x20>
 8008e60:	4c25      	ldr	r4, [pc, #148]	@ (8008ef8 <__pow5mult+0xa8>)
 8008e62:	3a01      	subs	r2, #1
 8008e64:	2300      	movs	r3, #0
 8008e66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e6a:	f7ff fea1 	bl	8008bb0 <__multadd>
 8008e6e:	4606      	mov	r6, r0
 8008e70:	10ad      	asrs	r5, r5, #2
 8008e72:	d03d      	beq.n	8008ef0 <__pow5mult+0xa0>
 8008e74:	69fc      	ldr	r4, [r7, #28]
 8008e76:	b97c      	cbnz	r4, 8008e98 <__pow5mult+0x48>
 8008e78:	2010      	movs	r0, #16
 8008e7a:	f7ff fcd9 	bl	8008830 <malloc>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	61f8      	str	r0, [r7, #28]
 8008e82:	b928      	cbnz	r0, 8008e90 <__pow5mult+0x40>
 8008e84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e88:	4b1c      	ldr	r3, [pc, #112]	@ (8008efc <__pow5mult+0xac>)
 8008e8a:	481d      	ldr	r0, [pc, #116]	@ (8008f00 <__pow5mult+0xb0>)
 8008e8c:	f000 fb94 	bl	80095b8 <__assert_func>
 8008e90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e94:	6004      	str	r4, [r0, #0]
 8008e96:	60c4      	str	r4, [r0, #12]
 8008e98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ea0:	b94c      	cbnz	r4, 8008eb6 <__pow5mult+0x66>
 8008ea2:	f240 2171 	movw	r1, #625	@ 0x271
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f7ff ff14 	bl	8008cd4 <__i2b>
 8008eac:	2300      	movs	r3, #0
 8008eae:	4604      	mov	r4, r0
 8008eb0:	f8c8 0008 	str.w	r0, [r8, #8]
 8008eb4:	6003      	str	r3, [r0, #0]
 8008eb6:	f04f 0900 	mov.w	r9, #0
 8008eba:	07eb      	lsls	r3, r5, #31
 8008ebc:	d50a      	bpl.n	8008ed4 <__pow5mult+0x84>
 8008ebe:	4631      	mov	r1, r6
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	f7ff ff1c 	bl	8008d00 <__multiply>
 8008ec8:	4680      	mov	r8, r0
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4638      	mov	r0, r7
 8008ece:	f7ff fe4d 	bl	8008b6c <_Bfree>
 8008ed2:	4646      	mov	r6, r8
 8008ed4:	106d      	asrs	r5, r5, #1
 8008ed6:	d00b      	beq.n	8008ef0 <__pow5mult+0xa0>
 8008ed8:	6820      	ldr	r0, [r4, #0]
 8008eda:	b938      	cbnz	r0, 8008eec <__pow5mult+0x9c>
 8008edc:	4622      	mov	r2, r4
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7ff ff0d 	bl	8008d00 <__multiply>
 8008ee6:	6020      	str	r0, [r4, #0]
 8008ee8:	f8c0 9000 	str.w	r9, [r0]
 8008eec:	4604      	mov	r4, r0
 8008eee:	e7e4      	b.n	8008eba <__pow5mult+0x6a>
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef6:	bf00      	nop
 8008ef8:	08009ba4 	.word	0x08009ba4
 8008efc:	08009ab7 	.word	0x08009ab7
 8008f00:	08009b48 	.word	0x08009b48

08008f04 <__lshift>:
 8008f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f08:	460c      	mov	r4, r1
 8008f0a:	4607      	mov	r7, r0
 8008f0c:	4691      	mov	r9, r2
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	6849      	ldr	r1, [r1, #4]
 8008f12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f16:	68a3      	ldr	r3, [r4, #8]
 8008f18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f1c:	f108 0601 	add.w	r6, r8, #1
 8008f20:	42b3      	cmp	r3, r6
 8008f22:	db0b      	blt.n	8008f3c <__lshift+0x38>
 8008f24:	4638      	mov	r0, r7
 8008f26:	f7ff fde1 	bl	8008aec <_Balloc>
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	b948      	cbnz	r0, 8008f42 <__lshift+0x3e>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f34:	4b27      	ldr	r3, [pc, #156]	@ (8008fd4 <__lshift+0xd0>)
 8008f36:	4828      	ldr	r0, [pc, #160]	@ (8008fd8 <__lshift+0xd4>)
 8008f38:	f000 fb3e 	bl	80095b8 <__assert_func>
 8008f3c:	3101      	adds	r1, #1
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	e7ee      	b.n	8008f20 <__lshift+0x1c>
 8008f42:	2300      	movs	r3, #0
 8008f44:	f100 0114 	add.w	r1, r0, #20
 8008f48:	f100 0210 	add.w	r2, r0, #16
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	4553      	cmp	r3, sl
 8008f50:	db33      	blt.n	8008fba <__lshift+0xb6>
 8008f52:	6920      	ldr	r0, [r4, #16]
 8008f54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f58:	f104 0314 	add.w	r3, r4, #20
 8008f5c:	f019 091f 	ands.w	r9, r9, #31
 8008f60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f68:	d02b      	beq.n	8008fc2 <__lshift+0xbe>
 8008f6a:	468a      	mov	sl, r1
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f1c9 0e20 	rsb	lr, r9, #32
 8008f72:	6818      	ldr	r0, [r3, #0]
 8008f74:	fa00 f009 	lsl.w	r0, r0, r9
 8008f78:	4310      	orrs	r0, r2
 8008f7a:	f84a 0b04 	str.w	r0, [sl], #4
 8008f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f82:	459c      	cmp	ip, r3
 8008f84:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f88:	d8f3      	bhi.n	8008f72 <__lshift+0x6e>
 8008f8a:	ebac 0304 	sub.w	r3, ip, r4
 8008f8e:	3b15      	subs	r3, #21
 8008f90:	f023 0303 	bic.w	r3, r3, #3
 8008f94:	3304      	adds	r3, #4
 8008f96:	f104 0015 	add.w	r0, r4, #21
 8008f9a:	4584      	cmp	ip, r0
 8008f9c:	bf38      	it	cc
 8008f9e:	2304      	movcc	r3, #4
 8008fa0:	50ca      	str	r2, [r1, r3]
 8008fa2:	b10a      	cbz	r2, 8008fa8 <__lshift+0xa4>
 8008fa4:	f108 0602 	add.w	r6, r8, #2
 8008fa8:	3e01      	subs	r6, #1
 8008faa:	4638      	mov	r0, r7
 8008fac:	4621      	mov	r1, r4
 8008fae:	612e      	str	r6, [r5, #16]
 8008fb0:	f7ff fddc 	bl	8008b6c <_Bfree>
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fba:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	e7c5      	b.n	8008f4e <__lshift+0x4a>
 8008fc2:	3904      	subs	r1, #4
 8008fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fc8:	459c      	cmp	ip, r3
 8008fca:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fce:	d8f9      	bhi.n	8008fc4 <__lshift+0xc0>
 8008fd0:	e7ea      	b.n	8008fa8 <__lshift+0xa4>
 8008fd2:	bf00      	nop
 8008fd4:	08009b26 	.word	0x08009b26
 8008fd8:	08009b48 	.word	0x08009b48

08008fdc <__mcmp>:
 8008fdc:	4603      	mov	r3, r0
 8008fde:	690a      	ldr	r2, [r1, #16]
 8008fe0:	6900      	ldr	r0, [r0, #16]
 8008fe2:	b530      	push	{r4, r5, lr}
 8008fe4:	1a80      	subs	r0, r0, r2
 8008fe6:	d10e      	bne.n	8009006 <__mcmp+0x2a>
 8008fe8:	3314      	adds	r3, #20
 8008fea:	3114      	adds	r1, #20
 8008fec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ff0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ff4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ff8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ffc:	4295      	cmp	r5, r2
 8008ffe:	d003      	beq.n	8009008 <__mcmp+0x2c>
 8009000:	d205      	bcs.n	800900e <__mcmp+0x32>
 8009002:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009006:	bd30      	pop	{r4, r5, pc}
 8009008:	42a3      	cmp	r3, r4
 800900a:	d3f3      	bcc.n	8008ff4 <__mcmp+0x18>
 800900c:	e7fb      	b.n	8009006 <__mcmp+0x2a>
 800900e:	2001      	movs	r0, #1
 8009010:	e7f9      	b.n	8009006 <__mcmp+0x2a>
	...

08009014 <__mdiff>:
 8009014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009018:	4689      	mov	r9, r1
 800901a:	4606      	mov	r6, r0
 800901c:	4611      	mov	r1, r2
 800901e:	4648      	mov	r0, r9
 8009020:	4614      	mov	r4, r2
 8009022:	f7ff ffdb 	bl	8008fdc <__mcmp>
 8009026:	1e05      	subs	r5, r0, #0
 8009028:	d112      	bne.n	8009050 <__mdiff+0x3c>
 800902a:	4629      	mov	r1, r5
 800902c:	4630      	mov	r0, r6
 800902e:	f7ff fd5d 	bl	8008aec <_Balloc>
 8009032:	4602      	mov	r2, r0
 8009034:	b928      	cbnz	r0, 8009042 <__mdiff+0x2e>
 8009036:	f240 2137 	movw	r1, #567	@ 0x237
 800903a:	4b3e      	ldr	r3, [pc, #248]	@ (8009134 <__mdiff+0x120>)
 800903c:	483e      	ldr	r0, [pc, #248]	@ (8009138 <__mdiff+0x124>)
 800903e:	f000 fabb 	bl	80095b8 <__assert_func>
 8009042:	2301      	movs	r3, #1
 8009044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009048:	4610      	mov	r0, r2
 800904a:	b003      	add	sp, #12
 800904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009050:	bfbc      	itt	lt
 8009052:	464b      	movlt	r3, r9
 8009054:	46a1      	movlt	r9, r4
 8009056:	4630      	mov	r0, r6
 8009058:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800905c:	bfba      	itte	lt
 800905e:	461c      	movlt	r4, r3
 8009060:	2501      	movlt	r5, #1
 8009062:	2500      	movge	r5, #0
 8009064:	f7ff fd42 	bl	8008aec <_Balloc>
 8009068:	4602      	mov	r2, r0
 800906a:	b918      	cbnz	r0, 8009074 <__mdiff+0x60>
 800906c:	f240 2145 	movw	r1, #581	@ 0x245
 8009070:	4b30      	ldr	r3, [pc, #192]	@ (8009134 <__mdiff+0x120>)
 8009072:	e7e3      	b.n	800903c <__mdiff+0x28>
 8009074:	f100 0b14 	add.w	fp, r0, #20
 8009078:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800907c:	f109 0310 	add.w	r3, r9, #16
 8009080:	60c5      	str	r5, [r0, #12]
 8009082:	f04f 0c00 	mov.w	ip, #0
 8009086:	f109 0514 	add.w	r5, r9, #20
 800908a:	46d9      	mov	r9, fp
 800908c:	6926      	ldr	r6, [r4, #16]
 800908e:	f104 0e14 	add.w	lr, r4, #20
 8009092:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009096:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800909a:	9301      	str	r3, [sp, #4]
 800909c:	9b01      	ldr	r3, [sp, #4]
 800909e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80090a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80090a6:	b281      	uxth	r1, r0
 80090a8:	9301      	str	r3, [sp, #4]
 80090aa:	fa1f f38a 	uxth.w	r3, sl
 80090ae:	1a5b      	subs	r3, r3, r1
 80090b0:	0c00      	lsrs	r0, r0, #16
 80090b2:	4463      	add	r3, ip
 80090b4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80090b8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80090bc:	b29b      	uxth	r3, r3
 80090be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80090c2:	4576      	cmp	r6, lr
 80090c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090c8:	f849 3b04 	str.w	r3, [r9], #4
 80090cc:	d8e6      	bhi.n	800909c <__mdiff+0x88>
 80090ce:	1b33      	subs	r3, r6, r4
 80090d0:	3b15      	subs	r3, #21
 80090d2:	f023 0303 	bic.w	r3, r3, #3
 80090d6:	3415      	adds	r4, #21
 80090d8:	3304      	adds	r3, #4
 80090da:	42a6      	cmp	r6, r4
 80090dc:	bf38      	it	cc
 80090de:	2304      	movcc	r3, #4
 80090e0:	441d      	add	r5, r3
 80090e2:	445b      	add	r3, fp
 80090e4:	461e      	mov	r6, r3
 80090e6:	462c      	mov	r4, r5
 80090e8:	4544      	cmp	r4, r8
 80090ea:	d30e      	bcc.n	800910a <__mdiff+0xf6>
 80090ec:	f108 0103 	add.w	r1, r8, #3
 80090f0:	1b49      	subs	r1, r1, r5
 80090f2:	f021 0103 	bic.w	r1, r1, #3
 80090f6:	3d03      	subs	r5, #3
 80090f8:	45a8      	cmp	r8, r5
 80090fa:	bf38      	it	cc
 80090fc:	2100      	movcc	r1, #0
 80090fe:	440b      	add	r3, r1
 8009100:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009104:	b199      	cbz	r1, 800912e <__mdiff+0x11a>
 8009106:	6117      	str	r7, [r2, #16]
 8009108:	e79e      	b.n	8009048 <__mdiff+0x34>
 800910a:	46e6      	mov	lr, ip
 800910c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009110:	fa1f fc81 	uxth.w	ip, r1
 8009114:	44f4      	add	ip, lr
 8009116:	0c08      	lsrs	r0, r1, #16
 8009118:	4471      	add	r1, lr
 800911a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800911e:	b289      	uxth	r1, r1
 8009120:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009124:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009128:	f846 1b04 	str.w	r1, [r6], #4
 800912c:	e7dc      	b.n	80090e8 <__mdiff+0xd4>
 800912e:	3f01      	subs	r7, #1
 8009130:	e7e6      	b.n	8009100 <__mdiff+0xec>
 8009132:	bf00      	nop
 8009134:	08009b26 	.word	0x08009b26
 8009138:	08009b48 	.word	0x08009b48

0800913c <__d2b>:
 800913c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009140:	2101      	movs	r1, #1
 8009142:	4690      	mov	r8, r2
 8009144:	4699      	mov	r9, r3
 8009146:	9e08      	ldr	r6, [sp, #32]
 8009148:	f7ff fcd0 	bl	8008aec <_Balloc>
 800914c:	4604      	mov	r4, r0
 800914e:	b930      	cbnz	r0, 800915e <__d2b+0x22>
 8009150:	4602      	mov	r2, r0
 8009152:	f240 310f 	movw	r1, #783	@ 0x30f
 8009156:	4b23      	ldr	r3, [pc, #140]	@ (80091e4 <__d2b+0xa8>)
 8009158:	4823      	ldr	r0, [pc, #140]	@ (80091e8 <__d2b+0xac>)
 800915a:	f000 fa2d 	bl	80095b8 <__assert_func>
 800915e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009162:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009166:	b10d      	cbz	r5, 800916c <__d2b+0x30>
 8009168:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	f1b8 0300 	subs.w	r3, r8, #0
 8009172:	d024      	beq.n	80091be <__d2b+0x82>
 8009174:	4668      	mov	r0, sp
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	f7ff fd7f 	bl	8008c7a <__lo0bits>
 800917c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009180:	b1d8      	cbz	r0, 80091ba <__d2b+0x7e>
 8009182:	f1c0 0320 	rsb	r3, r0, #32
 8009186:	fa02 f303 	lsl.w	r3, r2, r3
 800918a:	430b      	orrs	r3, r1
 800918c:	40c2      	lsrs	r2, r0
 800918e:	6163      	str	r3, [r4, #20]
 8009190:	9201      	str	r2, [sp, #4]
 8009192:	9b01      	ldr	r3, [sp, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	bf0c      	ite	eq
 8009198:	2201      	moveq	r2, #1
 800919a:	2202      	movne	r2, #2
 800919c:	61a3      	str	r3, [r4, #24]
 800919e:	6122      	str	r2, [r4, #16]
 80091a0:	b1ad      	cbz	r5, 80091ce <__d2b+0x92>
 80091a2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80091a6:	4405      	add	r5, r0
 80091a8:	6035      	str	r5, [r6, #0]
 80091aa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80091ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091b0:	6018      	str	r0, [r3, #0]
 80091b2:	4620      	mov	r0, r4
 80091b4:	b002      	add	sp, #8
 80091b6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80091ba:	6161      	str	r1, [r4, #20]
 80091bc:	e7e9      	b.n	8009192 <__d2b+0x56>
 80091be:	a801      	add	r0, sp, #4
 80091c0:	f7ff fd5b 	bl	8008c7a <__lo0bits>
 80091c4:	9b01      	ldr	r3, [sp, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	6163      	str	r3, [r4, #20]
 80091ca:	3020      	adds	r0, #32
 80091cc:	e7e7      	b.n	800919e <__d2b+0x62>
 80091ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80091d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091d6:	6030      	str	r0, [r6, #0]
 80091d8:	6918      	ldr	r0, [r3, #16]
 80091da:	f7ff fd2f 	bl	8008c3c <__hi0bits>
 80091de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091e2:	e7e4      	b.n	80091ae <__d2b+0x72>
 80091e4:	08009b26 	.word	0x08009b26
 80091e8:	08009b48 	.word	0x08009b48

080091ec <__sread>:
 80091ec:	b510      	push	{r4, lr}
 80091ee:	460c      	mov	r4, r1
 80091f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f4:	f000 f9ac 	bl	8009550 <_read_r>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	bfab      	itete	ge
 80091fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80091fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009200:	181b      	addge	r3, r3, r0
 8009202:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009206:	bfac      	ite	ge
 8009208:	6563      	strge	r3, [r4, #84]	@ 0x54
 800920a:	81a3      	strhlt	r3, [r4, #12]
 800920c:	bd10      	pop	{r4, pc}

0800920e <__swrite>:
 800920e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009212:	461f      	mov	r7, r3
 8009214:	898b      	ldrh	r3, [r1, #12]
 8009216:	4605      	mov	r5, r0
 8009218:	05db      	lsls	r3, r3, #23
 800921a:	460c      	mov	r4, r1
 800921c:	4616      	mov	r6, r2
 800921e:	d505      	bpl.n	800922c <__swrite+0x1e>
 8009220:	2302      	movs	r3, #2
 8009222:	2200      	movs	r2, #0
 8009224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009228:	f000 f980 	bl	800952c <_lseek_r>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	4632      	mov	r2, r6
 8009230:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	4628      	mov	r0, r5
 8009238:	463b      	mov	r3, r7
 800923a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800923e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009242:	f000 b9a7 	b.w	8009594 <_write_r>

08009246 <__sseek>:
 8009246:	b510      	push	{r4, lr}
 8009248:	460c      	mov	r4, r1
 800924a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800924e:	f000 f96d 	bl	800952c <_lseek_r>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	bf15      	itete	ne
 8009258:	6560      	strne	r0, [r4, #84]	@ 0x54
 800925a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800925e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009262:	81a3      	strheq	r3, [r4, #12]
 8009264:	bf18      	it	ne
 8009266:	81a3      	strhne	r3, [r4, #12]
 8009268:	bd10      	pop	{r4, pc}

0800926a <__sclose>:
 800926a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800926e:	f000 b92b 	b.w	80094c8 <_close_r>

08009272 <__swbuf_r>:
 8009272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009274:	460e      	mov	r6, r1
 8009276:	4614      	mov	r4, r2
 8009278:	4605      	mov	r5, r0
 800927a:	b118      	cbz	r0, 8009284 <__swbuf_r+0x12>
 800927c:	6a03      	ldr	r3, [r0, #32]
 800927e:	b90b      	cbnz	r3, 8009284 <__swbuf_r+0x12>
 8009280:	f7fe f9a4 	bl	80075cc <__sinit>
 8009284:	69a3      	ldr	r3, [r4, #24]
 8009286:	60a3      	str	r3, [r4, #8]
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	071a      	lsls	r2, r3, #28
 800928c:	d501      	bpl.n	8009292 <__swbuf_r+0x20>
 800928e:	6923      	ldr	r3, [r4, #16]
 8009290:	b943      	cbnz	r3, 80092a4 <__swbuf_r+0x32>
 8009292:	4621      	mov	r1, r4
 8009294:	4628      	mov	r0, r5
 8009296:	f000 f82b 	bl	80092f0 <__swsetup_r>
 800929a:	b118      	cbz	r0, 80092a4 <__swbuf_r+0x32>
 800929c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80092a0:	4638      	mov	r0, r7
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	6922      	ldr	r2, [r4, #16]
 80092a8:	b2f6      	uxtb	r6, r6
 80092aa:	1a98      	subs	r0, r3, r2
 80092ac:	6963      	ldr	r3, [r4, #20]
 80092ae:	4637      	mov	r7, r6
 80092b0:	4283      	cmp	r3, r0
 80092b2:	dc05      	bgt.n	80092c0 <__swbuf_r+0x4e>
 80092b4:	4621      	mov	r1, r4
 80092b6:	4628      	mov	r0, r5
 80092b8:	f7ff fbe4 	bl	8008a84 <_fflush_r>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d1ed      	bne.n	800929c <__swbuf_r+0x2a>
 80092c0:	68a3      	ldr	r3, [r4, #8]
 80092c2:	3b01      	subs	r3, #1
 80092c4:	60a3      	str	r3, [r4, #8]
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	1c5a      	adds	r2, r3, #1
 80092ca:	6022      	str	r2, [r4, #0]
 80092cc:	701e      	strb	r6, [r3, #0]
 80092ce:	6962      	ldr	r2, [r4, #20]
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d004      	beq.n	80092e0 <__swbuf_r+0x6e>
 80092d6:	89a3      	ldrh	r3, [r4, #12]
 80092d8:	07db      	lsls	r3, r3, #31
 80092da:	d5e1      	bpl.n	80092a0 <__swbuf_r+0x2e>
 80092dc:	2e0a      	cmp	r6, #10
 80092de:	d1df      	bne.n	80092a0 <__swbuf_r+0x2e>
 80092e0:	4621      	mov	r1, r4
 80092e2:	4628      	mov	r0, r5
 80092e4:	f7ff fbce 	bl	8008a84 <_fflush_r>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d0d9      	beq.n	80092a0 <__swbuf_r+0x2e>
 80092ec:	e7d6      	b.n	800929c <__swbuf_r+0x2a>
	...

080092f0 <__swsetup_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4b29      	ldr	r3, [pc, #164]	@ (8009398 <__swsetup_r+0xa8>)
 80092f4:	4605      	mov	r5, r0
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	460c      	mov	r4, r1
 80092fa:	b118      	cbz	r0, 8009304 <__swsetup_r+0x14>
 80092fc:	6a03      	ldr	r3, [r0, #32]
 80092fe:	b90b      	cbnz	r3, 8009304 <__swsetup_r+0x14>
 8009300:	f7fe f964 	bl	80075cc <__sinit>
 8009304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009308:	0719      	lsls	r1, r3, #28
 800930a:	d422      	bmi.n	8009352 <__swsetup_r+0x62>
 800930c:	06da      	lsls	r2, r3, #27
 800930e:	d407      	bmi.n	8009320 <__swsetup_r+0x30>
 8009310:	2209      	movs	r2, #9
 8009312:	602a      	str	r2, [r5, #0]
 8009314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009318:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	e033      	b.n	8009388 <__swsetup_r+0x98>
 8009320:	0758      	lsls	r0, r3, #29
 8009322:	d512      	bpl.n	800934a <__swsetup_r+0x5a>
 8009324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009326:	b141      	cbz	r1, 800933a <__swsetup_r+0x4a>
 8009328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800932c:	4299      	cmp	r1, r3
 800932e:	d002      	beq.n	8009336 <__swsetup_r+0x46>
 8009330:	4628      	mov	r0, r5
 8009332:	f7ff f8f5 	bl	8008520 <_free_r>
 8009336:	2300      	movs	r3, #0
 8009338:	6363      	str	r3, [r4, #52]	@ 0x34
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009340:	81a3      	strh	r3, [r4, #12]
 8009342:	2300      	movs	r3, #0
 8009344:	6063      	str	r3, [r4, #4]
 8009346:	6923      	ldr	r3, [r4, #16]
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	f043 0308 	orr.w	r3, r3, #8
 8009350:	81a3      	strh	r3, [r4, #12]
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	b94b      	cbnz	r3, 800936a <__swsetup_r+0x7a>
 8009356:	89a3      	ldrh	r3, [r4, #12]
 8009358:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800935c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009360:	d003      	beq.n	800936a <__swsetup_r+0x7a>
 8009362:	4621      	mov	r1, r4
 8009364:	4628      	mov	r0, r5
 8009366:	f000 f83e 	bl	80093e6 <__smakebuf_r>
 800936a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800936e:	f013 0201 	ands.w	r2, r3, #1
 8009372:	d00a      	beq.n	800938a <__swsetup_r+0x9a>
 8009374:	2200      	movs	r2, #0
 8009376:	60a2      	str	r2, [r4, #8]
 8009378:	6962      	ldr	r2, [r4, #20]
 800937a:	4252      	negs	r2, r2
 800937c:	61a2      	str	r2, [r4, #24]
 800937e:	6922      	ldr	r2, [r4, #16]
 8009380:	b942      	cbnz	r2, 8009394 <__swsetup_r+0xa4>
 8009382:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009386:	d1c5      	bne.n	8009314 <__swsetup_r+0x24>
 8009388:	bd38      	pop	{r3, r4, r5, pc}
 800938a:	0799      	lsls	r1, r3, #30
 800938c:	bf58      	it	pl
 800938e:	6962      	ldrpl	r2, [r4, #20]
 8009390:	60a2      	str	r2, [r4, #8]
 8009392:	e7f4      	b.n	800937e <__swsetup_r+0x8e>
 8009394:	2000      	movs	r0, #0
 8009396:	e7f7      	b.n	8009388 <__swsetup_r+0x98>
 8009398:	2000001c 	.word	0x2000001c

0800939c <__swhatbuf_r>:
 800939c:	b570      	push	{r4, r5, r6, lr}
 800939e:	460c      	mov	r4, r1
 80093a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a4:	4615      	mov	r5, r2
 80093a6:	2900      	cmp	r1, #0
 80093a8:	461e      	mov	r6, r3
 80093aa:	b096      	sub	sp, #88	@ 0x58
 80093ac:	da0c      	bge.n	80093c8 <__swhatbuf_r+0x2c>
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	2100      	movs	r1, #0
 80093b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093b6:	bf14      	ite	ne
 80093b8:	2340      	movne	r3, #64	@ 0x40
 80093ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093be:	2000      	movs	r0, #0
 80093c0:	6031      	str	r1, [r6, #0]
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	b016      	add	sp, #88	@ 0x58
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
 80093c8:	466a      	mov	r2, sp
 80093ca:	f000 f88d 	bl	80094e8 <_fstat_r>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	dbed      	blt.n	80093ae <__swhatbuf_r+0x12>
 80093d2:	9901      	ldr	r1, [sp, #4]
 80093d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093dc:	4259      	negs	r1, r3
 80093de:	4159      	adcs	r1, r3
 80093e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093e4:	e7eb      	b.n	80093be <__swhatbuf_r+0x22>

080093e6 <__smakebuf_r>:
 80093e6:	898b      	ldrh	r3, [r1, #12]
 80093e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ea:	079d      	lsls	r5, r3, #30
 80093ec:	4606      	mov	r6, r0
 80093ee:	460c      	mov	r4, r1
 80093f0:	d507      	bpl.n	8009402 <__smakebuf_r+0x1c>
 80093f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093f6:	6023      	str	r3, [r4, #0]
 80093f8:	6123      	str	r3, [r4, #16]
 80093fa:	2301      	movs	r3, #1
 80093fc:	6163      	str	r3, [r4, #20]
 80093fe:	b003      	add	sp, #12
 8009400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009402:	466a      	mov	r2, sp
 8009404:	ab01      	add	r3, sp, #4
 8009406:	f7ff ffc9 	bl	800939c <__swhatbuf_r>
 800940a:	9f00      	ldr	r7, [sp, #0]
 800940c:	4605      	mov	r5, r0
 800940e:	4639      	mov	r1, r7
 8009410:	4630      	mov	r0, r6
 8009412:	f7ff fa37 	bl	8008884 <_malloc_r>
 8009416:	b948      	cbnz	r0, 800942c <__smakebuf_r+0x46>
 8009418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941c:	059a      	lsls	r2, r3, #22
 800941e:	d4ee      	bmi.n	80093fe <__smakebuf_r+0x18>
 8009420:	f023 0303 	bic.w	r3, r3, #3
 8009424:	f043 0302 	orr.w	r3, r3, #2
 8009428:	81a3      	strh	r3, [r4, #12]
 800942a:	e7e2      	b.n	80093f2 <__smakebuf_r+0xc>
 800942c:	89a3      	ldrh	r3, [r4, #12]
 800942e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009436:	81a3      	strh	r3, [r4, #12]
 8009438:	9b01      	ldr	r3, [sp, #4]
 800943a:	6020      	str	r0, [r4, #0]
 800943c:	b15b      	cbz	r3, 8009456 <__smakebuf_r+0x70>
 800943e:	4630      	mov	r0, r6
 8009440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009444:	f000 f862 	bl	800950c <_isatty_r>
 8009448:	b128      	cbz	r0, 8009456 <__smakebuf_r+0x70>
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f023 0303 	bic.w	r3, r3, #3
 8009450:	f043 0301 	orr.w	r3, r3, #1
 8009454:	81a3      	strh	r3, [r4, #12]
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	431d      	orrs	r5, r3
 800945a:	81a5      	strh	r5, [r4, #12]
 800945c:	e7cf      	b.n	80093fe <__smakebuf_r+0x18>

0800945e <_putc_r>:
 800945e:	b570      	push	{r4, r5, r6, lr}
 8009460:	460d      	mov	r5, r1
 8009462:	4614      	mov	r4, r2
 8009464:	4606      	mov	r6, r0
 8009466:	b118      	cbz	r0, 8009470 <_putc_r+0x12>
 8009468:	6a03      	ldr	r3, [r0, #32]
 800946a:	b90b      	cbnz	r3, 8009470 <_putc_r+0x12>
 800946c:	f7fe f8ae 	bl	80075cc <__sinit>
 8009470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009472:	07d8      	lsls	r0, r3, #31
 8009474:	d405      	bmi.n	8009482 <_putc_r+0x24>
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	0599      	lsls	r1, r3, #22
 800947a:	d402      	bmi.n	8009482 <_putc_r+0x24>
 800947c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800947e:	f7fe f9e0 	bl	8007842 <__retarget_lock_acquire_recursive>
 8009482:	68a3      	ldr	r3, [r4, #8]
 8009484:	3b01      	subs	r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	60a3      	str	r3, [r4, #8]
 800948a:	da05      	bge.n	8009498 <_putc_r+0x3a>
 800948c:	69a2      	ldr	r2, [r4, #24]
 800948e:	4293      	cmp	r3, r2
 8009490:	db12      	blt.n	80094b8 <_putc_r+0x5a>
 8009492:	b2eb      	uxtb	r3, r5
 8009494:	2b0a      	cmp	r3, #10
 8009496:	d00f      	beq.n	80094b8 <_putc_r+0x5a>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	6022      	str	r2, [r4, #0]
 800949e:	701d      	strb	r5, [r3, #0]
 80094a0:	b2ed      	uxtb	r5, r5
 80094a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094a4:	07da      	lsls	r2, r3, #31
 80094a6:	d405      	bmi.n	80094b4 <_putc_r+0x56>
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	059b      	lsls	r3, r3, #22
 80094ac:	d402      	bmi.n	80094b4 <_putc_r+0x56>
 80094ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094b0:	f7fe f9c8 	bl	8007844 <__retarget_lock_release_recursive>
 80094b4:	4628      	mov	r0, r5
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	4629      	mov	r1, r5
 80094ba:	4622      	mov	r2, r4
 80094bc:	4630      	mov	r0, r6
 80094be:	f7ff fed8 	bl	8009272 <__swbuf_r>
 80094c2:	4605      	mov	r5, r0
 80094c4:	e7ed      	b.n	80094a2 <_putc_r+0x44>
	...

080094c8 <_close_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	2300      	movs	r3, #0
 80094cc:	4d05      	ldr	r5, [pc, #20]	@ (80094e4 <_close_r+0x1c>)
 80094ce:	4604      	mov	r4, r0
 80094d0:	4608      	mov	r0, r1
 80094d2:	602b      	str	r3, [r5, #0]
 80094d4:	f7f8 fe8a 	bl	80021ec <_close>
 80094d8:	1c43      	adds	r3, r0, #1
 80094da:	d102      	bne.n	80094e2 <_close_r+0x1a>
 80094dc:	682b      	ldr	r3, [r5, #0]
 80094de:	b103      	cbz	r3, 80094e2 <_close_r+0x1a>
 80094e0:	6023      	str	r3, [r4, #0]
 80094e2:	bd38      	pop	{r3, r4, r5, pc}
 80094e4:	20002614 	.word	0x20002614

080094e8 <_fstat_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	2300      	movs	r3, #0
 80094ec:	4d06      	ldr	r5, [pc, #24]	@ (8009508 <_fstat_r+0x20>)
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	f7f8 fe84 	bl	8002202 <_fstat>
 80094fa:	1c43      	adds	r3, r0, #1
 80094fc:	d102      	bne.n	8009504 <_fstat_r+0x1c>
 80094fe:	682b      	ldr	r3, [r5, #0]
 8009500:	b103      	cbz	r3, 8009504 <_fstat_r+0x1c>
 8009502:	6023      	str	r3, [r4, #0]
 8009504:	bd38      	pop	{r3, r4, r5, pc}
 8009506:	bf00      	nop
 8009508:	20002614 	.word	0x20002614

0800950c <_isatty_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	2300      	movs	r3, #0
 8009510:	4d05      	ldr	r5, [pc, #20]	@ (8009528 <_isatty_r+0x1c>)
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	602b      	str	r3, [r5, #0]
 8009518:	f7f8 fe82 	bl	8002220 <_isatty>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_isatty_r+0x1a>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_isatty_r+0x1a>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	20002614 	.word	0x20002614

0800952c <_lseek_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4604      	mov	r4, r0
 8009530:	4608      	mov	r0, r1
 8009532:	4611      	mov	r1, r2
 8009534:	2200      	movs	r2, #0
 8009536:	4d05      	ldr	r5, [pc, #20]	@ (800954c <_lseek_r+0x20>)
 8009538:	602a      	str	r2, [r5, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	f7f8 fe7a 	bl	8002234 <_lseek>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d102      	bne.n	800954a <_lseek_r+0x1e>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	b103      	cbz	r3, 800954a <_lseek_r+0x1e>
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	20002614 	.word	0x20002614

08009550 <_read_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	4611      	mov	r1, r2
 8009558:	2200      	movs	r2, #0
 800955a:	4d05      	ldr	r5, [pc, #20]	@ (8009570 <_read_r+0x20>)
 800955c:	602a      	str	r2, [r5, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	f7f8 fe0b 	bl	800217a <_read>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_read_r+0x1e>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_read_r+0x1e>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	20002614 	.word	0x20002614

08009574 <_sbrk_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	2300      	movs	r3, #0
 8009578:	4d05      	ldr	r5, [pc, #20]	@ (8009590 <_sbrk_r+0x1c>)
 800957a:	4604      	mov	r4, r0
 800957c:	4608      	mov	r0, r1
 800957e:	602b      	str	r3, [r5, #0]
 8009580:	f7f8 fe64 	bl	800224c <_sbrk>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d102      	bne.n	800958e <_sbrk_r+0x1a>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	b103      	cbz	r3, 800958e <_sbrk_r+0x1a>
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	20002614 	.word	0x20002614

08009594 <_write_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	4611      	mov	r1, r2
 800959c:	2200      	movs	r2, #0
 800959e:	4d05      	ldr	r5, [pc, #20]	@ (80095b4 <_write_r+0x20>)
 80095a0:	602a      	str	r2, [r5, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	f7f8 fe06 	bl	80021b4 <_write>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d102      	bne.n	80095b2 <_write_r+0x1e>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	b103      	cbz	r3, 80095b2 <_write_r+0x1e>
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	20002614 	.word	0x20002614

080095b8 <__assert_func>:
 80095b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095ba:	4614      	mov	r4, r2
 80095bc:	461a      	mov	r2, r3
 80095be:	4b09      	ldr	r3, [pc, #36]	@ (80095e4 <__assert_func+0x2c>)
 80095c0:	4605      	mov	r5, r0
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68d8      	ldr	r0, [r3, #12]
 80095c6:	b954      	cbnz	r4, 80095de <__assert_func+0x26>
 80095c8:	4b07      	ldr	r3, [pc, #28]	@ (80095e8 <__assert_func+0x30>)
 80095ca:	461c      	mov	r4, r3
 80095cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095d0:	9100      	str	r1, [sp, #0]
 80095d2:	462b      	mov	r3, r5
 80095d4:	4905      	ldr	r1, [pc, #20]	@ (80095ec <__assert_func+0x34>)
 80095d6:	f000 f833 	bl	8009640 <fiprintf>
 80095da:	f000 f850 	bl	800967e <abort>
 80095de:	4b04      	ldr	r3, [pc, #16]	@ (80095f0 <__assert_func+0x38>)
 80095e0:	e7f4      	b.n	80095cc <__assert_func+0x14>
 80095e2:	bf00      	nop
 80095e4:	2000001c 	.word	0x2000001c
 80095e8:	08009de6 	.word	0x08009de6
 80095ec:	08009db8 	.word	0x08009db8
 80095f0:	08009dab 	.word	0x08009dab

080095f4 <_calloc_r>:
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	fba1 5402 	umull	r5, r4, r1, r2
 80095fa:	b93c      	cbnz	r4, 800960c <_calloc_r+0x18>
 80095fc:	4629      	mov	r1, r5
 80095fe:	f7ff f941 	bl	8008884 <_malloc_r>
 8009602:	4606      	mov	r6, r0
 8009604:	b928      	cbnz	r0, 8009612 <_calloc_r+0x1e>
 8009606:	2600      	movs	r6, #0
 8009608:	4630      	mov	r0, r6
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	220c      	movs	r2, #12
 800960e:	6002      	str	r2, [r0, #0]
 8009610:	e7f9      	b.n	8009606 <_calloc_r+0x12>
 8009612:	462a      	mov	r2, r5
 8009614:	4621      	mov	r1, r4
 8009616:	f7fe f887 	bl	8007728 <memset>
 800961a:	e7f5      	b.n	8009608 <_calloc_r+0x14>

0800961c <__ascii_mbtowc>:
 800961c:	b082      	sub	sp, #8
 800961e:	b901      	cbnz	r1, 8009622 <__ascii_mbtowc+0x6>
 8009620:	a901      	add	r1, sp, #4
 8009622:	b142      	cbz	r2, 8009636 <__ascii_mbtowc+0x1a>
 8009624:	b14b      	cbz	r3, 800963a <__ascii_mbtowc+0x1e>
 8009626:	7813      	ldrb	r3, [r2, #0]
 8009628:	600b      	str	r3, [r1, #0]
 800962a:	7812      	ldrb	r2, [r2, #0]
 800962c:	1e10      	subs	r0, r2, #0
 800962e:	bf18      	it	ne
 8009630:	2001      	movne	r0, #1
 8009632:	b002      	add	sp, #8
 8009634:	4770      	bx	lr
 8009636:	4610      	mov	r0, r2
 8009638:	e7fb      	b.n	8009632 <__ascii_mbtowc+0x16>
 800963a:	f06f 0001 	mvn.w	r0, #1
 800963e:	e7f8      	b.n	8009632 <__ascii_mbtowc+0x16>

08009640 <fiprintf>:
 8009640:	b40e      	push	{r1, r2, r3}
 8009642:	b503      	push	{r0, r1, lr}
 8009644:	4601      	mov	r1, r0
 8009646:	ab03      	add	r3, sp, #12
 8009648:	4805      	ldr	r0, [pc, #20]	@ (8009660 <fiprintf+0x20>)
 800964a:	f853 2b04 	ldr.w	r2, [r3], #4
 800964e:	6800      	ldr	r0, [r0, #0]
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	f7fe ffd5 	bl	8008600 <_vfiprintf_r>
 8009656:	b002      	add	sp, #8
 8009658:	f85d eb04 	ldr.w	lr, [sp], #4
 800965c:	b003      	add	sp, #12
 800965e:	4770      	bx	lr
 8009660:	2000001c 	.word	0x2000001c

08009664 <__ascii_wctomb>:
 8009664:	4603      	mov	r3, r0
 8009666:	4608      	mov	r0, r1
 8009668:	b141      	cbz	r1, 800967c <__ascii_wctomb+0x18>
 800966a:	2aff      	cmp	r2, #255	@ 0xff
 800966c:	d904      	bls.n	8009678 <__ascii_wctomb+0x14>
 800966e:	228a      	movs	r2, #138	@ 0x8a
 8009670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009674:	601a      	str	r2, [r3, #0]
 8009676:	4770      	bx	lr
 8009678:	2001      	movs	r0, #1
 800967a:	700a      	strb	r2, [r1, #0]
 800967c:	4770      	bx	lr

0800967e <abort>:
 800967e:	2006      	movs	r0, #6
 8009680:	b508      	push	{r3, lr}
 8009682:	f000 f82b 	bl	80096dc <raise>
 8009686:	2001      	movs	r0, #1
 8009688:	f7f8 fd6c 	bl	8002164 <_exit>

0800968c <_raise_r>:
 800968c:	291f      	cmp	r1, #31
 800968e:	b538      	push	{r3, r4, r5, lr}
 8009690:	4605      	mov	r5, r0
 8009692:	460c      	mov	r4, r1
 8009694:	d904      	bls.n	80096a0 <_raise_r+0x14>
 8009696:	2316      	movs	r3, #22
 8009698:	6003      	str	r3, [r0, #0]
 800969a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096a2:	b112      	cbz	r2, 80096aa <_raise_r+0x1e>
 80096a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096a8:	b94b      	cbnz	r3, 80096be <_raise_r+0x32>
 80096aa:	4628      	mov	r0, r5
 80096ac:	f000 f830 	bl	8009710 <_getpid_r>
 80096b0:	4622      	mov	r2, r4
 80096b2:	4601      	mov	r1, r0
 80096b4:	4628      	mov	r0, r5
 80096b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096ba:	f000 b817 	b.w	80096ec <_kill_r>
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d00a      	beq.n	80096d8 <_raise_r+0x4c>
 80096c2:	1c59      	adds	r1, r3, #1
 80096c4:	d103      	bne.n	80096ce <_raise_r+0x42>
 80096c6:	2316      	movs	r3, #22
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	2001      	movs	r0, #1
 80096cc:	e7e7      	b.n	800969e <_raise_r+0x12>
 80096ce:	2100      	movs	r1, #0
 80096d0:	4620      	mov	r0, r4
 80096d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80096d6:	4798      	blx	r3
 80096d8:	2000      	movs	r0, #0
 80096da:	e7e0      	b.n	800969e <_raise_r+0x12>

080096dc <raise>:
 80096dc:	4b02      	ldr	r3, [pc, #8]	@ (80096e8 <raise+0xc>)
 80096de:	4601      	mov	r1, r0
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	f7ff bfd3 	b.w	800968c <_raise_r>
 80096e6:	bf00      	nop
 80096e8:	2000001c 	.word	0x2000001c

080096ec <_kill_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	2300      	movs	r3, #0
 80096f0:	4d06      	ldr	r5, [pc, #24]	@ (800970c <_kill_r+0x20>)
 80096f2:	4604      	mov	r4, r0
 80096f4:	4608      	mov	r0, r1
 80096f6:	4611      	mov	r1, r2
 80096f8:	602b      	str	r3, [r5, #0]
 80096fa:	f7f8 fd23 	bl	8002144 <_kill>
 80096fe:	1c43      	adds	r3, r0, #1
 8009700:	d102      	bne.n	8009708 <_kill_r+0x1c>
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	b103      	cbz	r3, 8009708 <_kill_r+0x1c>
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	bd38      	pop	{r3, r4, r5, pc}
 800970a:	bf00      	nop
 800970c:	20002614 	.word	0x20002614

08009710 <_getpid_r>:
 8009710:	f7f8 bd11 	b.w	8002136 <_getpid>

08009714 <_init>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr

08009720 <_fini>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	bf00      	nop
 8009724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009726:	bc08      	pop	{r3}
 8009728:	469e      	mov	lr, r3
 800972a:	4770      	bx	lr
